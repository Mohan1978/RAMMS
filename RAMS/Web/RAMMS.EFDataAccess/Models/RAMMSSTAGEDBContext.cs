using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RAMMS.EFDataAccess.Models
{
    public partial class RAMMSSTAGEDBContext : DbContext
    {
        public RAMMSSTAGEDBContext()
        {
        }

        public RAMMSSTAGEDBContext(DbContextOptions<RAMMSSTAGEDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActivityLogAction> ActivityLogAction { get; set; }
        public virtual DbSet<ActivityLogColumn> ActivityLogColumn { get; set; }
        public virtual DbSet<ActivityLogTable> ActivityLogTable { get; set; }
        public virtual DbSet<AnnualBridgeInspection> AnnualBridgeInspection { get; set; }
        public virtual DbSet<AnnualBridgeInspectionAttachment> AnnualBridgeInspectionAttachment { get; set; }
        public virtual DbSet<AnnualBridgeInspectionDetail> AnnualBridgeInspectionDetail { get; set; }
        public virtual DbSet<AssetIdreference> AssetIdreference { get; set; }
        public virtual DbSet<AssetIdreferenceColumn> AssetIdreferenceColumn { get; set; }
        public virtual DbSet<AttributeFlag> AttributeFlag { get; set; }
        public virtual DbSet<AuditResult> AuditResult { get; set; }
        public virtual DbSet<AuditResultPhoto> AuditResultPhoto { get; set; }
        public virtual DbSet<AuditSession> AuditSession { get; set; }
        public virtual DbSet<Complaint> Complaint { get; set; }
        public virtual DbSet<ComplaintDetail> ComplaintDetail { get; set; }
        public virtual DbSet<ComplaintPhoto> ComplaintPhoto { get; set; }
        public virtual DbSet<Contractor> Contractor { get; set; }
        public virtual DbSet<ContractorDetail> ContractorDetail { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<EmailQueue> EmailQueue { get; set; }
        public virtual DbSet<Emergency> Emergency { get; set; }
        public virtual DbSet<EmergencyDetail> EmergencyDetail { get; set; }
        public virtual DbSet<EmergencyPhoto> EmergencyPhoto { get; set; }
        public virtual DbSet<EpiFinalPhoto> EpiFinalPhoto { get; set; }
        public virtual DbSet<EpiInitialPhoto> EpiInitialPhoto { get; set; }
        public virtual DbSet<EpiMaintenanceChecklist> EpiMaintenanceChecklist { get; set; }
        public virtual DbSet<EpiMhaasset> EpiMhaasset { get; set; }
        public virtual DbSet<EpiMhaassetMainCategory> EpiMhaassetMainCategory { get; set; }
        public virtual DbSet<EpiMhaassetSubCategory> EpiMhaassetSubCategory { get; set; }
        public virtual DbSet<EpiNod> EpiNod { get; set; }
        public virtual DbSet<EpiProcessLog> EpiProcessLog { get; set; }
        public virtual DbSet<EpiResult> EpiResult { get; set; }
        public virtual DbSet<EpiTypeOfDefect> EpiTypeOfDefect { get; set; }
        public virtual DbSet<Feature> Feature { get; set; }
        public virtual DbSet<FeatureDetail> FeatureDetail { get; set; }
        public virtual DbSet<GroupStructureDetail> GroupStructureDetail { get; set; }
        public virtual DbSet<InvAbutment> InvAbutment { get; set; }
        public virtual DbSet<InvAbutmentDetail> InvAbutmentDetail { get; set; }
        public virtual DbSet<InvAirCond> InvAirCond { get; set; }
        public virtual DbSet<InvAirCondDetail> InvAirCondDetail { get; set; }
        public virtual DbSet<InvAncillary> InvAncillary { get; set; }
        public virtual DbSet<InvAncillaryDetail> InvAncillaryDetail { get; set; }
        public virtual DbSet<InvAntiClimbFence> InvAntiClimbFence { get; set; }
        public virtual DbSet<InvAntiClimbFenceDetail> InvAntiClimbFenceDetail { get; set; }
        public virtual DbSet<InvBackupPower> InvBackupPower { get; set; }
        public virtual DbSet<InvBackupPowerDetail> InvBackupPowerDetail { get; set; }
        public virtual DbSet<InvBrParapet> InvBrParapet { get; set; }
        public virtual DbSet<InvBrParapetDetail> InvBrParapetDetail { get; set; }
        public virtual DbSet<InvBridge> InvBridge { get; set; }
        public virtual DbSet<InvBridgeBearing> InvBridgeBearing { get; set; }
        public virtual DbSet<InvBridgeBearingDetail> InvBridgeBearingDetail { get; set; }
        public virtual DbSet<InvBridgeConstruction> InvBridgeConstruction { get; set; }
        public virtual DbSet<InvBridgeConsultant> InvBridgeConsultant { get; set; }
        public virtual DbSet<InvBridgeContractor> InvBridgeContractor { get; set; }
        public virtual DbSet<InvBridgeDesign> InvBridgeDesign { get; set; }
        public virtual DbSet<InvBridgeDesignAttachment> InvBridgeDesignAttachment { get; set; }
        public virtual DbSet<InvBridgeDetail> InvBridgeDetail { get; set; }
        public virtual DbSet<InvBridgeDrawing> InvBridgeDrawing { get; set; }
        public virtual DbSet<InvBridgeDrawingAttachment> InvBridgeDrawingAttachment { get; set; }
        public virtual DbSet<InvBridgeJoint> InvBridgeJoint { get; set; }
        public virtual DbSet<InvBridgeJointDetail> InvBridgeJointDetail { get; set; }
        public virtual DbSet<InvBridgeRailing> InvBridgeRailing { get; set; }
        public virtual DbSet<InvBridgeRailingDetail> InvBridgeRailingDetail { get; set; }
        public virtual DbSet<InvBridgeSpecialInvestigation> InvBridgeSpecialInvestigation { get; set; }
        public virtual DbSet<InvBridgeSpecialInvestigationAttachment> InvBridgeSpecialInvestigationAttachment { get; set; }
        public virtual DbSet<InvBridgeTechnical> InvBridgeTechnical { get; set; }
        public virtual DbSet<InvBridgeTechnicalDetail> InvBridgeTechnicalDetail { get; set; }
        public virtual DbSet<InvBridgeTechnicalUtility> InvBridgeTechnicalUtility { get; set; }
        public virtual DbSet<InvBridgeUtility> InvBridgeUtility { get; set; }
        public virtual DbSet<InvBridgeView> InvBridgeView { get; set; }
        public virtual DbSet<InvBuildingAdmin> InvBuildingAdmin { get; set; }
        public virtual DbSet<InvBuildingAdminDetail> InvBuildingAdminDetail { get; set; }
        public virtual DbSet<InvBuildingCommercial> InvBuildingCommercial { get; set; }
        public virtual DbSet<InvBuildingCommercialDetail> InvBuildingCommercialDetail { get; set; }
        public virtual DbSet<InvCctv> InvCctv { get; set; }
        public virtual DbSet<InvCctvdetail> InvCctvdetail { get; set; }
        public virtual DbSet<InvCrane> InvCrane { get; set; }
        public virtual DbSet<InvCraneDetail> InvCraneDetail { get; set; }
        public virtual DbSet<InvCrushCushion> InvCrushCushion { get; set; }
        public virtual DbSet<InvCrushCushionDetail> InvCrushCushionDetail { get; set; }
        public virtual DbSet<InvCulvert> InvCulvert { get; set; }
        public virtual DbSet<InvCulvertCatchment> InvCulvertCatchment { get; set; }
        public virtual DbSet<InvCulvertCatchmentDocument> InvCulvertCatchmentDocument { get; set; }
        public virtual DbSet<InvCulvertCatchmentDocumentAttachment> InvCulvertCatchmentDocumentAttachment { get; set; }
        public virtual DbSet<InvCulvertConstruction> InvCulvertConstruction { get; set; }
        public virtual DbSet<InvCulvertConsultant> InvCulvertConsultant { get; set; }
        public virtual DbSet<InvCulvertContractor> InvCulvertContractor { get; set; }
        public virtual DbSet<InvCulvertDetail> InvCulvertDetail { get; set; }
        public virtual DbSet<InvCulvertDrawing> InvCulvertDrawing { get; set; }
        public virtual DbSet<InvCulvertDrawingAttachment> InvCulvertDrawingAttachment { get; set; }
        public virtual DbSet<InvCulvertLanduse> InvCulvertLanduse { get; set; }
        public virtual DbSet<InvCulvertMarker> InvCulvertMarker { get; set; }
        public virtual DbSet<InvCulvertMarkerDetail> InvCulvertMarkerDetail { get; set; }
        public virtual DbSet<InvCulvertTechnical> InvCulvertTechnical { get; set; }
        public virtual DbSet<InvCulvertTechnicalDetail> InvCulvertTechnicalDetail { get; set; }
        public virtual DbSet<InvCulvertTopomap> InvCulvertTopomap { get; set; }
        public virtual DbSet<InvCulvertTopomapAttachment> InvCulvertTopomapAttachment { get; set; }
        public virtual DbSet<InvCulvertView> InvCulvertView { get; set; }
        public virtual DbSet<InvDelPost> InvDelPost { get; set; }
        public virtual DbSet<InvDelPostDetail> InvDelPostDetail { get; set; }
        public virtual DbSet<InvDetensionBasin> InvDetensionBasin { get; set; }
        public virtual DbSet<InvDetensionBasinDetail> InvDetensionBasinDetail { get; set; }
        public virtual DbSet<InvDrainIo> InvDrainIo { get; set; }
        public virtual DbSet<InvDrainIodetail> InvDrainIodetail { get; set; }
        public virtual DbSet<InvDrains> InvDrains { get; set; }
        public virtual DbSet<InvDrainsDetail> InvDrainsDetail { get; set; }
        public virtual DbSet<InvEarth> InvEarth { get; set; }
        public virtual DbSet<InvEarthDetail> InvEarthDetail { get; set; }
        public virtual DbSet<InvElectricPump> InvElectricPump { get; set; }
        public virtual DbSet<InvElectricPumpDetail> InvElectricPumpDetail { get; set; }
        public virtual DbSet<InvEmo> InvEmo { get; set; }
        public virtual DbSet<InvEmodetail> InvEmodetail { get; set; }
        public virtual DbSet<InvEscalator> InvEscalator { get; set; }
        public virtual DbSet<InvEscalatorDetail> InvEscalatorDetail { get; set; }
        public virtual DbSet<InvFan> InvFan { get; set; }
        public virtual DbSet<InvFanDetail> InvFanDetail { get; set; }
        public virtual DbSet<InvFireFighting> InvFireFighting { get; set; }
        public virtual DbSet<InvFireFightingDetail> InvFireFightingDetail { get; set; }
        public virtual DbSet<InvFlashLight> InvFlashLight { get; set; }
        public virtual DbSet<InvFlashLightDetail> InvFlashLightDetail { get; set; }
        public virtual DbSet<InvFlexPost> InvFlexPost { get; set; }
        public virtual DbSet<InvFlexPostDetail> InvFlexPostDetail { get; set; }
        public virtual DbSet<InvFloodWall> InvFloodWall { get; set; }
        public virtual DbSet<InvFloodWallDetail> InvFloodWallDetail { get; set; }
        public virtual DbSet<InvGenericView> InvGenericView { get; set; }
        public virtual DbSet<InvGreaseTrap> InvGreaseTrap { get; set; }
        public virtual DbSet<InvGreaseTrapDetail> InvGreaseTrapDetail { get; set; }
        public virtual DbSet<InvGroupStructure> InvGroupStructure { get; set; }
        public virtual DbSet<InvGuardrail> InvGuardrail { get; set; }
        public virtual DbSet<InvGuardrailDetail> InvGuardrailDetail { get; set; }
        public virtual DbSet<InvInsectKiller> InvInsectKiller { get; set; }
        public virtual DbSet<InvInsectKillerDetail> InvInsectKillerDetail { get; set; }
        public virtual DbSet<InvIts> InvIts { get; set; }
        public virtual DbSet<InvItsdetail> InvItsdetail { get; set; }
        public virtual DbSet<InvKmmarker> InvKmmarker { get; set; }
        public virtual DbSet<InvKmmarkerDetail> InvKmmarkerDetail { get; set; }
        public virtual DbSet<InvLandscape> InvLandscape { get; set; }
        public virtual DbSet<InvLandscapeDetail> InvLandscapeDetail { get; set; }
        public virtual DbSet<InvLift> InvLift { get; set; }
        public virtual DbSet<InvLiftDetail> InvLiftDetail { get; set; }
        public virtual DbSet<InvLighting> InvLighting { get; set; }
        public virtual DbSet<InvLightingDetail> InvLightingDetail { get; set; }
        public virtual DbSet<InvMainGt> InvMainGt { get; set; }
        public virtual DbSet<InvMainGtdetail> InvMainGtdetail { get; set; }
        public virtual DbSet<InvMaster> InvMaster { get; set; }
        public virtual DbSet<InvMasterDetail> InvMasterDetail { get; set; }
        public virtual DbSet<InvNjb> InvNjb { get; set; }
        public virtual DbSet<InvNjbdetail> InvNjbdetail { get; set; }
        public virtual DbSet<InvPavMarker> InvPavMarker { get; set; }
        public virtual DbSet<InvPavMarkerDetail> InvPavMarkerDetail { get; set; }
        public virtual DbSet<InvPavement> InvPavement { get; set; }
        public virtual DbSet<InvPavementDetail> InvPavementDetail { get; set; }
        public virtual DbSet<InvPier> InvPier { get; set; }
        public virtual DbSet<InvPierDetail> InvPierDetail { get; set; }
        public virtual DbSet<InvPower> InvPower { get; set; }
        public virtual DbSet<InvPowerDetail> InvPowerDetail { get; set; }
        public virtual DbSet<InvRoadMarking> InvRoadMarking { get; set; }
        public virtual DbSet<InvRoadMarkingDetail> InvRoadMarkingDetail { get; set; }
        public virtual DbSet<InvRowfence> InvRowfence { get; set; }
        public virtual DbSet<InvRowfenceDetail> InvRowfenceDetail { get; set; }
        public virtual DbSet<InvScada> InvScada { get; set; }
        public virtual DbSet<InvScadaDetail> InvScadaDetail { get; set; }
        public virtual DbSet<InvSepticTank> InvSepticTank { get; set; }
        public virtual DbSet<InvSepticTankDetail> InvSepticTankDetail { get; set; }
        public virtual DbSet<InvSewageTreatment> InvSewageTreatment { get; set; }
        public virtual DbSet<InvSewageTreatmentDetail> InvSewageTreatmentDetail { get; set; }
        public virtual DbSet<InvSign> InvSign { get; set; }
        public virtual DbSet<InvSignDetail> InvSignDetail { get; set; }
        public virtual DbSet<InvSlope> InvSlope { get; set; }
        public virtual DbSet<InvSlopeConstruction> InvSlopeConstruction { get; set; }
        public virtual DbSet<InvSlopeConsultant> InvSlopeConsultant { get; set; }
        public virtual DbSet<InvSlopeContractor> InvSlopeContractor { get; set; }
        public virtual DbSet<InvSlopeDesign> InvSlopeDesign { get; set; }
        public virtual DbSet<InvSlopeDesignAttachment> InvSlopeDesignAttachment { get; set; }
        public virtual DbSet<InvSlopeDetail> InvSlopeDetail { get; set; }
        public virtual DbSet<InvSlopeDrawing> InvSlopeDrawing { get; set; }
        public virtual DbSet<InvSlopeDrawingAttachment> InvSlopeDrawingAttachment { get; set; }
        public virtual DbSet<InvSlopeSoilInvestigation> InvSlopeSoilInvestigation { get; set; }
        public virtual DbSet<InvSlopeSoilInvestigationAttachment> InvSlopeSoilInvestigationAttachment { get; set; }
        public virtual DbSet<InvSlopeSurfaceAngle> InvSlopeSurfaceAngle { get; set; }
        public virtual DbSet<InvSlopeTechnical> InvSlopeTechnical { get; set; }
        public virtual DbSet<InvSlopeTechnicalDetail> InvSlopeTechnicalDetail { get; set; }
        public virtual DbSet<InvSlopeTechnicalSurfaceAngle> InvSlopeTechnicalSurfaceAngle { get; set; }
        public virtual DbSet<InvSlopeView> InvSlopeView { get; set; }
        public virtual DbSet<InvSpan> InvSpan { get; set; }
        public virtual DbSet<InvSpanDetail> InvSpanDetail { get; set; }
        public virtual DbSet<InvSteelBarricade> InvSteelBarricade { get; set; }
        public virtual DbSet<InvSteelBarricadeDetail> InvSteelBarricadeDetail { get; set; }
        public virtual DbSet<InvStp> InvStp { get; set; }
        public virtual DbSet<InvStpdetail> InvStpdetail { get; set; }
        public virtual DbSet<InvTelco> InvTelco { get; set; }
        public virtual DbSet<InvTelcoDetail> InvTelcoDetail { get; set; }
        public virtual DbSet<InvTollPlaza> InvTollPlaza { get; set; }
        public virtual DbSet<InvTollPlazaDetail> InvTollPlazaDetail { get; set; }
        public virtual DbSet<InvTpbooth> InvTpbooth { get; set; }
        public virtual DbSet<InvTpboothDetail> InvTpboothDetail { get; set; }
        public virtual DbSet<InvTpcanopyCeiling> InvTpcanopyCeiling { get; set; }
        public virtual DbSet<InvTpcanopyCeilingDetail> InvTpcanopyCeilingDetail { get; set; }
        public virtual DbSet<InvTpcanopyColumn> InvTpcanopyColumn { get; set; }
        public virtual DbSet<InvTpcanopyColumnDetail> InvTpcanopyColumnDetail { get; set; }
        public virtual DbSet<InvTpcanopyRoof> InvTpcanopyRoof { get; set; }
        public virtual DbSet<InvTpcanopyRoofDetail> InvTpcanopyRoofDetail { get; set; }
        public virtual DbSet<InvTpisland> InvTpisland { get; set; }
        public virtual DbSet<InvTpislandDetail> InvTpislandDetail { get; set; }
        public virtual DbSet<InvTplane> InvTplane { get; set; }
        public virtual DbSet<InvTplaneDetail> InvTplaneDetail { get; set; }
        public virtual DbSet<InvTrafficLight> InvTrafficLight { get; set; }
        public virtual DbSet<InvTrafficLightDetail> InvTrafficLightDetail { get; set; }
        public virtual DbSet<InvTunnel> InvTunnel { get; set; }
        public virtual DbSet<InvTunnelConstruction> InvTunnelConstruction { get; set; }
        public virtual DbSet<InvTunnelConsultant> InvTunnelConsultant { get; set; }
        public virtual DbSet<InvTunnelContractor> InvTunnelContractor { get; set; }
        public virtual DbSet<InvTunnelDesign> InvTunnelDesign { get; set; }
        public virtual DbSet<InvTunnelDesignAttachment> InvTunnelDesignAttachment { get; set; }
        public virtual DbSet<InvTunnelDetail> InvTunnelDetail { get; set; }
        public virtual DbSet<InvTunnelDrawing> InvTunnelDrawing { get; set; }
        public virtual DbSet<InvTunnelDrawingAttachment> InvTunnelDrawingAttachment { get; set; }
        public virtual DbSet<InvTunnelJoint> InvTunnelJoint { get; set; }
        public virtual DbSet<InvTunnelJointDetail> InvTunnelJointDetail { get; set; }
        public virtual DbSet<InvTunnelPanel> InvTunnelPanel { get; set; }
        public virtual DbSet<InvTunnelPanelDetail> InvTunnelPanelDetail { get; set; }
        public virtual DbSet<InvTunnelSpecialInvestigation> InvTunnelSpecialInvestigation { get; set; }
        public virtual DbSet<InvTunnelSpecialInvestigationAttachment> InvTunnelSpecialInvestigationAttachment { get; set; }
        public virtual DbSet<InvTunnelTechnical> InvTunnelTechnical { get; set; }
        public virtual DbSet<InvTunnelTechnicalDetail> InvTunnelTechnicalDetail { get; set; }
        public virtual DbSet<InvTunnelTechnicalUtility> InvTunnelTechnicalUtility { get; set; }
        public virtual DbSet<InvTunnelUtility> InvTunnelUtility { get; set; }
        public virtual DbSet<InvTunnelView> InvTunnelView { get; set; }
        public virtual DbSet<InvWireRope> InvWireRope { get; set; }
        public virtual DbSet<InvWireRopeDetail> InvWireRopeDetail { get; set; }
        public virtual DbSet<KpiBucketSizeParam> KpiBucketSizeParam { get; set; }
        public virtual DbSet<KpiGeneralParam> KpiGeneralParam { get; set; }
        public virtual DbSet<KpiGroupL1> KpiGroupL1 { get; set; }
        public virtual DbSet<KpiGroupL2> KpiGroupL2 { get; set; }
        public virtual DbSet<KpiGroupL3> KpiGroupL3 { get; set; }
        public virtual DbSet<KpiItem> KpiItem { get; set; }
        public virtual DbSet<KpiItemAuditCondition> KpiItemAuditCondition { get; set; }
        public virtual DbSet<KpiPavementParam> KpiPavementParam { get; set; }
        public virtual DbSet<McsActivity> McsActivity { get; set; }
        public virtual DbSet<McsActivityBacklog> McsActivityBacklog { get; set; }
        public virtual DbSet<McsActivityBacklogDetail> McsActivityBacklogDetail { get; set; }
        public virtual DbSet<McsActivityDetail> McsActivityDetail { get; set; }
        public virtual DbSet<McsActivityScorecard> McsActivityScorecard { get; set; }
        public virtual DbSet<McsActivityScorecardAttachment> McsActivityScorecardAttachment { get; set; }
        public virtual DbSet<McsActivityScorecardBacklog> McsActivityScorecardBacklog { get; set; }
        public virtual DbSet<McsActivityScorecardBacklogAfterPhoto> McsActivityScorecardBacklogAfterPhoto { get; set; }
        public virtual DbSet<McsActivityScorecardBacklogAttachment> McsActivityScorecardBacklogAttachment { get; set; }
        public virtual DbSet<McsActivityScorecardBacklogBeforePhoto> McsActivityScorecardBacklogBeforePhoto { get; set; }
        public virtual DbSet<McsActivityScorecardBacklogDetail> McsActivityScorecardBacklogDetail { get; set; }
        public virtual DbSet<McsActivityScorecardBacklogLostTime> McsActivityScorecardBacklogLostTime { get; set; }
        public virtual DbSet<McsActivityScorecardDetail> McsActivityScorecardDetail { get; set; }
        public virtual DbSet<McsActivityScorecardLostTime> McsActivityScorecardLostTime { get; set; }
        public virtual DbSet<McsActivityScorecardLostTimeView> McsActivityScorecardLostTimeView { get; set; }
        public virtual DbSet<McsActivitySection> McsActivitySection { get; set; }
        public virtual DbSet<McsCalendarWeek> McsCalendarWeek { get; set; }
        public virtual DbSet<McsCategory> McsCategory { get; set; }
        public virtual DbSet<McsCategoryBacklog> McsCategoryBacklog { get; set; }
        public virtual DbSet<McsGroup> McsGroup { get; set; }
        public virtual DbSet<McsGroupBacklog> McsGroupBacklog { get; set; }
        public virtual DbSet<McsMeeActivity> McsMeeActivity { get; set; }
        public virtual DbSet<McsMeeActivityDetail> McsMeeActivityDetail { get; set; }
        public virtual DbSet<McsMeeActivityScorecard> McsMeeActivityScorecard { get; set; }
        public virtual DbSet<McsMeeActivityScorecardAttachment> McsMeeActivityScorecardAttachment { get; set; }
        public virtual DbSet<McsMeeActivityScorecardDetail> McsMeeActivityScorecardDetail { get; set; }
        public virtual DbSet<McsMeeActivityScorecardLostTime> McsMeeActivityScorecardLostTime { get; set; }
        public virtual DbSet<McsMeeType> McsMeeType { get; set; }
        public virtual DbSet<Nod> Nod { get; set; }
        public virtual DbSet<NodAttachment> NodAttachment { get; set; }
        public virtual DbSet<NodConversion> NodConversion { get; set; }
        public virtual DbSet<NodDetail> NodDetail { get; set; }
        public virtual DbSet<NodPhoto> NodPhoto { get; set; }
        public virtual DbSet<Part> Part { get; set; }
        public virtual DbSet<PasswordHistory> PasswordHistory { get; set; }
        public virtual DbSet<PavementCondition> PavementCondition { get; set; }
        public virtual DbSet<PavementConditionDetail> PavementConditionDetail { get; set; }
        public virtual DbSet<PavementLongTermRollingProgram> PavementLongTermRollingProgram { get; set; }
        public virtual DbSet<PavementLongTermRollingProgramDetail> PavementLongTermRollingProgramDetail { get; set; }
        public virtual DbSet<PavementRating> PavementRating { get; set; }
        public virtual DbSet<PbContract> PbContract { get; set; }
        public virtual DbSet<PbContractMonth> PbContractMonth { get; set; }
        public virtual DbSet<PbContractYear> PbContractYear { get; set; }
        public virtual DbSet<PiBridgeExportDetail> PiBridgeExportDetail { get; set; }
        public virtual DbSet<PiCulvertExportDetail> PiCulvertExportDetail { get; set; }
        public virtual DbSet<PiResultBridge> PiResultBridge { get; set; }
        public virtual DbSet<PiResultBridgeFurtherInvestigation> PiResultBridgeFurtherInvestigation { get; set; }
        public virtual DbSet<PiResultBridgePhoto> PiResultBridgePhoto { get; set; }
        public virtual DbSet<PiResultBridgeRemedialWork> PiResultBridgeRemedialWork { get; set; }
        public virtual DbSet<PiResultBridgeRoutineWork> PiResultBridgeRoutineWork { get; set; }
        public virtual DbSet<PiResultBridgeView> PiResultBridgeView { get; set; }
        public virtual DbSet<PiResultCulvert> PiResultCulvert { get; set; }
        public virtual DbSet<PiResultCulvertFurtherInvestigation> PiResultCulvertFurtherInvestigation { get; set; }
        public virtual DbSet<PiResultCulvertPhoto> PiResultCulvertPhoto { get; set; }
        public virtual DbSet<PiResultCulvertRemedialWork> PiResultCulvertRemedialWork { get; set; }
        public virtual DbSet<PiResultCulvertRoutineWork> PiResultCulvertRoutineWork { get; set; }
        public virtual DbSet<PiResultCulvertView> PiResultCulvertView { get; set; }
        public virtual DbSet<PiResultSlope> PiResultSlope { get; set; }
        public virtual DbSet<PiResultSlopeFurtherInvestigation> PiResultSlopeFurtherInvestigation { get; set; }
        public virtual DbSet<PiResultSlopePhoto> PiResultSlopePhoto { get; set; }
        public virtual DbSet<PiResultSlopeRemedialWork> PiResultSlopeRemedialWork { get; set; }
        public virtual DbSet<PiResultSlopeRoutineWork> PiResultSlopeRoutineWork { get; set; }
        public virtual DbSet<PiResultSlopeView> PiResultSlopeView { get; set; }
        public virtual DbSet<PiResultTunnel> PiResultTunnel { get; set; }
        public virtual DbSet<PiResultTunnelPanel> PiResultTunnelPanel { get; set; }
        public virtual DbSet<PiResultTunnelView> PiResultTunnelView { get; set; }
        public virtual DbSet<PiSchedule> PiSchedule { get; set; }
        public virtual DbSet<PiScheduleMaster> PiScheduleMaster { get; set; }
        public virtual DbSet<PiScheduleMasterAsset> PiScheduleMasterAsset { get; set; }
        public virtual DbSet<PiScheduleView> PiScheduleView { get; set; }
        public virtual DbSet<PiSlopeExportDetail> PiSlopeExportDetail { get; set; }
        public virtual DbSet<PiTunnelExportDetail> PiTunnelExportDetail { get; set; }
        public virtual DbSet<PitAssetGroup> PitAssetGroup { get; set; }
        public virtual DbSet<PitAssetGroupDetail> PitAssetGroupDetail { get; set; }
        public virtual DbSet<PitShift> PitShift { get; set; }
        public virtual DbSet<PitShiftDetail> PitShiftDetail { get; set; }
        public virtual DbSet<PitTask> PitTask { get; set; }
        public virtual DbSet<PitTaskDamage> PitTaskDamage { get; set; }
        public virtual DbSet<PitTaskDamageView> PitTaskDamageView { get; set; }
        public virtual DbSet<PitTaskDetail> PitTaskDetail { get; set; }
        public virtual DbSet<PitTaskOnDuty> PitTaskOnDuty { get; set; }
        public virtual DbSet<PitTaskPhoto> PitTaskPhoto { get; set; }
        public virtual DbSet<PitTaskStructure> PitTaskStructure { get; set; }
        public virtual DbSet<PitTaskStructureDetail> PitTaskStructureDetail { get; set; }
        public virtual DbSet<PitTaskUserSign> PitTaskUserSign { get; set; }
        public virtual DbSet<PitTaskVehicle> PitTaskVehicle { get; set; }
        public virtual DbSet<PitTaskView> PitTaskView { get; set; }
        public virtual DbSet<PrincipalBridgeInspection> PrincipalBridgeInspection { get; set; }
        public virtual DbSet<PrincipalBridgeInspectionAttachment> PrincipalBridgeInspectionAttachment { get; set; }
        public virtual DbSet<PrincipalBridgeInspectionDetail> PrincipalBridgeInspectionDetail { get; set; }
        public virtual DbSet<Ramp> Ramp { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RmForm> RmForm { get; set; }
        public virtual DbSet<RmFormCategory> RmFormCategory { get; set; }
        public virtual DbSet<RmResult> RmResult { get; set; }
        public virtual DbSet<RmSchedule> RmSchedule { get; set; }
        public virtual DbSet<RmScheduleDetail> RmScheduleDetail { get; set; }
        public virtual DbSet<RmSchedulePhoto> RmSchedulePhoto { get; set; }
        public virtual DbSet<RmScheduleView> RmScheduleView { get; set; }
        public virtual DbSet<RossVendor> RossVendor { get; set; }
        public virtual DbSet<RossworkRr> RossworkRr { get; set; }
        public virtual DbSet<Route> Route { get; set; }
        public virtual DbSet<RouteDetail> RouteDetail { get; set; }
        public virtual DbSet<RptBiNod> RptBiNod { get; set; }
        public virtual DbSet<RptTotalAsset> RptTotalAsset { get; set; }
        public virtual DbSet<RunningNumber> RunningNumber { get; set; }
        public virtual DbSet<Section> Section { get; set; }
        public virtual DbSet<SectionDetail> SectionDetail { get; set; }
        public virtual DbSet<SectionGroup> SectionGroup { get; set; }
        public virtual DbSet<SectionGroupDetail> SectionGroupDetail { get; set; }
        public virtual DbSet<SectionGroupScope> SectionGroupScope { get; set; }
        public virtual DbSet<Sic> Sic { get; set; }
        public virtual DbSet<SicFertilizer> SicFertilizer { get; set; }
        public virtual DbSet<SicFixedL1> SicFixedL1 { get; set; }
        public virtual DbSet<SicFixedL2> SicFixedL2 { get; set; }
        public virtual DbSet<SicLandscape> SicLandscape { get; set; }
        public virtual DbSet<SicMobile> SicMobile { get; set; }
        public virtual DbSet<SicMobileView> SicMobileView { get; set; }
        public virtual DbSet<SicPhoto> SicPhoto { get; set; }
        public virtual DbSet<SicUploadFile> SicUploadFile { get; set; }
        public virtual DbSet<SicVehicle> SicVehicle { get; set; }
        public virtual DbSet<SicView> SicView { get; set; }
        public virtual DbSet<SorCategory> SorCategory { get; set; }
        public virtual DbSet<SorItem> SorItem { get; set; }
        public virtual DbSet<SpecialInspection> SpecialInspection { get; set; }
        public virtual DbSet<SpecialInspectionAttachment> SpecialInspectionAttachment { get; set; }
        public virtual DbSet<SpecialInspectionDetail> SpecialInspectionDetail { get; set; }
        public virtual DbSet<SubmissionRequestMonitoring> SubmissionRequestMonitoring { get; set; }
        public virtual DbSet<SubmissionRequestMonitoringAttachment> SubmissionRequestMonitoringAttachment { get; set; }
        public virtual DbSet<SubmissionRequestMonitoringDetail> SubmissionRequestMonitoringDetail { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<TempUpload> TempUpload { get; set; }
        public virtual DbSet<TrafficInfo> TrafficInfo { get; set; }
        public virtual DbSet<TrafficInfoDetail> TrafficInfoDetail { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserBak> UserBak { get; set; }
        public virtual DbSet<UserBak2> UserBak2 { get; set; }
        public virtual DbSet<UserDetail> UserDetail { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<UserGroupBak> UserGroupBak { get; set; }
        public virtual DbSet<UserGroupDetail> UserGroupDetail { get; set; }
        public virtual DbSet<UserGroupRights> UserGroupRights { get; set; }
        public virtual DbSet<UserGroupRightsBak> UserGroupRightsBak { get; set; }
        public virtual DbSet<UserGroupScope> UserGroupScope { get; set; }
        public virtual DbSet<UserGroupScopeBak> UserGroupScopeBak { get; set; }
        public virtual DbSet<UserGroupUser> UserGroupUser { get; set; }
        public virtual DbSet<UserGroupUserBak> UserGroupUserBak { get; set; }
        public virtual DbSet<UserRights> UserRights { get; set; }
        public virtual DbSet<UserRightsBak> UserRightsBak { get; set; }
        public virtual DbSet<UserScope> UserScope { get; set; }
        public virtual DbSet<UserScopeBak> UserScopeBak { get; set; }
        public virtual DbSet<UserStg> UserStg { get; set; }
        public virtual DbSet<VwRptBreakdownAndIssueNod> VwRptBreakdownAndIssueNod { get; set; }
        public virtual DbSet<VwRptConditionByConcessionaires> VwRptConditionByConcessionaires { get; set; }
        public virtual DbSet<VwRptConditionByRegion> VwRptConditionByRegion { get; set; }
        public virtual DbSet<VwRptConditionBySection> VwRptConditionBySection { get; set; }
        public virtual DbSet<VwRptDashboardViewComplaint> VwRptDashboardViewComplaint { get; set; }
        public virtual DbSet<VwRptDashboardViewEmergency> VwRptDashboardViewEmergency { get; set; }
        public virtual DbSet<VwRptDashboardViewForNod> VwRptDashboardViewForNod { get; set; }
        public virtual DbSet<VwRptDashboardViewPavementKpi> VwRptDashboardViewPavementKpi { get; set; }
        public virtual DbSet<VwRptDashboardViewTrendingHistoricOverTheYear> VwRptDashboardViewTrendingHistoricOverTheYear { get; set; }
        public virtual DbSet<VwRptDashboardViewTrendingHistoricOverTheYear2> VwRptDashboardViewTrendingHistoricOverTheYear2 { get; set; }
        public virtual DbSet<VwRptDashboardViewTrendingHistoricOverTheYear3> VwRptDashboardViewTrendingHistoricOverTheYear3 { get; set; }
        public virtual DbSet<VwRptDashbordViewTollPlazaSummary> VwRptDashbordViewTollPlazaSummary { get; set; }
        public virtual DbSet<VwRptDrainageInspectionOverallReport> VwRptDrainageInspectionOverallReport { get; set; }
        public virtual DbSet<VwRptFwddata> VwRptFwddata { get; set; }
        public virtual DbSet<VwRptGeometricData> VwRptGeometricData { get; set; }
        public virtual DbSet<VwRptListOfFeatureCommercialFacilities> VwRptListOfFeatureCommercialFacilities { get; set; }
        public virtual DbSet<VwRptListOfFeatureInterchangesAndJunction> VwRptListOfFeatureInterchangesAndJunction { get; set; }
        public virtual DbSet<VwRptListOfRampIds> VwRptListOfRampIds { get; set; }
        public virtual DbSet<VwRptListOfRegionsAndSections> VwRptListOfRegionsAndSections { get; set; }
        public virtual DbSet<VwRptListOfRoutes> VwRptListOfRoutes { get; set; }
        public virtual DbSet<VwRptListOfTollLanesAndTollBooths> VwRptListOfTollLanesAndTollBooths { get; set; }
        public virtual DbSet<VwRptListOfTollPlaza> VwRptListOfTollPlaza { get; set; }
        public virtual DbSet<VwRptMasterInspectionProgramBridge> VwRptMasterInspectionProgramBridge { get; set; }
        public virtual DbSet<VwRptMasterInspectionProgramDrainage> VwRptMasterInspectionProgramDrainage { get; set; }
        public virtual DbSet<VwRptMasterInspectionProgramSlope> VwRptMasterInspectionProgramSlope { get; set; }
        public virtual DbSet<VwRptMcsbacklogComprehensiveProgressTrackerReport> VwRptMcsbacklogComprehensiveProgressTrackerReport { get; set; }
        public virtual DbSet<VwRptMcsbacklogPerformanceMarkerReport> VwRptMcsbacklogPerformanceMarkerReport { get; set; }
        public virtual DbSet<VwRptMlpdata> VwRptMlpdata { get; set; }
        public virtual DbSet<VwRptMttr> VwRptMttr { get; set; }
        public virtual DbSet<VwRptOverallPluspavementConditionDistribution> VwRptOverallPluspavementConditionDistribution { get; set; }
        public virtual DbSet<VwRptPavementAnnualWorkProgramAwp> VwRptPavementAnnualWorkProgramAwp { get; set; }
        public virtual DbSet<VwRptPavementForwardWorkProgram3Years> VwRptPavementForwardWorkProgram3Years { get; set; }
        public virtual DbSet<VwRptPavementKpilistingView> VwRptPavementKpilistingView { get; set; }
        public virtual DbSet<VwRptPavementPrepConditionReport> VwRptPavementPrepConditionReport { get; set; }
        public virtual DbSet<VwRptPavementPrepInventoryReport> VwRptPavementPrepInventoryReport { get; set; }
        public virtual DbSet<VwRptPavementPrepStructureReport> VwRptPavementPrepStructureReport { get; set; }
        public virtual DbSet<VwRptPavementPrepTrafficCountReport> VwRptPavementPrepTrafficCountReport { get; set; }
        public virtual DbSet<VwRptPavementPrepWorkHistoriesReport> VwRptPavementPrepWorkHistoriesReport { get; set; }
        public virtual DbSet<VwRptPavementPrepWorkPlanReport> VwRptPavementPrepWorkPlanReport { get; set; }
        public virtual DbSet<VwRptPavementProjectedKpicomplianceReport> VwRptPavementProjectedKpicomplianceReport { get; set; }
        public virtual DbSet<VwRptPavementStripMapCondition> VwRptPavementStripMapCondition { get; set; }
        public virtual DbSet<VwRptSicDailyProgramFixedLocation> VwRptSicDailyProgramFixedLocation { get; set; }
        public virtual DbSet<VwRptSicDailyProgramGeneralRoadCleaning> VwRptSicDailyProgramGeneralRoadCleaning { get; set; }
        public virtual DbSet<VwRptSicDailyProgramLandscape> VwRptSicDailyProgramLandscape { get; set; }
        public virtual DbSet<VwRptSicDailyProgramMobile> VwRptSicDailyProgramMobile { get; set; }
        public virtual DbSet<VwRptSkidResistanceData> VwRptSkidResistanceData { get; set; }
        public virtual DbSet<VwRptSlopeWorkingFileReportProposed> VwRptSlopeWorkingFileReportProposed { get; set; }
        public virtual DbSet<VwRptSummaryOfBridgePeriodicInspectionToMha> VwRptSummaryOfBridgePeriodicInspectionToMha { get; set; }
        public virtual DbSet<VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusCurrent> VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusCurrent { get; set; }
        public virtual DbSet<VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusProposed> VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusProposed { get; set; }
        public virtual DbSet<VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrent> VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrent { get; set; }
        public virtual DbSet<VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrentRams> VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrentRams { get; set; }
        public virtual DbSet<VwRptSummaryOfSlopePeriodicInspectionReportToMhaproposed> VwRptSummaryOfSlopePeriodicInspectionReportToMhaproposed { get; set; }
        public virtual DbSet<VwRptSummaryOfTollPlazaByNetwork> VwRptSummaryOfTollPlazaByNetwork { get; set; }
        public virtual DbSet<VwRptWorkInstructionSummary> VwRptWorkInstructionSummary { get; set; }
        public virtual DbSet<VwRptWorkOrderDetailReport> VwRptWorkOrderDetailReport { get; set; }
        public virtual DbSet<VwRptWorkRequestSummary> VwRptWorkRequestSummary { get; set; }
        public virtual DbSet<VwUserOldOpusDomain> VwUserOldOpusDomain { get; set; }
        public virtual DbSet<VwUserOldUemedgentaDomain> VwUserOldUemedgentaDomain { get; set; }
        public virtual DbSet<Work> Work { get; set; }
        public virtual DbSet<WorkAttachment> WorkAttachment { get; set; }
        public virtual DbSet<WorkDetail> WorkDetail { get; set; }
        public virtual DbSet<WorkEot> WorkEot { get; set; }
        public virtual DbSet<WorkFlow> WorkFlow { get; set; }
        public virtual DbSet<WorkFlowMaster> WorkFlowMaster { get; set; }
        public virtual DbSet<WorkFlowNotification> WorkFlowNotification { get; set; }
        public virtual DbSet<WorkFlowNotificationDetail> WorkFlowNotificationDetail { get; set; }
        public virtual DbSet<WorkFlowTransaction> WorkFlowTransaction { get; set; }
        public virtual DbSet<WorkFlowTransactionDetail> WorkFlowTransactionDetail { get; set; }
        public virtual DbSet<WorkMilestone> WorkMilestone { get; set; }
        public virtual DbSet<WorkNod> WorkNod { get; set; }
        public virtual DbSet<WorkPhoto> WorkPhoto { get; set; }
        public virtual DbSet<WorkProgram> WorkProgram { get; set; }
        public virtual DbSet<WorkProgramAttachment> WorkProgramAttachment { get; set; }
        public virtual DbSet<WorkProgramDetail> WorkProgramDetail { get; set; }
        public virtual DbSet<WorkProgress> WorkProgress { get; set; }
        public virtual DbSet<WorkProgressAttachment> WorkProgressAttachment { get; set; }
        public virtual DbSet<WorkSorItem> WorkSorItem { get; set; }
        public virtual DbSet<WpContractorReview> WpContractorReview { get; set; }
        public virtual DbSet<WpDailyProgress> WpDailyProgress { get; set; }
        public virtual DbSet<WpDailyProgressMachine> WpDailyProgressMachine { get; set; }
        public virtual DbSet<WpDailyProgressManPower> WpDailyProgressManPower { get; set; }
        public virtual DbSet<WpDailyProgressMaterial> WpDailyProgressMaterial { get; set; }
        public virtual DbSet<WpDailyProgressWeather> WpDailyProgressWeather { get; set; }
        public virtual DbSet<WpDipping> WpDipping { get; set; }
        public virtual DbSet<WpDippingChainage> WpDippingChainage { get; set; }
        public virtual DbSet<WpInspection> WpInspection { get; set; }
        public virtual DbSet<WpInspectionDefect> WpInspectionDefect { get; set; }
        public virtual DbSet<WpLaneClosure> WpLaneClosure { get; set; }
        public virtual DbSet<WpLaneClosureItem> WpLaneClosureItem { get; set; }
        public virtual DbSet<WpMaterialDelivery> WpMaterialDelivery { get; set; }
        public virtual DbSet<WpMaterialDeliveryItem> WpMaterialDeliveryItem { get; set; }
        public virtual DbSet<WpPermitToWork> WpPermitToWork { get; set; }
        public virtual DbSet<WpPermitToWorkPtw> WpPermitToWorkPtw { get; set; }
        public virtual DbSet<WpServiceReport> WpServiceReport { get; set; }
        public virtual DbSet<WpServiceReportAction> WpServiceReportAction { get; set; }
        public virtual DbSet<WpServiceReportPart> WpServiceReportPart { get; set; }
        public virtual DbSet<WpServiceReportPersonel> WpServiceReportPersonel { get; set; }
        public virtual DbSet<WpServiceReportView> WpServiceReportView { get; set; }
        public virtual DbSet<WpToolboxTalk> WpToolboxTalk { get; set; }
        public virtual DbSet<WpToolboxTalkAttendance> WpToolboxTalkAttendance { get; set; }
        public virtual DbSet<WpVehicle> WpVehicle { get; set; }
        public virtual DbSet<WpVehicleItem> WpVehicleItem { get; set; }
        public virtual DbSet<WpWorkPermit> WpWorkPermit { get; set; }
        public virtual DbSet<WpWorkPermitForm> WpWorkPermitForm { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=ALPHI-NIVETHA\\SQL19;Database=RAMMSSTAGEDB;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActivityLogAction>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_ActivityLog");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<ActivityLogColumn>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityLogTablePk).HasColumnName("ActivityLogTablePK");

                entity.Property(e => e.ColumnName).HasMaxLength(100);

                entity.Property(e => e.NewValue).HasMaxLength(1000);

                entity.Property(e => e.OriginalValue).HasMaxLength(1000);

                entity.HasOne(d => d.ActivityLogTablePkNavigation)
                    .WithMany(p => p.ActivityLogColumn)
                    .HasForeignKey(d => d.ActivityLogTablePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLogColumn_ActivityLogTransaction");
            });

            modelBuilder.Entity<ActivityLogTable>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_ActivityLogTransaction");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityLogActionPk).HasColumnName("ActivityLogActionPK");

                entity.Property(e => e.BulkOperation).HasMaxLength(500);

                entity.Property(e => e.Command).HasMaxLength(10);

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.HasOne(d => d.ActivityLogActionPkNavigation)
                    .WithMany(p => p.ActivityLogTable)
                    .HasForeignKey(d => d.ActivityLogActionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLogTransaction_ActivityLog");
            });

            modelBuilder.Entity<AnnualBridgeInspection>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.BridgeType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionProgramCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProgramApprovedBy).HasMaxLength(255);

                entity.Property(e => e.ProgramPreparedBy).HasMaxLength(255);

                entity.Property(e => e.ProgramSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);
            });

            modelBuilder.Entity<AnnualBridgeInspectionAttachment>(entity =>
            {
                entity.HasKey(e => new { e.AnnualBridgeInspectionPk, e.RecordIndex });

                entity.Property(e => e.AnnualBridgeInspectionPk).HasColumnName("AnnualBridgeInspectionPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);

                entity.HasOne(d => d.AnnualBridgeInspectionPkNavigation)
                    .WithMany(p => p.AnnualBridgeInspectionAttachment)
                    .HasForeignKey(d => d.AnnualBridgeInspectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AnnualBridgeInspectionAttachment_AnnualBridgeInspection");
            });

            modelBuilder.Entity<AnnualBridgeInspectionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnnualBridgeInspectionDetail");

                entity.Property(e => e.BridgeType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BridgeTypeName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionProgramCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ProgramApprovedBy).HasMaxLength(255);

                entity.Property(e => e.ProgramPreparedBy).HasMaxLength(255);

                entity.Property(e => e.ProgramSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);
            });

            modelBuilder.Entity<AssetIdreference>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("AssetIDReference");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Asset)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Example)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlagCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FlagType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AssetIdreferenceColumn>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("AssetIDReferenceColumn");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetIdreferencePk).HasColumnName("AssetIDReferencePK");

                entity.Property(e => e.ColumnNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).IsRequired();
            });

            modelBuilder.Entity<AttributeFlag>(entity =>
            {
                entity.HasKey(e => new { e.Type, e.Code })
                    .HasName("PK_AssetAttribute");

                entity.Property(e => e.Type)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AuditResult>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.AuditSessionPk).HasColumnName("AuditSessionPK");

                entity.Property(e => e.Condition).IsRequired();

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.MobileLastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MobileLastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).IsRequired();

                entity.Property(e => e.UploadedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AuditSessionPkNavigation)
                    .WithMany(p => p.AuditResult)
                    .HasForeignKey(d => d.AuditSessionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditResult_AuditSession");

                entity.HasOne(d => d.KpiItemPkNavigation)
                    .WithMany(p => p.AuditResult)
                    .HasForeignKey(d => d.KpiItemPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditResult_KpiItem");
            });

            modelBuilder.Entity<AuditResultPhoto>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AuditResultPk).HasColumnName("AuditResultPK");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TakenBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TakenDate).HasColumnType("datetime");

                entity.HasOne(d => d.AuditResultPkNavigation)
                    .WithMany(p => p.AuditResultPhoto)
                    .HasForeignKey(d => d.AuditResultPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditResultPhoto_AuditResult");
            });

            modelBuilder.Entity<AuditSession>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PbContractMonthPk).HasColumnName("PbContractMonthPK");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag: Mainline/Facilities");

                entity.HasOne(d => d.PbContractMonthPkNavigation)
                    .WithMany(p => p.AuditSession)
                    .HasForeignKey(d => d.PbContractMonthPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditSession_PcContractMonth");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.AuditSession)
                    .HasForeignKey(d => d.SectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditSession_Section");
            });

            modelBuilder.Entity<Complaint>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActionTaken)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ActualDefectCause)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AttendedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IncidentRemark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ReplacementItem)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Severity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ContractorPkNavigation)
                    .WithMany(p => p.Complaint)
                    .HasForeignKey(d => d.ContractorPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Complaint_Contractor");

                entity.HasOne(d => d.KpiItemPkNavigation)
                    .WithMany(p => p.Complaint)
                    .HasForeignKey(d => d.KpiItemPk)
                    .HasConstraintName("FK_Complaint_KpiItem");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.Complaint)
                    .HasForeignKey(d => d.SectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Complaint_Section");
            });

            modelBuilder.Entity<ComplaintDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ComplaintDetail");

                entity.Property(e => e.ActionTaken).IsRequired();

                entity.Property(e => e.ActualDefectCause).IsRequired();

                entity.Property(e => e.AttendedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CompanyName).HasMaxLength(255);

                entity.Property(e => e.CompanyRegNo).HasMaxLength(50);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.ContactNumber).HasMaxLength(255);

                entity.Property(e => e.ContractorEmail).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IncidentRemark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.KpiGroupL1code)
                    .HasColumnName("KpiGroupL1Code")
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL1name)
                    .HasColumnName("KpiGroupL1Name")
                    .HasMaxLength(500);

                entity.Property(e => e.KpiGroupL1pk).HasColumnName("KpiGroupL1PK");

                entity.Property(e => e.KpiGroupL2code)
                    .HasColumnName("KpiGroupL2Code")
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL2name)
                    .HasColumnName("KpiGroupL2Name")
                    .HasMaxLength(500);

                entity.Property(e => e.KpiGroupL2pk).HasColumnName("KpiGroupL2PK");

                entity.Property(e => e.KpiGroupL3code)
                    .HasColumnName("KpiGroupL3Code")
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL3name)
                    .HasColumnName("KpiGroupL3Name")
                    .HasMaxLength(500);

                entity.Property(e => e.KpiGroupL3pk).HasColumnName("KpiGroupL3PK");

                entity.Property(e => e.KpiItemName).HasMaxLength(500);

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.KpiitemCode)
                    .HasColumnName("KPIItemCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PersonInCharge).HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ReplacementItem).IsRequired();

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Severity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ComplaintPhoto>(entity =>
            {
                entity.HasKey(e => new { e.ComplaintPk, e.RecordIndex });

                entity.Property(e => e.ComplaintPk).HasColumnName("ComplaintPK");

                entity.Property(e => e.PhotoFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.ComplaintPkNavigation)
                    .WithMany(p => p.ComplaintPhoto)
                    .HasForeignKey(d => d.ComplaintPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComplaintPhoto_Complaint");
            });

            modelBuilder.Entity<Contractor>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Address2)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.AppointDate).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CompanyRegNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PersonInCharge)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractorDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ContractorDetail");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Address2)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.AppointDate).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CompanyRegNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PersonInCharge)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(200);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RejectedBy).HasMaxLength(50);

                entity.Property(e => e.RejectedDate).HasColumnType("datetime");

                entity.Property(e => e.RejectedReason).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag. need?");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.UploadedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailQueue>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CarbonCopy)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmailContent).IsRequired();

                entity.Property(e => e.MessageStatus).IsRequired();

                entity.Property(e => e.Recipient).IsRequired();

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Emergency>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActionTaken)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ActualDefectCause)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AttendedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactEmployerDateTime).HasColumnType("datetime");

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmergencyDate).HasColumnType("datetime");

                entity.Property(e => e.IncidentRemark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InsuranceDocSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RemoveObstructionDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReplacementItem)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SecureTheSiteDateTime).HasColumnType("datetime");

                entity.Property(e => e.Source).HasMaxLength(150);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeOfEmergencyWork)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ContractorPkNavigation)
                    .WithMany(p => p.Emergency)
                    .HasForeignKey(d => d.ContractorPk)
                    .HasConstraintName("FK_Emergency_Contractor");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.Emergency)
                    .HasForeignKey(d => d.SectionPk)
                    .HasConstraintName("FK_Emergency_Section");
            });

            modelBuilder.Entity<EmergencyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EmergencyDetail");

                entity.Property(e => e.ActionTaken).IsRequired();

                entity.Property(e => e.ActualDefectCause).IsRequired();

                entity.Property(e => e.AttendedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CompanyRegNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContactEmployerDateTime).HasColumnType("datetime");

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyDate).HasColumnType("datetime");

                entity.Property(e => e.IncidentRemark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InsuranceDocSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PersonInCharge)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RemoveObstructionDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReplacementItem).IsRequired();

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SecureTheSiteDateTime).HasColumnType("datetime");

                entity.Property(e => e.Source).HasMaxLength(150);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeOfEmergencyWork)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EmergencyPhoto>(entity =>
            {
                entity.HasKey(e => new { e.EmergencyPk, e.RecordIndex });

                entity.Property(e => e.EmergencyPk).HasColumnName("EmergencyPK");

                entity.Property(e => e.PhotoFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.EmergencyPkNavigation)
                    .WithMany(p => p.EmergencyPhoto)
                    .HasForeignKey(d => d.EmergencyPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmergencyPhoto_Emergency");
            });

            modelBuilder.Entity<EpiFinalPhoto>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.EpiNodPk).HasColumnName("EpiNodPK");

                entity.Property(e => e.PhotoFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<EpiInitialPhoto>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.EpiNodPk).HasColumnName("EpiNodPK");

                entity.Property(e => e.PhotoFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<EpiMaintenanceChecklist>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EpiMhaasset>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("EpiMHAAsset");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetId).HasColumnName("AssetID");

                entity.Property(e => e.AssetRefNum).HasMaxLength(100);

                entity.Property(e => e.MainCategoryCode).HasMaxLength(50);

                entity.Property(e => e.RamsInvMasterPk).HasColumnName("RamsInvMasterPK");

                entity.Property(e => e.SubCategoryCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EpiMhaassetMainCategory>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("EpiMHAAssetMainCategory");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EpiMhaassetSubCategory>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_Table_1");

                entity.ToTable("EpiMHAAssetSubCategory");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EpiNod>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedRejectedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CloseDate).HasColumnType("datetime");

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DescriptionOfDefect)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.EpiFinalPhotoPk).HasColumnName("EpiFinalPhotoPK");

                entity.Property(e => e.EpiInitialPhotoPk).HasColumnName("EpiInitialPhotoPK");

                entity.Property(e => e.EpiMaintenanceChecklistPk).HasColumnName("EpiMaintenanceChecklistPK");

                entity.Property(e => e.EpiMhaassetMainCategoryPk).HasColumnName("EpiMHAAssetMainCategoryPK");

                entity.Property(e => e.EpiMhaassetSubCategoryPk).HasColumnName("EpiMHAAssetSubCategoryPK");

                entity.Property(e => e.EpiTypeOfDefectPk).HasColumnName("EpiTypeOfDefectPK");

                entity.Property(e => e.ExpectedCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.MhaassetId)
                    .IsRequired()
                    .HasColumnName("MHAAssetID")
                    .HasMaxLength(50);

                entity.Property(e => e.MhaassetRefNo)
                    .HasColumnName("MHAAssetRefNo")
                    .HasMaxLength(50);

                entity.Property(e => e.MharefNo)
                    .IsRequired()
                    .HasColumnName("MHARefNo")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.RectificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EpiProcessLog>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.EpiNodPk).HasColumnName("EpiNodPK");

                entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EpiResult>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Parameter)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<EpiTypeOfDefect>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ComplaintDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Feature>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_Feature_1");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.Feature)
                    .HasForeignKey(d => d.SectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feature_Section");
            });

            modelBuilder.Entity<FeatureDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FeatureDetail");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<GroupStructureDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupStructureDetail");

                entity.Property(e => e.MainComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MainGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MainGroupAttributeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SubComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvAbutment>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FoundationType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PierType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PileType)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProtectionType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SubstructureType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvAbutmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvAbutmentDetail");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FoundationType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.PierType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PileType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ProtectionType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubstructureType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvAirCond>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvAirCo__32150787510BB5E8");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollBooth)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Wired)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvAirCondDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvAirCondDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollBooth)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Wired)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvAncillary>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvAncil__3215078760B5E0D9");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MotorSpecification)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofGate)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvAncillaryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvAncillaryDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MotorSpecification)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofGate)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvAntiClimbFence>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvAntiC__32150787172A0688");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.EmergencyOpeningKmlocation).HasColumnName("EmergencyOpeningKMLocation");

                entity.Property(e => e.EmergencyOpeningType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FenceType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvAntiClimbFenceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvAntiClimbFenceDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmergencyOpeningKmlocation).HasColumnName("EmergencyOpeningKMLocation");

                entity.Property(e => e.EmergencyOpeningType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FenceType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBackupPower>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvBacku__3215078756E9B6BF");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Capacity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvBackupPowerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBackupPowerDetail");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Capacity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvBrParapet>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvBrPar__32150787D800ADC7");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BridgeId)
                    .IsRequired()
                    .HasColumnName("BridgeID")
                    .HasMaxLength(100)
                    .HasComment("InvMaster AssetID for Bridge");

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarLayer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarVslower)
                    .IsRequired()
                    .HasColumnName("LongitudinalBarVSLower")
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarVsmedian).HasColumnName("LongitudinalBarVSMedian");

                entity.Property(e => e.LongitudinalBarVsupper).HasColumnName("LongitudinalBarVSUpper");

                entity.Property(e => e.PostSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBrParapetDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBrParapetDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BridgeId)
                    .IsRequired()
                    .HasColumnName("BridgeID")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarLayer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarVslower)
                    .IsRequired()
                    .HasColumnName("LongitudinalBarVSLower")
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalBarVsmedian).HasColumnName("LongitudinalBarVSMedian");

                entity.Property(e => e.LongitudinalBarVsupper).HasColumnName("LongitudinalBarVSUpper");

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostSize)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridge>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CrossingFeature)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeckDrainageType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignAxleLoad)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignFloodDischarge)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignReturnPeriod)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParapetType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScourEffect)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeRiverBankProtectionType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpanConfiguration)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SuperstructureType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvBridgeBearing>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BearingType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeBearingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeBearingDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BearingType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeConstruction>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractStatus)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PackageNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvBridgeConsultant>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Hqbranch)
                    .IsRequired()
                    .HasColumnName("HQBranch")
                    .HasMaxLength(150);

                entity.Property(e => e.InvBridgeConstructionPk).HasColumnName("InvBridgeConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvBridgeContractor>(entity =>
            {
                entity.HasKey(e => new { e.Pk, e.InvBridgeConstructionPk });

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InvBridgeConstructionPk).HasColumnName("InvBridgeConstructionPK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CableTelexNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.VendorNumber)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvBridgeDesign>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DesignDate).HasColumnType("datetime");

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PreparedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvBridgeDesignAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvBridgeDesignPk, e.RecordIndex });

                entity.Property(e => e.InvBridgeDesignPk).HasColumnName("InvBridgeDesignPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvBridgeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CrossingFeature)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DeckDrainageType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignAxleLoad)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignFloodDischarge)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignReturnPeriod)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParapetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScourEffect)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeRiverBankProtectionType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SpanConfiguration)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.SuperstructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBridgeDrawing>(entity =>
            {
                entity.HasKey(e => new { e.Pk, e.InvBridgeConstructionPk });

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InvBridgeConstructionPk).HasColumnName("InvBridgeConstructionPK");

                entity.Property(e => e.Client)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DrawingDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvBridgeDrawingAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvBridgeDrawingPk, e.RecordIndex });

                entity.Property(e => e.InvBridgeDrawingPk).HasColumnName("InvBridgeDrawingPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvBridgeJoint>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FinishTreatment)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JointType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeJointDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeJointDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishTreatment)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.JointType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeRailing>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_BridgeRailing");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalLayer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LongitudinalSize)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PostSize)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Quantity)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RailingType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeRailingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeRailingDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LongitudinalLayer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LongitudinalSize)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostSize)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Quantity)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RailingType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeSpecialInvestigation>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.InvestigationDate).HasColumnType("datetime");

                entity.Property(e => e.PreparedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ReportSummary)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvBridgeSpecialInvestigationAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvBridgeSpecialInvestigationPk, e.RecordIndex });

                entity.Property(e => e.InvBridgeSpecialInvestigationPk).HasColumnName("InvBridgeSpecialInvestigationPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvBridgeTechnical>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1-Jan-2018')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CrossingFeature)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeckDrainageType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignAxleLoad)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignFloodDischarge)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignReturnPeriod)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DesignWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParapetType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScourEffect)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeRiverBankProtectionType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpanConfiguration)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SuperstructureType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvBridgeTechnicalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeTechnicalDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CrossingFeature)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DeckDrainageType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignAxleLoad)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignFloodDischarge)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignReturnPeriod)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.OriginalPk).HasColumnName("OriginalPK");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParapetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ScourEffect)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeRiverBankProtectionType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SpanConfiguration)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SuperstructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBridgeTechnicalUtility>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvBridgeTechnicalPk).HasColumnName("InvBridgeTechnicalPK");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UtilityName)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeUtility>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_InvBridgeUtility_1");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvBridgePk).HasColumnName("InvBridgePK");

                entity.Property(e => e.TempId).HasColumnName("TempID");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UtilityName)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBridgeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBridgeView");

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseDate).HasColumnType("datetime");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CrossingFeature)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DeckDrainageType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignAxleLoad)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignFloodDischarge)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignReturnPeriod)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DesignWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParapetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PiScheduleMasterPk).HasColumnName("PiScheduleMasterPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ScourEffect)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeRiverBankProtectionType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SpanConfiguration)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SuperstructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Type)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBuildingAdmin>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvBuildingAdmin_1");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetCapacity)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocality)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BuildingCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FloorLevel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBuildingAdminDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBuildingAdminDetail");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetCapacity)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocality)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BuildingCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FloorLevel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvBuildingCommercial>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvBuildingCommercial_1");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetCapacity)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocality)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BuildingCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FloorLevel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvBuildingCommercialDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvBuildingCommercialDetail");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetCapacity)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocality)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BuildingCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FloorLevel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvCctv>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvCCTV__32150787A3EE2F64");

                entity.ToTable("InvCCTV");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AntivirusNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cctvtype)
                    .IsRequired()
                    .HasColumnName("CCTVType")
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LenseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PoleType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignalCableType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwareNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SystemDvrtype)
                    .IsRequired()
                    .HasColumnName("SystemDVRType")
                    .HasMaxLength(50);

                entity.Property(e => e.TollBooth)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCctvdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCCTVDetail");

                entity.Property(e => e.AntivirusNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cctvtype)
                    .IsRequired()
                    .HasColumnName("CCTVType")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LenseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PoleType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignalCableType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwareNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.SystemDvrtype)
                    .IsRequired()
                    .HasColumnName("SystemDVRType")
                    .HasMaxLength(50);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollBooth)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCrane>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvCrane__321507873153DEEF");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCraneDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCraneDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCrushCushion>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvCrush__321507871D8174F8");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BeamPanel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CatridgeNos)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CatridgeType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateofInstallation).HasColumnType("datetime");

                entity.Property(e => e.DesignType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Diaphragm)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighSpeedCatridge)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighSpeedDiaphragm)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Monorail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaLength)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaLhs)
                    .IsRequired()
                    .HasColumnName("ReserveGoreAreaLHS")
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaRhs)
                    .IsRequired()
                    .HasColumnName("ReserveGoreAreaRHS")
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaWidth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeedLimit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SteelBackup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YellowNose)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCrushCushionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCrushCushionDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BeamPanel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CatridgeNos)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CatridgeType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CcbaseType)
                    .IsRequired()
                    .HasColumnName("CCBaseType")
                    .HasMaxLength(50);

                entity.Property(e => e.CcspeedLimit)
                    .IsRequired()
                    .HasColumnName("CCSpeedLimit")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateofInstallation).HasColumnType("datetime");

                entity.Property(e => e.DesignType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Diaphragm)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HighSpeedCatridge)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighSpeedDiaphragm)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Monorail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.ReserveGoreAreaLength)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaLhs)
                    .IsRequired()
                    .HasColumnName("ReserveGoreAreaLHS")
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaRhs)
                    .IsRequired()
                    .HasColumnName("ReserveGoreAreaRHS")
                    .HasMaxLength(50);

                entity.Property(e => e.ReserveGoreAreaWidth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SteelBackup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.YellowNose)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCulvert>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.DateInactive).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillHeight)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InformationSource)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Inlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletKm)
                    .IsRequired()
                    .HasColumnName("InletKM")
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InletPosition)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InletStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Marker)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationBy)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Outlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletKm)
                    .IsRequired()
                    .HasColumnName("OutletKM")
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutletPosition)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutletStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureType)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCulvertCatchment>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CatchmentArea)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DesignCapacity)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DownstreamLanduse)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HighWaterLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LanduseOriginal)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ReportReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UpstreamLanduse)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<InvCulvertCatchmentDocument>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvCulvertCatchmentPk).HasColumnName("InvCulvertCatchmentPK");

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvCulvertCatchmentDocumentAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvCulvertCatchmentDocumentPk, e.RecordIndex });

                entity.Property(e => e.InvCulvertCatchmentDocumentPk).HasColumnName("InvCulvertCatchmentDocumentPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvCulvertConstruction>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Chainage)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractStatus)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DeveloperName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PackageNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YearBuilt)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCulvertConsultant>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Hqbranch)
                    .IsRequired()
                    .HasColumnName("HQBranch")
                    .HasMaxLength(150);

                entity.Property(e => e.InvCulvertConstructionPk).HasColumnName("InvCulvertConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvCulvertContractor>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CableTelexNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvCulvertConstructionPk).HasColumnName("InvCulvertConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.VendorNumber)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCulvertDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCulvertDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateInactive).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FillHeight)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InformationSource)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Inlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletKm)
                    .IsRequired()
                    .HasColumnName("InletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.InletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Marker)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModificationBy)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.Outlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletKm)
                    .IsRequired()
                    .HasColumnName("OutletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.OutletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(150);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvCulvertDrawing>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Client)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DrawingDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvCulvertConstructionPk).HasColumnName("InvCulvertConstructionPK");

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvCulvertDrawingAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvCulvertDrawingPk, e.RecordIndex });

                entity.Property(e => e.InvCulvertDrawingPk).HasColumnName("InvCulvertDrawingPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvCulvertLanduse>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Downstream)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.InvCulvertCatchmentPk).HasColumnName("InvCulvertCatchmentPK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Upstream)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCulvertMarker>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvCulve__321507874086247E");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cmnumber)
                    .IsRequired()
                    .HasColumnName("CMNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.InletInstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletOverallCondition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletPostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletSignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletInstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletOverallCondition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletPostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletSignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvCulvertMarkerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCulvertMarkerDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Cmnumber)
                    .IsRequired()
                    .HasColumnName("CMNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InletInstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletOverallCondition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletPostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletSignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.OutletInstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletOverallCondition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletPostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletSignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvCulvertTechnical>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1-Jan-2018')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateInactive).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillHeight)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InformationSource)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Inlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletKm)
                    .IsRequired()
                    .HasColumnName("InletKM")
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InletPosition)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InletStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Marker)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationBy)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Outlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletKm)
                    .IsRequired()
                    .HasColumnName("OutletKM")
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutletPosition)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutletStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureType)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCulvertTechnicalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCulvertTechnicalDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateInactive).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FillHeight)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InformationSource)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Inlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletKm)
                    .IsRequired()
                    .HasColumnName("InletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.InletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Marker)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationBy)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.OriginalPk).HasColumnName("OriginalPK");

                entity.Property(e => e.Outlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletKm)
                    .IsRequired()
                    .HasColumnName("OutletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.OutletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureType)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvCulvertTopomap>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvCulvertCatchmentPk).HasColumnName("InvCulvertCatchmentPK");

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvCulvertTopomapAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvCulvertTopomapPk, e.RecordIndex });

                entity.Property(e => e.InvCulvertTopomapPk).HasColumnName("InvCulvertTopomapPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvCulvertView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvCulvertView");

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.BaseDate).HasColumnType("datetime");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateInactive).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FillHeight)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.InformationSource)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Inlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletKm)
                    .IsRequired()
                    .HasColumnName("InletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.InletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Marker)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationBy)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Outlet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletKm)
                    .IsRequired()
                    .HasColumnName("OutletKM")
                    .HasMaxLength(150);

                entity.Property(e => e.OutletPosition)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OutletStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PiScheduleMasterPk).HasColumnName("PiScheduleMasterPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(150);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureType)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvDelPost>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvDelPo__32150787D09FC5A8");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationSpacing)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.StripColorBack)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StripColorFront)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StripHeightFrl).HasColumnName("StripHeightFRL");

                entity.Property(e => e.StripType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDelPostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvDelPostDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationSpacing)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.StripColorBack)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StripColorFront)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StripHeightFrl).HasColumnName("StripHeightFRL");

                entity.Property(e => e.StripType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvDetensionBasin>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvDeten__32150787FEA22C71");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PumpType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SafetyBarrierPostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SafetyBarrierType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Shape)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpillwayType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TrashScreenType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofLiningBase)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofLiningWall)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofOsd)
                    .IsRequired()
                    .HasColumnName("TypeofOSD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDetensionBasinDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvDetensionBasinDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.OutletType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PumpType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SafetyBarrierPostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SafetyBarrierType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shape)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpillwayType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TrashScreenType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofLiningBase)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofLiningWall)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofOsd)
                    .IsRequired()
                    .HasColumnName("TypeofOSD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDrainIo>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvDrain__321507875B3CB423");

                entity.ToTable("InvDrainIO");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofGrating)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofGratingFrame)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofHinge)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofInletOutlet)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDrainIodetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvDrainIODetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TypeofGrating)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofGratingFrame)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofHinge)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofInletOutlet)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDrains>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvDrain__321507871D002DA6");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.DrainShape)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DrainType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InletId)
                    .IsRequired()
                    .HasColumnName("InletID")
                    .HasMaxLength(50);

                entity.Property(e => e.InletStructureType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutletId)
                    .IsRequired()
                    .HasColumnName("OutletID")
                    .HasMaxLength(50);

                entity.Property(e => e.OutletStructureType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofGrating)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvDrainsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvDrainsDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DrainShape)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DrainType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InletId)
                    .IsRequired()
                    .HasColumnName("InletID")
                    .HasMaxLength(50);

                entity.Property(e => e.InletStructureType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.OutletId)
                    .IsRequired()
                    .HasColumnName("OutletID")
                    .HasMaxLength(50);

                entity.Property(e => e.OutletStructureType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TypeofGrating)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvEarth>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvEarth__3215078773711012");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingBuildingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeederPillarTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeederPillarTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighmastTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighmastTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.StaggedLineTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StaggedLineTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubstationTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubstationTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollCanopyTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollCanopyTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvEarthDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvEarthDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BuildingBuildingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FeederPillarTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeederPillarTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HighmastTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HighmastTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.StaggedLineTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StaggedLineTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubstationTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubstationTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollCanopyTypeofAirTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollCanopyTypeofConductor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvElectricPump>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvElect__321507870881A7E9");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofSensor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofStarter)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvElectricPumpDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvElectricPumpDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofSensor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofStarter)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvEmo>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvEMO__321507871FA19242");

                entity.ToTable("InvEMO");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetComponent)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostMaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RailingMaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBalanceRoller)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBaseCoverPlate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBedding)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofEmergencyJacking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPalletJack)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvEmodetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvEMODetail");

                entity.Property(e => e.AssetComponent)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostMaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RailingMaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TypeofBalanceRoller)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBaseCoverPlate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBedding)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofEmergencyJacking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPalletJack)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvEscalator>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvEscal__32150787034AF175");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EscalatorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvEscalatorDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvEscalatorDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EscalatorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvFan>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvFan__3215078775BC9A62");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvFanDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvFanDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvFireFighting>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvFireF__321507874833B3EC");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofStarter)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvFireFightingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvFireFightingDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofStarter)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvFlashLight>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvFlash__32150787EA093D99");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LanternType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvFlashLightDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvFlashLightDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LanternType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvFlexPost>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvFlexP__32150787DB97732A");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Arrangement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetColor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PoleDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvFlexPostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvFlexPostDetail");

                entity.Property(e => e.Arrangement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetColor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PoleDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvFloodWall>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvFlood__3215078707DF7D13");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BeddingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CappingBeamType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FloodWallType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvFloodWallDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvFloodWallDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BeddingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CappingBeamType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FloodWallType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceHistory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvGenericView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvGenericView");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<InvGreaseTrap>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvGreas__321507874608F926");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvGreaseTrapDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvGreaseTrapDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvGroupStructure>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.MainComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MainGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SubComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SubGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvGuardrail>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvGuard__32150787D80A579F");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.PackerType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.Rigidity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvGuardrailDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvGuardrailDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.PackerType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Rigidity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvInsectKiller>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvInsec__32150787577B9E72");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvInsectKillerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvInsectKillerDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvIts>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvITS__3215078735C2A813");

                entity.ToTable("InvITS");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AntivirusNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cctvtype)
                    .IsRequired()
                    .HasColumnName("CCTVType")
                    .HasMaxLength(50);

                entity.Property(e => e.Cube)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LenseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocationofDrs)
                    .IsRequired()
                    .HasColumnName("LocationofDRS")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PoleType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityofDrs).HasColumnName("QuantityofDRS");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwarenameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvItsdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvITSDetail");

                entity.Property(e => e.AntivirusNameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CameraType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cctvtype)
                    .IsRequired()
                    .HasColumnName("CCTVType")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Cube)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LenseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LocationofDrs)
                    .IsRequired()
                    .HasColumnName("LocationofDRS")
                    .HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PoleType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityofDrs).HasColumnName("QuantityofDRS");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwarenameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvKmmarker>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvKMMar__32150787DDAC9FD8");

                entity.ToTable("InvKMMarker");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.SignFace)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignFaceDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvKmmarkerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvKMMarkerDetail");

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SignFace)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignFaceDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignFaceMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvLandscape>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvLandscape_1");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.HardLandscaping)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.SoftLandscaping)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ZoneCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvLandscapeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvLandscapeDetail");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AssetNumbering)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.ConsultantCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantRptno)
                    .IsRequired()
                    .HasColumnName("ConsultantRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRegNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorRptno)
                    .IsRequired()
                    .HasColumnName("ContractorRPTNo")
                    .HasMaxLength(150);

                entity.Property(e => e.ContractorVendorNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingFile)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HardLandscaping)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SoftLandscaping)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.ZoneCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvLift>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvLift__321507879D3AA0D9");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LiftNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvLiftDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvLiftDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LiftNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.RegistrationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvLighting>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvLight__321507874C354CFF");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LanternBrand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanternType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvLightingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvLightingDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LanternBrand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanternType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvMainGt>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvMainG__32150787468C8CE0");

                entity.ToTable("InvMainGT");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvMainGtdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvMainGTDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvMaster>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.HasIndex(e => e.Id);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("table name");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FeaturePkNavigation)
                    .WithMany(p => p.InvMaster)
                    .HasForeignKey(d => d.FeaturePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_Feature");

                entity.HasOne(d => d.GroupStructurePkNavigation)
                    .WithMany(p => p.InvMaster)
                    .HasForeignKey(d => d.GroupStructurePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_InvGroupStructure");

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.InvMaster)
                    .HasForeignKey<InvMaster>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_InvBridge");

                entity.HasOne(d => d.Pk1)
                    .WithOne(p => p.InvMaster)
                    .HasForeignKey<InvMaster>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_InvCulvert");

                entity.HasOne(d => d.Pk2)
                    .WithOne(p => p.InvMaster)
                    .HasForeignKey<InvMaster>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_InvSlope");

                entity.HasOne(d => d.Pk3)
                    .WithOne(p => p.InvMaster)
                    .HasForeignKey<InvMaster>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvMaster_InvTunnel");
            });

            modelBuilder.Entity<InvMasterDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvMasterDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvNjb>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvNJB__32150787BAA92BE1");

                entity.ToTable("InvNJB");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmbeddedDepth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndTreatment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalClearance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvNjbdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvNJBDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmbeddedDepth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndTreatment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HorizontalClearance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvPavMarker>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvPavMa__321507873CFCEBAA");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Arrangement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DimensionLength)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvPavMarkerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvPavMarkerDetail");

                entity.Property(e => e.Arrangement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DimensionLength)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvPavement>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvPavem__32150787F0725F14");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BridgeId)
                    .IsRequired()
                    .HasColumnName("BridgeID")
                    .HasMaxLength(100);

                entity.Property(e => e.BridgeName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Crcplength).HasColumnName("CRCPLength");

                entity.Property(e => e.IsCrcp).HasColumnName("IsCRCP");

                entity.Property(e => e.IsJrcp).HasColumnName("IsJRCP");

                entity.Property(e => e.Jrcplength).HasColumnName("JRCPLength");

                entity.Property(e => e.LaneNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MedianTypeofSurfacing)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvPavementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvPavementDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BridgeId)
                    .IsRequired()
                    .HasColumnName("BridgeID")
                    .HasMaxLength(100);

                entity.Property(e => e.BridgeName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Crcplength).HasColumnName("CRCPLength");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.IsCrcp).HasColumnName("IsCRCP");

                entity.Property(e => e.IsJrcp).HasColumnName("IsJRCP");

                entity.Property(e => e.Jrcplength).HasColumnName("JRCPLength");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LaneNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MedianTypeofSurfacing)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvPier>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.FoundationType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Material)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PierType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvPierDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvPierDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FoundationType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Material)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.PierType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvPower>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvPower__32150787F99D1783");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BatteryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpecificationofTimer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvPowerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvPowerDetail");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BatteryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpecificationofTimer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvRoadMarking>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvRoadM__321507874ACCF5BA");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DimensionGap)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingArrow)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingLongitudinal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingOthers)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingTraverse)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvRoadMarkingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvRoadMarkingDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DimensionGap)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TypeofMarking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingArrow)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingLongitudinal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingOthers)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofMarkingTraverse)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvRowfence>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvROWFe__3215078795BC80B3");

                entity.ToTable("InvROWFence");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.LayerofStrainingWire)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Layerofbarbwire)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceGate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceGateCattletrap)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceGateLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostSizeThickness)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostSpacing)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.SizeofConcretePlinth)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvRowfenceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvROWFenceDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LayerofStrainingWire)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Layerofbarbwire)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintenanceGate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceGateCattletrap)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaintenanceGateLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PostMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostSizeThickness)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostSpacing)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SizeofConcretePlinth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvScada>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvScada__3215078769D3F81F");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DriverType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.LocationFloorLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.SensorType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwareType)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvScadaDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvScadaDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DriverType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LocationFloorLevel)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SensorType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwareType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvSepticTank>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvSepti__321507873EBDDCAF");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSepticTankDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSepticTankDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSewageTreatment>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvSewag__3215078746AF0D69");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSewageTreatmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSewageTreatmentDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSign>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.BackFrameMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetroReflectivityBackgroundReading)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetroReflectivityLegendReading)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SheetingManufacturer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SheetingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignPosition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.InvSign)
                    .HasForeignKey<InvSign>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvSign_InvMaster1");
            });

            modelBuilder.Entity<InvSignDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSignDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.BackFrameMaterial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RetroReflectivityBackgroundReading)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetroReflectivityLegendReading)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SheetingManufacturer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SheetingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignPosition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvSlope>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdverseGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AssetKmfrom).HasColumnName("AssetKMFrom");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetKmto).HasColumnName("AssetKMTo");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoOfDiscontinuitySet)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtherLithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtherMajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RockSoilInterface)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.WeatheringGrade)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvSlopeConstruction>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ChainageEnd)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ChainageStart)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractStatus)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PackageNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSlopeConsultant>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Hqbranch)
                    .IsRequired()
                    .HasColumnName("HQBranch")
                    .HasMaxLength(150);

                entity.Property(e => e.InvSlopeConstructionPk).HasColumnName("InvSlopeConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeContractor>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CableTelexNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvSlopeConstructionPk).HasColumnName("InvSlopeConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.VendorNumber)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvSlopeDesign>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Consultant)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ConsultantAddress)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DesignDate).HasColumnType("datetime");

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PreparedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeDesignAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvSlopeDesignPk, e.RecordIndex });

                entity.Property(e => e.InvSlopeDesignPk).HasColumnName("InvSlopeDesignPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvSlopeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSlopeDetail");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AdverseGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AssetKmfrom).HasColumnName("AssetKMFrom");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetKmto).HasColumnName("AssetKMTo");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.MajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NoOfDiscontinuitySet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.OtherLithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OtherMajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RockSoilInterface)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.WeatheringGrade)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvSlopeDrawing>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Client)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DrawingDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvSlopeConstructionPk).HasColumnName("InvSlopeConstructionPK");

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeDrawingAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvSlopeDrawingPk, e.RecordIndex });

                entity.Property(e => e.InvSlopeDrawingPk).HasColumnName("InvSlopeDrawingPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvSlopeSoilInvestigation>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Consultant)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Contractor)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.SoilInvestigationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeSoilInvestigationAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvSlopeSoilInvestigationPk, e.RecordIndex });

                entity.Property(e => e.InvSlopeSoilInvestigationPk).HasColumnName("InvSlopeSoilInvestigationPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvSlopeSurfaceAngle>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvSlopePk).HasColumnName("InvSlopePK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Surface)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TempId).HasColumnName("TempID");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeTechnical>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdverseGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AssetKmfrom).HasColumnName("AssetKMFrom");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetKmto).HasColumnName("AssetKMTo");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1-Jan-2018')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoOfDiscontinuitySet)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtherLithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtherMajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RockSoilInterface)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.WeatheringGrade)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvSlopeTechnicalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSlopeTechnicalDetail");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AdverseGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AssetKmfrom).HasColumnName("AssetKMFrom");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetKmto).HasColumnName("AssetKMTo");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.HazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.MajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NoOfDiscontinuitySet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OriginalPk).HasColumnName("OriginalPK");

                entity.Property(e => e.OtherLithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OtherMajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RockSoilInterface)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.WeatheringGrade)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvSlopeTechnicalSurfaceAngle>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvSlopeTechnicalPk).HasColumnName("InvSlopeTechnicalPK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Surface)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvSlopeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSlopeView");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AdverseGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetKmfrom).HasColumnName("AssetKMFrom");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetKmto).HasColumnName("AssetKMTo");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BaseDate).HasColumnType("datetime");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.MajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NoOfDiscontinuitySet)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OtherLithologyRockType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.OtherMajorGeologicalStructure)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PiScheduleMasterPk).HasColumnName("PiScheduleMasterPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RockSoilInterface)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.WeatheringGrade)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvSpan>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GirderBeamType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvSpanDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSpanDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.BrandManufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GirderBeamType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvSteelBarricade>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvSteel__32150787360F677B");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvSteelBarricadeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSteelBarricadeDetail");

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetInvType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvStp>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvSTP__3215078738C494D4");

                entity.ToTable("InvSTP");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvStpdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvSTPDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Equipment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofBlower)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPump)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTelco>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvTelco__321507877C69D4DB");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Capacity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwarenameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTelcoDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTelcoDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Capacity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SoftwarenameAndVersion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTollPlaza>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvTollPlaza_1");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConstructionRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.PackageNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PlazaAbbr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlazaCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.TollSystemType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTollPlazaDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTollPlazaDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.ConstructionRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.PackageNo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlazaAbbr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlazaCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollSystemType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TpopeningDate)
                    .HasColumnName("TPOpeningDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<InvTpbooth>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvTPBooth_1");

                entity.ToTable("InvTPBooth");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BoothNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BoothType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LaneCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpboothDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPBoothDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BoothNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BoothType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LaneCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyCeiling>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvCanopyCeiling_1");

                entity.ToTable("InvTPCanopyCeiling");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.CeilingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyCeilingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPCanopyCeilingDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CeilingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyColumn>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvCanopyColumn_1");

                entity.ToTable("InvTPCanopyColumn");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.ColumnType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyColumnDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPCanopyColumnDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.ColumnType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyRoof>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvCanopyRoof_1");

                entity.ToTable("InvTPCanopyRoof");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.GutterRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Rwdpdiameter).HasColumnName("RWDPDiameter");

                entity.Property(e => e.Rwdplength).HasColumnName("RWDPLength");

                entity.Property(e => e.Rwdplocation)
                    .IsRequired()
                    .HasColumnName("RWDPLocation")
                    .HasMaxLength(150);

                entity.Property(e => e.Rwdpremarks)
                    .IsRequired()
                    .HasColumnName("RWDPRemarks")
                    .HasMaxLength(500);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofGutter)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofRoof)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofRwdp)
                    .IsRequired()
                    .HasColumnName("TypeofRWDP")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpcanopyRoofDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPCanopyRoofDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.GutterRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.Rwdpdiameter).HasColumnName("RWDPDiameter");

                entity.Property(e => e.Rwdplength).HasColumnName("RWDPLength");

                entity.Property(e => e.Rwdplocation)
                    .IsRequired()
                    .HasColumnName("RWDPLocation")
                    .HasMaxLength(150);

                entity.Property(e => e.Rwdpremarks)
                    .IsRequired()
                    .HasColumnName("RWDPRemarks")
                    .HasMaxLength(500);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofGutter)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofRoof)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofRwdp)
                    .IsRequired()
                    .HasColumnName("TypeofRWDP")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpisland>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvTPIsland_1");

                entity.ToTable("InvTPIsland");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.IslandKerbType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IslandNosingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IslandType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RhsrailingBeamDimension)
                    .IsRequired()
                    .HasColumnName("RHSRailingBeamDimension")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingBeamLength)
                    .IsRequired()
                    .HasColumnName("RHSRailingBeamLength")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingBeamThickness).HasColumnName("RHSRailingBeamThickness");

                entity.Property(e => e.RhsrailingPostDimension)
                    .IsRequired()
                    .HasColumnName("RHSRailingPostDimension")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingPostHeightaboveBasePlate).HasColumnName("RHSRailingPostHeightaboveBasePlate");

                entity.Property(e => e.RhsrailingPostQuantity).HasColumnName("RHSRailingPostQuantity");

                entity.Property(e => e.RhsrailingPostSpacing)
                    .IsRequired()
                    .HasColumnName("RHSRailingPostSpacing")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingPostThickness).HasColumnName("RHSRailingPostThickness");

                entity.Property(e => e.RhsrailingQuantity).HasColumnName("RHSRailingQuantity");

                entity.Property(e => e.SideSwipePostDimension)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SideSwipePostMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SideSwipePostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTpislandDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPIslandDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.IslandKerbType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IslandNosingType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IslandType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RhsrailingBeamDimension)
                    .IsRequired()
                    .HasColumnName("RHSRailingBeamDimension")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingBeamLength)
                    .IsRequired()
                    .HasColumnName("RHSRailingBeamLength")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingBeamThickness).HasColumnName("RHSRailingBeamThickness");

                entity.Property(e => e.RhsrailingPostDimension)
                    .IsRequired()
                    .HasColumnName("RHSRailingPostDimension")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingPostHeightaboveBasePlate).HasColumnName("RHSRailingPostHeightaboveBasePlate");

                entity.Property(e => e.RhsrailingPostQuantity).HasColumnName("RHSRailingPostQuantity");

                entity.Property(e => e.RhsrailingPostSpacing)
                    .IsRequired()
                    .HasColumnName("RHSRailingPostSpacing")
                    .HasMaxLength(150);

                entity.Property(e => e.RhsrailingPostThickness).HasColumnName("RHSRailingPostThickness");

                entity.Property(e => e.RhsrailingQuantity).HasColumnName("RHSRailingQuantity");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SideSwipePostDimension)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SideSwipePostMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SideSwipePostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTplane>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("InvTPLane_1");

                entity.ToTable("InvTPLane");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.GantryBarType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GantrySignboardType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Hlbheight).HasColumnName("HLBHeight");

                entity.Property(e => e.Hlblocation)
                    .IsRequired()
                    .HasColumnName("HLBLocation")
                    .HasMaxLength(150);

                entity.Property(e => e.Hlbremarks)
                    .IsRequired()
                    .HasColumnName("HLBRemarks")
                    .HasMaxLength(500);

                entity.Property(e => e.Hlbtype)
                    .IsRequired()
                    .HasColumnName("HLBType")
                    .HasMaxLength(150);

                entity.Property(e => e.Hlbwidth).HasColumnName("HLBWidth");

                entity.Property(e => e.LaneCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LaneDirection)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LaneType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Reversible)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SignagesCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SignagesLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SignagesRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SignagesType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);

                entity.Property(e => e.TransactionMode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.VehicleType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTplaneDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTPLaneDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GantryBarType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GantrySignboardType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Hlbheight).HasColumnName("HLBHeight");

                entity.Property(e => e.Hlblocation)
                    .IsRequired()
                    .HasColumnName("HLBLocation")
                    .HasMaxLength(150);

                entity.Property(e => e.Hlbremarks)
                    .IsRequired()
                    .HasColumnName("HLBRemarks")
                    .HasMaxLength(500);

                entity.Property(e => e.Hlbtype)
                    .IsRequired()
                    .HasColumnName("HLBType")
                    .HasMaxLength(150);

                entity.Property(e => e.Hlbwidth).HasColumnName("HLBWidth");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LaneCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LaneDirection)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LaneType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Reversible)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SignagesCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SignagesLocation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SignagesRemarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SignagesType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("TollPlazaID")
                    .HasMaxLength(150);

                entity.Property(e => e.TransactionMode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.VehicleType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTrafficLight>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvTraff__321507873C128818");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kduspecification)
                    .IsRequired()
                    .HasColumnName("KDUSpecification")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofBulb)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofController)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofInductionLoop)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPole)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTrafficLightDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTrafficLightDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationDate).HasColumnType("datetime");

                entity.Property(e => e.Kduspecification)
                    .IsRequired()
                    .HasColumnName("KDUSpecification")
                    .HasMaxLength(50);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TollPlazaName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TypeofBulb)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofController)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofInductionLoop)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeofPole)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTunnel>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Crossing)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortalDescriptionEnd)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortalDescriptionInternal)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TunnelType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvTunnelConstruction>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ChainageEndKm)
                    .IsRequired()
                    .HasColumnName("ChainageEndKM")
                    .HasMaxLength(250);

                entity.Property(e => e.ChainageStartKm)
                    .IsRequired()
                    .HasColumnName("ChainageStartKM")
                    .HasMaxLength(250);

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractStatus)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PackageNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvTunnelConsultant>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ConsultantNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Hqbranch)
                    .IsRequired()
                    .HasColumnName("HQBranch")
                    .HasMaxLength(150);

                entity.Property(e => e.InvTunnelConstructionPk).HasColumnName("InvTunnelConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvTunnelContractor>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CableTelexNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvTunnelConstructionPk).HasColumnName("InvTunnelConstructionPK");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.VendorNumber)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<InvTunnelDesign>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DesignDate).HasColumnType("datetime");

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PreparedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvTunnelDesignAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvTunnelDesignPk, e.RecordIndex });

                entity.Property(e => e.InvTunnelDesignPk).HasColumnName("InvTunnelDesignPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvTunnelDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTunnelDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Crossing)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PortalDescriptionEnd)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PortalDescriptionInternal)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TunnelType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTunnelDrawing>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Client)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DrawingDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.DrawingType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvTunnelConstructionPk).HasColumnName("InvTunnelConstructionPK");

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvTunnelDrawingAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvTunnelDrawingPk, e.RecordIndex });

                entity.Property(e => e.InvTunnelDrawingPk).HasColumnName("InvTunnelDrawingPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvTunnelJoint>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FinishTreatment)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.JointType)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvTunnelJointDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTunnelJointDetail");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishTreatment)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.JointType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvTunnelPanel>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<InvTunnelPanelDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTunnelPanelDetail");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvTunnelSpecialInvestigation>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FillingLocation)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FillingReference)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.InvestigationDate).HasColumnType("datetime");

                entity.Property(e => e.InvestigationType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PreparedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.ReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ReportSummary)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InvTunnelSpecialInvestigationAttachment>(entity =>
            {
                entity.HasKey(e => new { e.InvTunnelSpecialInvestigationPk, e.RecordIndex });

                entity.Property(e => e.InvTunnelSpecialInvestigationPk).HasColumnName("InvTunnelSpecialInvestigationPK");

                entity.Property(e => e.AttachmentFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<InvTunnelTechnical>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1-Jan-2018')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Crossing)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortalDescriptionEnd)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortalDescriptionInternal)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TunnelType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InvTunnelTechnicalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTunnelTechnicalDetail");

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Crossing)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OriginalPk).HasColumnName("OriginalPK");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PortalDescriptionEnd)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PortalDescriptionInternal)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TunnelType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvTunnelTechnicalUtility>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvTunnelTechnicalPk).HasColumnName("InvTunnelTechnicalPK");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UtilityName)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvTunnelUtility>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvTunnelPk).HasColumnName("InvTunnelPK");

                entity.Property(e => e.TempId).HasColumnName("TempID");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UtilityName)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<InvTunnelView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvTunnelView");

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetKmlocation).HasColumnName("AssetKMLocation");

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BaseDate).HasColumnType("datetime");

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CarriagewayLayout)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Crossing)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GeneralStructureType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.MaintainedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PiScheduleMasterPk).HasColumnName("PiScheduleMasterPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PortalDescriptionEnd)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PortalDescriptionInternal)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SourceInfo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TunnelType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YearOpen)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvWireRope>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK__InvWireR__32150787A19D9152");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeflectionPost)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeflectionPostCap).HasMaxLength(50);

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DoubleTreadedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmbeddedDepth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalClearance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LhsorRhstreadedTerminal)
                    .IsRequired()
                    .HasColumnName("LHSorRHSTreadedTerminal")
                    .HasMaxLength(50);

                entity.Property(e => e.LinePostDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReflectiveSticker)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RiggingScrew)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Shackle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TensioningSystem)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlaza)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InvWireRopeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvWireRopeDetail");

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DeflectionPost)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeflectionPostCap).HasMaxLength(50);

                entity.Property(e => e.DelineatorStripReflectivity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DoubleTreadedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmbeddedDepth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureOwner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.HorizontalClearance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Kmlocation).HasColumnName("KMLocation");

                entity.Property(e => e.LhsorRhstreadedTerminal)
                    .IsRequired()
                    .HasColumnName("LHSorRHSTreadedTerminal")
                    .HasMaxLength(50);

                entity.Property(e => e.LinePostDimension)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LocalityOfFeatureName).HasMaxLength(50);

                entity.Property(e => e.LofCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Mhaoffice)
                    .HasColumnName("MHAOffice")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("RampID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReflectiveSticker)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionKmfrom).HasColumnName("RegionKMFrom");

                entity.Property(e => e.RegionKmto).HasColumnName("RegionKMTo");

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).IsRequired();

                entity.Property(e => e.RiggingScrew)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shackle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.TemanId)
                    .IsRequired()
                    .HasColumnName("TemanID")
                    .HasMaxLength(250);

                entity.Property(e => e.TensioningSystem)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TollPlaza)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<KpiBucketSizeParam>(entity =>
            {
                entity.HasKey(e => new { e.PbContractMonthPk, e.RegionPk });

                entity.Property(e => e.PbContractMonthPk).HasColumnName("PbContractMonthPK");

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.HasOne(d => d.PbContractMonthPkNavigation)
                    .WithMany(p => p.KpiBucketSizeParam)
                    .HasForeignKey(d => d.PbContractMonthPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiBucketSizeParam_PcContractMonth");

                entity.HasOne(d => d.RegionPkNavigation)
                    .WithMany(p => p.KpiBucketSizeParam)
                    .HasForeignKey(d => d.RegionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiBucketSizeParam_Region");
            });

            modelBuilder.Entity<KpiGeneralParam>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Etc)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.PbContractMonthPk)
                    .HasColumnName("PbContractMonthPK")
                    .HasComment("null = latest");
            });

            modelBuilder.Entity<KpiGroupL1>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<KpiGroupL2>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL1pk).HasColumnName("KpiGroupL1PK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.KpiGroupL1pkNavigation)
                    .WithMany(p => p.KpiGroupL2)
                    .HasForeignKey(d => d.KpiGroupL1pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiGroupL2_KpiGroupL1");
            });

            modelBuilder.Entity<KpiGroupL3>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL2pk).HasColumnName("KpiGroupL2PK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.KpiGroupL2pkNavigation)
                    .WithMany(p => p.KpiGroupL3)
                    .HasForeignKey(d => d.KpiGroupL2pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiGroupL3_KpiGroupL2");
            });

            modelBuilder.Entity<KpiItem>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.KpiGroupL3pk).HasColumnName("KpiGroupL3PK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.KpiGroupL3pkNavigation)
                    .WithMany(p => p.KpiItem)
                    .HasForeignKey(d => d.KpiGroupL3pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiItem_KpiGroupL3");
            });

            modelBuilder.Entity<KpiItemAuditCondition>(entity =>
            {
                entity.HasKey(e => new { e.KpiItemPk, e.RoadClass });

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.RoadClass)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag. chk biz rules");

                entity.Property(e => e.Condition).HasMaxLength(2000);

                entity.HasOne(d => d.KpiItemPkNavigation)
                    .WithMany(p => p.KpiItemAuditCondition)
                    .HasForeignKey(d => d.KpiItemPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KpiItemAuditCondition_KpiItem");
            });

            modelBuilder.Entity<KpiPavementParam>(entity =>
            {
                entity.HasKey(e => e.Year);

                entity.Property(e => e.Year).ValueGeneratedNever();

                entity.Property(e => e.Pdpm1aIri).HasColumnName("PDPM1a_IRI");

                entity.Property(e => e.Pdpm1aPercent).HasColumnName("PDPM1a_Percent");

                entity.Property(e => e.Pdpm1bIri).HasColumnName("PDPM1b_IRI");

                entity.Property(e => e.Pdpm1bPercent).HasColumnName("PDPM1b_Percent");

                entity.Property(e => e.Pdpm2aPercent).HasColumnName("PDPM2a_Percent");

                entity.Property(e => e.Pdpm2aRut).HasColumnName("PDPM2a_RUT");

                entity.Property(e => e.Pdpm2bPercent).HasColumnName("PDPM2b_Percent");

                entity.Property(e => e.Pdpm2bRut).HasColumnName("PDPM2b_RUT");

                entity.Property(e => e.Pdpm3Mtd).HasColumnName("PDPM3_MTD");

                entity.Property(e => e.Pdpm3Percent).HasColumnName("PDPM3_Percent");

                entity.Property(e => e.Pdpm4Pci).HasColumnName("PDPM4_PCI");

                entity.Property(e => e.Pdpm4Percent).HasColumnName("PDPM4_Percent");

                entity.Property(e => e.Pdpm5aFwdCentralDef).HasColumnName("PDPM5a_FWD_Central_Def");

                entity.Property(e => e.Pdpm5aPercent).HasColumnName("PDPM5a_Percent");

                entity.Property(e => e.Pdpm5bDefDifference).HasColumnName("PDPM5b_DefDifference");

                entity.Property(e => e.Pdpm5bPercent).HasColumnName("PDPM5b_Percent");

                entity.Property(e => e.Pdpm6Percent).HasColumnName("PDPM6_Percent");

                entity.Property(e => e.Pdpm6ResidualLife).HasColumnName("PDPM6_ResidualLife");

                entity.Property(e => e.Pdpm7Percent).HasColumnName("PDPM7_Percent");

                entity.Property(e => e.Pdpm7Scrim).HasColumnName("PDPM7_SCRIM");
            });

            modelBuilder.Entity<McsActivity>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsCategoryPk).HasColumnName("McsCategoryPK");

                entity.Property(e => e.McsGroupPk).HasColumnName("McsGroupPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TeamType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfArea)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsActivityBacklog>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsCategoryBacklogPk).HasColumnName("McsCategoryBacklogPK");

                entity.Property(e => e.McsGroupBacklogPk).HasColumnName("McsGroupBacklogPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TeamType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfArea)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsActivityBacklogDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsActivityBacklogDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsCategoryBacklogCode).HasMaxLength(50);

                entity.Property(e => e.McsCategoryBacklogName).HasMaxLength(255);

                entity.Property(e => e.McsCategoryBacklogPk).HasColumnName("McsCategoryBacklogPK");

                entity.Property(e => e.McsGroupBacklogCode).HasMaxLength(50);

                entity.Property(e => e.McsGroupBacklogName).HasMaxLength(255);

                entity.Property(e => e.McsGroupBacklogPk).HasColumnName("McsGroupBacklogPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.TeamType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfArea)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsActivityDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsActivityDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsCategoryCode).HasMaxLength(50);

                entity.Property(e => e.McsCategoryName).HasMaxLength(255);

                entity.Property(e => e.McsCategoryPk).HasColumnName("McsCategoryPK");

                entity.Property(e => e.McsGroupCode).HasMaxLength(50);

                entity.Property(e => e.McsGroupName).HasMaxLength(255);

                entity.Property(e => e.McsGroupPk).HasColumnName("McsGroupPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.TeamType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfArea)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsActivityScorecard>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_McsActivityScoreCard");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityPk).HasColumnName("McsActivityPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<McsActivityScorecardAttachment>(entity =>
            {
                entity.HasKey(e => new { e.McsActivityScorecardPk, e.RecordIndex });

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<McsActivityScorecardBacklog>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_McsActivityScoreCardBacklog");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityBacklogPk).HasColumnName("McsActivityBacklogPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<McsActivityScorecardBacklogAfterPhoto>(entity =>
            {
                entity.HasKey(e => new { e.McsActivityScorecardBacklogPk, e.RecordIndex });

                entity.Property(e => e.McsActivityScorecardBacklogPk).HasColumnName("McsActivityScorecardBacklogPK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<McsActivityScorecardBacklogAttachment>(entity =>
            {
                entity.HasKey(e => new { e.McsActivityScorecardBacklogPk, e.RecordIndex });

                entity.Property(e => e.McsActivityScorecardBacklogPk).HasColumnName("McsActivityScorecardBacklogPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<McsActivityScorecardBacklogBeforePhoto>(entity =>
            {
                entity.HasKey(e => new { e.McsActivityScorecardBacklogPk, e.RecordIndex });

                entity.Property(e => e.McsActivityScorecardBacklogPk).HasColumnName("McsActivityScorecardBacklogPK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<McsActivityScorecardBacklogDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsActivityScorecardBacklogDetail");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCode).HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityBacklogCode).HasMaxLength(50);

                entity.Property(e => e.McsActivityBacklogName).HasMaxLength(255);

                entity.Property(e => e.McsActivityBacklogPk).HasColumnName("McsActivityBacklogPK");

                entity.Property(e => e.McsCategoryBacklogCode).HasMaxLength(50);

                entity.Property(e => e.McsCategoryBacklogName).HasMaxLength(255);

                entity.Property(e => e.McsCategoryBacklogPk).HasColumnName("McsCategoryBacklogPK");

                entity.Property(e => e.McsGroupBacklogCode).HasMaxLength(50);

                entity.Property(e => e.McsGroupBacklogName).HasMaxLength(255);

                entity.Property(e => e.McsGroupBacklogPk).HasColumnName("McsGroupBacklogPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<McsActivityScorecardBacklogLostTime>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_McsActivityBacklogLostTime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.LostTime)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.McsActivityScorecardBacklogPk).HasColumnName("McsActivityScorecardBacklogPK");
            });

            modelBuilder.Entity<McsActivityScorecardDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsActivityScorecardDetail");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCode).HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityCode).HasMaxLength(50);

                entity.Property(e => e.McsActivityName).HasMaxLength(255);

                entity.Property(e => e.McsActivityPk).HasColumnName("McsActivityPK");

                entity.Property(e => e.McsCalendarWeekJanStartDate).HasColumnType("datetime");

                entity.Property(e => e.McsCategoryCode).HasMaxLength(50);

                entity.Property(e => e.McsCategoryName).HasMaxLength(255);

                entity.Property(e => e.McsCategoryPk).HasColumnName("McsCategoryPK");

                entity.Property(e => e.McsGroupCode).HasMaxLength(50);

                entity.Property(e => e.McsGroupName).HasMaxLength(255);

                entity.Property(e => e.McsGroupPk).HasColumnName("McsGroupPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SicConfirmedByCompany).HasMaxLength(50);

                entity.Property(e => e.SicConfirmedByName).HasMaxLength(50);

                entity.Property(e => e.SicConfirmedByPosition).HasMaxLength(50);

                entity.Property(e => e.SicConfirmedBySignature).HasMaxLength(200);

                entity.Property(e => e.SicEditEndDt).HasColumnType("datetime");

                entity.Property(e => e.SicEditStartDt).HasColumnType("datetime");

                entity.Property(e => e.SicFormType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SicInspectedByCompany).HasMaxLength(50);

                entity.Property(e => e.SicInspectedByName).HasMaxLength(50);

                entity.Property(e => e.SicInspectedByPosition).HasMaxLength(50);

                entity.Property(e => e.SicInspectedBySignature).HasMaxLength(200);

                entity.Property(e => e.SicLastCalculatedBy).HasMaxLength(50);

                entity.Property(e => e.SicLastCalculatedDt).HasColumnType("datetime");

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.Property(e => e.SicShift)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SicStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SicUploadedBy).HasMaxLength(50);

                entity.Property(e => e.SicUploadedDt).HasColumnType("datetime");

                entity.Property(e => e.SicVehicleRemark).HasMaxLength(500);

                entity.Property(e => e.SicVehicleWorking).HasMaxLength(200);
            });

            modelBuilder.Entity<McsActivityScorecardLostTime>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_McsActivityLostTime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.LostTime)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");
            });

            modelBuilder.Entity<McsActivityScorecardLostTimeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsActivityScorecardLostTimeView");

                entity.Property(e => e.LostTime)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LostTimeName).HasMaxLength(50);

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");

                entity.Property(e => e.Pk).HasColumnName("PK");
            });

            modelBuilder.Entity<McsActivitySection>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.McsActivityPk).HasColumnName("McsActivityPK");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<McsCalendarWeek>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_CalendarWeek");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<McsCategory>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SicFormNumber).HasMaxLength(50);

                entity.Property(e => e.SicFormType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<McsCategoryBacklog>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<McsGroup>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<McsGroupBacklog>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<McsMeeActivity>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsMeeTypePk).HasColumnName("McsMeeTypePK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsMeeActivityDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsMeeActivityDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.McsMeeTypeCode).HasMaxLength(50);

                entity.Property(e => e.McsMeeTypeName).HasMaxLength(255);

                entity.Property(e => e.McsMeeTypePk).HasColumnName("McsMeeTypePK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<McsMeeActivityScorecard>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndTime).HasColumnType("datetime");

                entity.Property(e => e.ActualStartTime).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsMeeActivityPk).HasColumnName("McsMeeActivityPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TeamPk).HasColumnName("TeamPK");
            });

            modelBuilder.Entity<McsMeeActivityScorecardAttachment>(entity =>
            {
                entity.HasKey(e => new { e.McsMeeActivityScorecardPk, e.RecordIndex });

                entity.Property(e => e.McsMeeActivityScorecardPk).HasColumnName("McsMeeActivityScorecardPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<McsMeeActivityScorecardDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("McsMeeActivityScorecardDetail");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndTime).HasColumnType("datetime");

                entity.Property(e => e.ActualStartTime).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCode).HasMaxLength(150);

                entity.Property(e => e.ContractorCompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsCalendarWeekJanStartDate).HasColumnType("datetime");

                entity.Property(e => e.McsMeeActivityCode).HasMaxLength(50);

                entity.Property(e => e.McsMeeActivityName).HasMaxLength(255);

                entity.Property(e => e.McsMeeActivityPk).HasColumnName("McsMeeActivityPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TeamCode).HasMaxLength(50);

                entity.Property(e => e.TeamName).HasMaxLength(255);

                entity.Property(e => e.TeamPk).HasColumnName("TeamPK");
            });

            modelBuilder.Entity<McsMeeActivityScorecardLostTime>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_McsMeeScorecardLostTime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.LostTime)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.McsMeeActivityScorecardPk).HasColumnName("McsMeeActivityScorecardPK");
            });

            modelBuilder.Entity<McsMeeType>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Nod>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_NotificationOfDefect");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AlogAgram).HasColumnName("ALogAGRAM");

                entity.Property(e => e.AlogCategory)
                    .HasColumnName("ALogCategory")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag: M or C");

                entity.Property(e => e.AlogCloseDate)
                    .HasColumnName("ALogCloseDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AlogDescription).HasColumnName("ALogDescription");

                entity.Property(e => e.AlogDueDate)
                    .HasColumnName("ALogDueDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AlogErrRef)
                    .HasColumnName("ALogErrRef")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogId)
                    .HasColumnName("ALogID")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogIsClaimable).HasColumnName("ALogIsClaimable");

                entity.Property(e => e.AlogNcrNumber)
                    .HasColumnName("ALogNcrNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogOwner)
                    .HasColumnName("ALogOwner")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogReference)
                    .HasColumnName("ALogReference")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogSubject)
                    .HasColumnName("ALogSubject")
                    .HasMaxLength(100);

                entity.Property(e => e.AlogWorkType)
                    .HasColumnName("ALogWorkType")
                    .HasMaxLength(50);

                entity.Property(e => e.AttendedBy).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("AssAtt: NODC");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefectRating)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag:  A,B,C,D");

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.IssuedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation)
                    .HasColumnName("KMLocation")
                    .HasMaxLength(200);

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.Lane)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NotificationDateTimeToMha)
                    .HasColumnName("NotificationDateTimeToMHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.NotificationToEmployerDateTime).HasColumnType("datetime");

                entity.Property(e => e.RectificationWorksCommencementDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SafetyMeasuresInPlaceDateTime).HasColumnType("datetime");

                entity.Property(e => e.SentDateToTechnical).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TargetDesignCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.TreatmentPlanSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.UploadedBy).HasMaxLength(255);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NodAttachment>(entity =>
            {
                entity.HasKey(e => new { e.NodPk, e.RecordIndex });

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<NodConversion>(entity =>
            {
                entity.HasKey(e => new { e.NodPk, e.SourcePk });

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.SourcePk).HasColumnName("SourcePK");
            });

            modelBuilder.Entity<NodDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NodDetail");

                entity.Property(e => e.AlogAgram).HasColumnName("ALogAGRAM");

                entity.Property(e => e.AlogCategory)
                    .HasColumnName("ALogCategory")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AlogCloseDate)
                    .HasColumnName("ALogCloseDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AlogDescription).HasColumnName("ALogDescription");

                entity.Property(e => e.AlogDueDate)
                    .HasColumnName("ALogDueDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AlogErrRef)
                    .HasColumnName("ALogErrRef")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogId)
                    .HasColumnName("ALogID")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogIsClaimable).HasColumnName("ALogIsClaimable");

                entity.Property(e => e.AlogNcrNumber)
                    .HasColumnName("ALogNcrNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogOwner)
                    .HasColumnName("ALogOwner")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogReference)
                    .HasColumnName("ALogReference")
                    .HasMaxLength(50);

                entity.Property(e => e.AlogSubject)
                    .HasColumnName("ALogSubject")
                    .HasMaxLength(100);

                entity.Property(e => e.AlogWorkType)
                    .HasColumnName("ALogWorkType")
                    .HasMaxLength(50);

                entity.Property(e => e.AttendedBy).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefectRating)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeatureBound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructureDetailMainComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailMainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailMainGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailMainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailSubComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailSubGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.IssuedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Kmlocation)
                    .HasColumnName("KMLocation")
                    .HasMaxLength(200);

                entity.Property(e => e.KpiItemPk).HasColumnName("KpiItemPK");

                entity.Property(e => e.Lane)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LaneName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NotificationDateTimeToMha)
                    .HasColumnName("NotificationDateTimeToMHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.NotificationToEmployerDateTime).HasColumnType("datetime");

                entity.Property(e => e.PitTaskId)
                    .HasColumnName("PitTaskID")
                    .HasMaxLength(50);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RectificationWorksCommencementDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SafetyMeasuresInPlaceDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SentDateToTechnical).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TargetDesignCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.TreatmentPlanSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.UploadedBy).HasMaxLength(255);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NodPhoto>(entity =>
            {
                entity.HasKey(e => new { e.NodPk, e.RecordIndex })
                    .HasName("PK_NodPhoto_1");

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(1000);

                entity.HasOne(d => d.NodPkNavigation)
                    .WithMany(p => p.NodPhoto)
                    .HasForeignKey(d => d.NodPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NodPhoto_Nod");
            });

            modelBuilder.Entity<Part>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Sordescription)
                    .IsRequired()
                    .HasColumnName("SORDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Sorid)
                    .IsRequired()
                    .HasColumnName("SORID")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<PasswordHistory>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CommenceDate).HasColumnType("datetime");

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserPk).HasColumnName("UserPK");
            });

            modelBuilder.Entity<PavementCondition>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ci).HasColumnName("CI");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DTimssectionId)
                    .HasColumnName("dTIMSSectionID")
                    .HasMaxLength(50);

                entity.Property(e => e.Es).HasColumnName("ES");

                entity.Property(e => e.FwdcentralDef).HasColumnName("FWDCentralDef");

                entity.Property(e => e.FwdtestPoint).HasColumnName("FWDTestPoint");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Iri).HasColumnName("IRI");

                entity.Property(e => e.IristdDev).HasColumnName("IRIStdDev");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.LatitudeFwd).HasColumnName("LatitudeFWD");

                entity.Property(e => e.LongitudeFwd).HasColumnName("LongitudeFWD");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Mtd).HasColumnName("MTD");

                entity.Property(e => e.MtdstdDev).HasColumnName("MTDStdDev");

                entity.Property(e => e.Pci).HasColumnName("PCI");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Ri).HasColumnName("RI");

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rut).HasColumnName("RUT");

                entity.Property(e => e.RutstdDev).HasColumnName("RUTStdDev");

                entity.Property(e => e.Scrim).HasColumnName("SCRIM");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.ShoulderType1).HasMaxLength(50);

                entity.Property(e => e.SurveyDateFwd)
                    .HasColumnName("SurveyDateFWD")
                    .HasColumnType("datetime");

                entity.Property(e => e.SurveyDateGtester)
                    .HasColumnName("SurveyDateGTester")
                    .HasColumnType("datetime");

                entity.Property(e => e.SurveyDateMlp)
                    .HasColumnName("SurveyDateMLP")
                    .HasColumnType("datetime");

                entity.Property(e => e.TeamsrecordId)
                    .HasColumnName("TEAMSRecordID")
                    .HasMaxLength(50);

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.PavementCondition)
                    .HasForeignKey(d => d.SectionPk)
                    .HasConstraintName("FK_PavementCondition_Section");
            });

            modelBuilder.Entity<PavementConditionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PavementConditionDetail");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ci).HasColumnName("CI");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DTimssectionId)
                    .HasColumnName("dTIMSSectionID")
                    .HasMaxLength(50);

                entity.Property(e => e.Es).HasColumnName("ES");

                entity.Property(e => e.FwdcentralDef).HasColumnName("FWDCentralDef");

                entity.Property(e => e.FwdtestPoint).HasColumnName("FWDTestPoint");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Iri).HasColumnName("IRI");

                entity.Property(e => e.IristdDev).HasColumnName("IRIStdDev");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.LatitudeFwd).HasColumnName("LatitudeFWD");

                entity.Property(e => e.LongitudeFwd).HasColumnName("LongitudeFWD");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Mtd).HasColumnName("MTD");

                entity.Property(e => e.MtdstdDev).HasColumnName("MTDStdDev");

                entity.Property(e => e.Pci).HasColumnName("PCI");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Ri).HasColumnName("RI");

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rut).HasColumnName("RUT");

                entity.Property(e => e.RutstdDev).HasColumnName("RUTStdDev");

                entity.Property(e => e.Scrim).HasColumnName("SCRIM");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.ShoulderType1).HasMaxLength(50);

                entity.Property(e => e.SurveyDateFwd)
                    .HasColumnName("SurveyDateFWD")
                    .HasColumnType("datetime");

                entity.Property(e => e.SurveyDateGtester)
                    .HasColumnName("SurveyDateGTester")
                    .HasColumnType("datetime");

                entity.Property(e => e.SurveyDateMlp)
                    .HasColumnName("SurveyDateMLP")
                    .HasColumnType("datetime");

                entity.Property(e => e.TeamsrecordId)
                    .HasColumnName("TEAMSRecordID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PavementLongTermRollingProgram>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetPk).HasColumnName("AssetPK");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.TreatmentActual).HasMaxLength(50);

                entity.Property(e => e.TreatmentScheduled).HasMaxLength(50);
            });

            modelBuilder.Entity<PavementLongTermRollingProgramDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PavementLongTermRollingProgramDetail");

                entity.Property(e => e.AssetId)
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetPk).HasColumnName("AssetPK");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.RegionName).HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TreatmentActual).HasMaxLength(50);

                entity.Property(e => e.TreatmentScheduled).HasMaxLength(50);
            });

            modelBuilder.Entity<PavementRating>(entity =>
            {
                entity.HasKey(e => e.Year);

                entity.Property(e => e.Year).ValueGeneratedNever();

                entity.Property(e => e.IriBad).HasColumnName("IRI_Bad");

                entity.Property(e => e.IriFair).HasColumnName("IRI_Fair");

                entity.Property(e => e.IriGood).HasColumnName("IRI_Good");

                entity.Property(e => e.IriPoor).HasColumnName("IRI_Poor");

                entity.Property(e => e.MtdFair).HasColumnName("MTD_Fair");

                entity.Property(e => e.MtdGood).HasColumnName("MTD_Good");

                entity.Property(e => e.MtdPoor).HasColumnName("MTD_Poor");

                entity.Property(e => e.PciFair).HasColumnName("PCI_Fair");

                entity.Property(e => e.PciGood).HasColumnName("PCI_Good");

                entity.Property(e => e.PciPoor).HasColumnName("PCI_Poor");

                entity.Property(e => e.RutBad).HasColumnName("RUT_Bad");

                entity.Property(e => e.RutFair).HasColumnName("RUT_Fair");

                entity.Property(e => e.RutGood).HasColumnName("RUT_Good");

                entity.Property(e => e.RutPoor).HasColumnName("RUT_Poor");
            });

            modelBuilder.Entity<PbContract>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ContractEndDate).HasColumnType("datetime");

                entity.Property(e => e.ContractSignDate).HasColumnType("datetime");

                entity.Property(e => e.ContractStartDate).HasColumnType("datetime");

                entity.Property(e => e.Etc)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PbContractMonth>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PcContractMonth");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Etc)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.PbContractYearPk).HasColumnName("PbContractYearPK");

                entity.HasOne(d => d.PbContractYearPkNavigation)
                    .WithMany(p => p.PbContractMonth)
                    .HasForeignKey(d => d.PbContractYearPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PcContractMonth_PbContractYear");
            });

            modelBuilder.Entity<PbContractYear>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Etc)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.PbContractPk).HasColumnName("PbContractPK");

                entity.HasOne(d => d.PbContractPkNavigation)
                    .WithMany(p => p.PbContractYear)
                    .HasForeignKey(d => d.PbContractPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PbContractYear_PbContract");
            });

            modelBuilder.Entity<PiBridgeExportDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PI_BridgeExportDetail");

                entity.Property(e => e.AbutmentOtherRemarks).HasColumnName("Abutment_OtherRemarks");

                entity.Property(e => e.AbutmentPavementCondition)
                    .HasColumnName("Abutment_PavementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.AbutmentPavementExtend)
                    .HasColumnName("Abutment_PavementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRating)
                    .HasColumnName("Abutment_PavementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRemarks).HasColumnName("Abutment_PavementRemarks");

                entity.Property(e => e.AbutmentPavementSeverity)
                    .HasColumnName("Abutment_PavementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.AssetBaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.BearingAlignmentCondition)
                    .HasColumnName("Bearing_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingAlignmentExtend)
                    .HasColumnName("Bearing_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRating)
                    .HasColumnName("Bearing_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRemarks).HasColumnName("Bearing_AlignmentRemarks");

                entity.Property(e => e.BearingAlignmentSeverity)
                    .HasColumnName("Bearing_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackCondition)
                    .HasColumnName("Bearing_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingCrackExtend)
                    .HasColumnName("Bearing_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRating)
                    .HasColumnName("Bearing_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRemarks).HasColumnName("Bearing_CrackRemarks");

                entity.Property(e => e.BearingCrackSeverity)
                    .HasColumnName("Bearing_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformCondition)
                    .HasColumnName("Bearing_DeformCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingDeformExtend)
                    .HasColumnName("Bearing_DeformExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRating)
                    .HasColumnName("Bearing_DeformRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRemarks).HasColumnName("Bearing_DeformRemarks");

                entity.Property(e => e.BearingDeformSeverity)
                    .HasColumnName("Bearing_DeformSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingOtherRemarks).HasColumnName("Bearing_OtherRemarks");

                entity.Property(e => e.BearingSpallingCondition)
                    .HasColumnName("Bearing_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSpallingExtend)
                    .HasColumnName("Bearing_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRating)
                    .HasColumnName("Bearing_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRemarks).HasColumnName("Bearing_SpallingRemarks");

                entity.Property(e => e.BearingSpallingSeverity)
                    .HasColumnName("Bearing_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceCondition)
                    .HasColumnName("Bearing_SurfaceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSurfaceExtend)
                    .HasColumnName("Bearing_SurfaceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRating)
                    .HasColumnName("Bearing_SurfaceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRemarks).HasColumnName("Bearing_SurfaceRemarks");

                entity.Property(e => e.BearingSurfaceSeverity)
                    .HasColumnName("Bearing_SurfaceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageCondition)
                    .HasColumnName("Channel_BlockageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ChannelBlockageExtend)
                    .HasColumnName("Channel_BlockageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRating)
                    .HasColumnName("Channel_BlockageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRemarks).HasColumnName("Channel_BlockageRemarks");

                entity.Property(e => e.ChannelBlockageSeverity)
                    .HasColumnName("Channel_BlockageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelOtherRemarks).HasColumnName("Channel_OtherRemarks");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DeckDrainageOtherRemarks).HasColumnName("DeckDrainage_OtherRemarks");

                entity.Property(e => e.DeckDrainageServiceCondition)
                    .HasColumnName("DeckDrainage_ServiceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageServiceExtend)
                    .HasColumnName("DeckDrainage_ServiceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRating)
                    .HasColumnName("DeckDrainage_ServiceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRemarks).HasColumnName("DeckDrainage_ServiceRemarks");

                entity.Property(e => e.DeckDrainageServiceSeverity)
                    .HasColumnName("DeckDrainage_ServiceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureCondition)
                    .HasColumnName("DeckDrainage_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageStructureExtend)
                    .HasColumnName("DeckDrainage_StructureExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRating)
                    .HasColumnName("DeckDrainage_StructureRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRemarks).HasColumnName("DeckDrainage_StructureRemarks");

                entity.Property(e => e.DeckDrainageStructureSeverity)
                    .HasColumnName("DeckDrainage_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionCondition)
                    .HasColumnName("DeckEdge_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCorrosionExtend)
                    .HasColumnName("DeckEdge_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRating)
                    .HasColumnName("DeckEdge_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRemarks).HasColumnName("DeckEdge_CorrosionRemarks");

                entity.Property(e => e.DeckEdgeCorrosionSeverity)
                    .HasColumnName("DeckEdge_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingCondition)
                    .HasColumnName("DeckEdge_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCrackingExtend)
                    .HasColumnName("DeckEdge_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRating)
                    .HasColumnName("DeckEdge_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRemarks).HasColumnName("DeckEdge_CrackingRemarks");

                entity.Property(e => e.DeckEdgeCrackingSeverity)
                    .HasColumnName("DeckEdge_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageCondition)
                    .HasColumnName("DeckEdge_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeLeakageExtend)
                    .HasColumnName("DeckEdge_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRating)
                    .HasColumnName("DeckEdge_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRemarks).HasColumnName("DeckEdge_LeakageRemarks");

                entity.Property(e => e.DeckEdgeLeakageSeverity)
                    .HasColumnName("DeckEdge_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeOtherRemarks).HasColumnName("DeckEdge_OtherRemarks");

                entity.Property(e => e.DeckEdgeSpallingCondition)
                    .HasColumnName("DeckEdge_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeSpallingExtend)
                    .HasColumnName("DeckEdge_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRating)
                    .HasColumnName("DeckEdge_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRemarks).HasColumnName("DeckEdge_SpallingRemarks");

                entity.Property(e => e.DeckEdgeSpallingSeverity)
                    .HasColumnName("DeckEdge_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainCondition)
                    .HasColumnName("DeckEdge_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeStainExtend)
                    .HasColumnName("DeckEdge_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRating)
                    .HasColumnName("DeckEdge_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRemarks).HasColumnName("DeckEdge_StainRemarks");

                entity.Property(e => e.DeckEdgeStainSeverity)
                    .HasColumnName("DeckEdge_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalCondition)
                    .HasColumnName("DeckTop_HorizontalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopHorizontalExtend)
                    .HasColumnName("DeckTop_HorizontalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRating)
                    .HasColumnName("DeckTop_HorizontalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRemarks).HasColumnName("DeckTop_HorizontalRemarks");

                entity.Property(e => e.DeckTopHorizontalSeverity)
                    .HasColumnName("DeckTop_HorizontalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopOtherRemarks).HasColumnName("DeckTop_OtherRemarks");

                entity.Property(e => e.DeckTopVerticalCondition)
                    .HasColumnName("DeckTop_VerticalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopVerticalExtend)
                    .HasColumnName("DeckTop_VerticalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRating)
                    .HasColumnName("DeckTop_VerticalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRemarks).HasColumnName("DeckTop_VerticalRemarks");

                entity.Property(e => e.DeckTopVerticalSeverity)
                    .HasColumnName("DeckTop_VerticalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionCondition)
                    .HasColumnName("Diaphragm_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCorrosionExtend)
                    .HasColumnName("Diaphragm_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRating)
                    .HasColumnName("Diaphragm_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRemarks).HasColumnName("Diaphragm_CorrosionRemarks");

                entity.Property(e => e.DiaphragmCorrosionSeverity)
                    .HasColumnName("Diaphragm_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingCondition)
                    .HasColumnName("Diaphragm_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCrackingExtend)
                    .HasColumnName("Diaphragm_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRating)
                    .HasColumnName("Diaphragm_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRemarks).HasColumnName("Diaphragm_CrackingRemarks");

                entity.Property(e => e.DiaphragmCrackingSeverity)
                    .HasColumnName("Diaphragm_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseCondition)
                    .HasColumnName("Diaphragm_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmNoiseExtend)
                    .HasColumnName("Diaphragm_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRating)
                    .HasColumnName("Diaphragm_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRemarks).HasColumnName("Diaphragm_NoiseRemarks");

                entity.Property(e => e.DiaphragmNoiseSeverity)
                    .HasColumnName("Diaphragm_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmOtherRemarks).HasColumnName("Diaphragm_OtherRemarks");

                entity.Property(e => e.DiaphragmSpallingCondition)
                    .HasColumnName("Diaphragm_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmSpallingExtend)
                    .HasColumnName("Diaphragm_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRating)
                    .HasColumnName("Diaphragm_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRemarks).HasColumnName("Diaphragm_SpallingRemarks");

                entity.Property(e => e.DiaphragmSpallingSeverity)
                    .HasColumnName("Diaphragm_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FurnitureHeightCondition)
                    .HasColumnName("Furniture_HeightCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FurnitureHeightExtend)
                    .HasColumnName("Furniture_HeightExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRating)
                    .HasColumnName("Furniture_HeightRating")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRemarks).HasColumnName("Furniture_HeightRemarks");

                entity.Property(e => e.FurnitureHeightSeverity)
                    .HasColumnName("Furniture_HeightSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureOtherRemarks).HasColumnName("Furniture_OtherRemarks");

                entity.Property(e => e.FurtherInvestigationMajorDefect).HasColumnName("Further Investigation Major Defect");

                entity.Property(e => e.FurtherInvestigationRecommendedAction).HasColumnName("Further Investigation Recommended Action");

                entity.Property(e => e.GenInfoRating)
                    .HasColumnName("GenInfo_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoSpanNo).HasColumnName("GenInfo_SpanNo");

                entity.Property(e => e.GenInfoSummary).HasColumnName("GenInfo_Summary");

                entity.Property(e => e.GenInfoTraffic)
                    .HasColumnName("GenInfo_Traffic")
                    .HasMaxLength(10);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GirderCorrosionCondition)
                    .HasColumnName("Girder_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCorrosionExtend)
                    .HasColumnName("Girder_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRating)
                    .HasColumnName("Girder_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRemarks).HasColumnName("Girder_CorrosionRemarks");

                entity.Property(e => e.GirderCorrosionSeverity)
                    .HasColumnName("Girder_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingCondition)
                    .HasColumnName("Girder_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCrackingExtend)
                    .HasColumnName("Girder_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRating)
                    .HasColumnName("Girder_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRemarks).HasColumnName("Girder_CrackingRemarks");

                entity.Property(e => e.GirderCrackingSeverity)
                    .HasColumnName("Girder_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageCondition)
                    .HasColumnName("Girder_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderLeakageExtend)
                    .HasColumnName("Girder_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRating)
                    .HasColumnName("Girder_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRemarks).HasColumnName("Girder_LeakageRemarks");

                entity.Property(e => e.GirderLeakageSeverity)
                    .HasColumnName("Girder_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseCondition)
                    .HasColumnName("Girder_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderNoiseExtend)
                    .HasColumnName("Girder_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRating)
                    .HasColumnName("Girder_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRemarks).HasColumnName("Girder_NoiseRemarks");

                entity.Property(e => e.GirderNoiseSeverity)
                    .HasColumnName("Girder_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderOtherRemarks).HasColumnName("Girder_OtherRemarks");

                entity.Property(e => e.GirderSpallingCondition)
                    .HasColumnName("Girder_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderSpallingExtend)
                    .HasColumnName("Girder_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRating)
                    .HasColumnName("Girder_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRemarks).HasColumnName("Girder_SpallingRemarks");

                entity.Property(e => e.GirderSpallingSeverity)
                    .HasColumnName("Girder_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainCondition)
                    .HasColumnName("Girder_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderStainExtend)
                    .HasColumnName("Girder_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRating)
                    .HasColumnName("Girder_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRemarks).HasColumnName("Girder_StainRemarks");

                entity.Property(e => e.GirderStainSeverity)
                    .HasColumnName("Girder_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.JointAlignmentCondition)
                    .HasColumnName("Joint_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointAlignmentExtend)
                    .HasColumnName("Joint_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRating)
                    .HasColumnName("Joint_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRemarks).HasColumnName("Joint_AlignmentRemarks");

                entity.Property(e => e.JointAlignmentSeverity)
                    .HasColumnName("Joint_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksCondition)
                    .HasColumnName("Joint_CracksCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointCracksExtend)
                    .HasColumnName("Joint_CracksExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRating)
                    .HasColumnName("Joint_CracksRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRemarks).HasColumnName("Joint_CracksRemarks");

                entity.Property(e => e.JointCracksSeverity)
                    .HasColumnName("Joint_CracksSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityCondition)
                    .HasColumnName("Joint_FixityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointFixityExtend)
                    .HasColumnName("Joint_FixityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRating)
                    .HasColumnName("Joint_FixityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRemarks).HasColumnName("Joint_FixityRemarks");

                entity.Property(e => e.JointFixitySeverity)
                    .HasColumnName("Joint_FixitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageCondition)
                    .HasColumnName("Joint_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointLeakageExtend)
                    .HasColumnName("Joint_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRating)
                    .HasColumnName("Joint_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRemarks).HasColumnName("Joint_LeakageRemarks");

                entity.Property(e => e.JointLeakageSeverity)
                    .HasColumnName("Joint_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointOtherRemarks).HasColumnName("Joint_OtherRemarks");

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParapetCorrosionCondition)
                    .HasColumnName("Parapet_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCorrosionExtend)
                    .HasColumnName("Parapet_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRating)
                    .HasColumnName("Parapet_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRemarks).HasColumnName("Parapet_CorrosionRemarks");

                entity.Property(e => e.ParapetCorrosionSeverity)
                    .HasColumnName("Parapet_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingCondition)
                    .HasColumnName("Parapet_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCrackingExtend)
                    .HasColumnName("Parapet_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRating)
                    .HasColumnName("Parapet_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRemarks).HasColumnName("Parapet_CrackingRemarks");

                entity.Property(e => e.ParapetCrackingSeverity)
                    .HasColumnName("Parapet_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactCondition)
                    .HasColumnName("Parapet_ImpactCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetImpactExtend)
                    .HasColumnName("Parapet_ImpactExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRating)
                    .HasColumnName("Parapet_ImpactRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRemarks).HasColumnName("Parapet_ImpactRemarks");

                entity.Property(e => e.ParapetImpactSeverity)
                    .HasColumnName("Parapet_ImpactSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetOtherRemarks).HasColumnName("Parapet_OtherRemarks");

                entity.Property(e => e.ParapetSpallingCondition)
                    .HasColumnName("Parapet_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetSpallingExtend)
                    .HasColumnName("Parapet_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRating)
                    .HasColumnName("Parapet_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRemarks).HasColumnName("Parapet_SpallingRemarks");

                entity.Property(e => e.ParapetSpallingSeverity)
                    .HasColumnName("Parapet_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityCondition)
                    .HasColumnName("Parapet_StabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetStabilityExtend)
                    .HasColumnName("Parapet_StabilityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRating)
                    .HasColumnName("Parapet_StabilityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRemarks).HasColumnName("Parapet_StabilityRemarks");

                entity.Property(e => e.ParapetStabilitySeverity)
                    .HasColumnName("Parapet_StabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.PierCorrosionCondition)
                    .HasColumnName("Pier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCorrosionExtend)
                    .HasColumnName("Pier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRating)
                    .HasColumnName("Pier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRemarks).HasColumnName("Pier_CorrosionRemarks");

                entity.Property(e => e.PierCorrosionSeverity)
                    .HasColumnName("Pier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackCondition)
                    .HasColumnName("Pier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCrackExtend)
                    .HasColumnName("Pier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRating)
                    .HasColumnName("Pier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRemarks).HasColumnName("Pier_CrackRemarks");

                entity.Property(e => e.PierCrackSeverity)
                    .HasColumnName("Pier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeCondition)
                    .HasColumnName("Pier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDegradeExtend)
                    .HasColumnName("Pier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRating)
                    .HasColumnName("Pier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRemarks).HasColumnName("Pier_DegradeRemarks");

                entity.Property(e => e.PierDegradeSeverity)
                    .HasColumnName("Pier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementCondition)
                    .HasColumnName("Pier_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDisplacementExtend)
                    .HasColumnName("Pier_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRating)
                    .HasColumnName("Pier_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRemarks).HasColumnName("Pier_DisplacementRemarks");

                entity.Property(e => e.PierDisplacementSeverity)
                    .HasColumnName("Pier_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionCondition)
                    .HasColumnName("PierFd_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCorrosionExtend)
                    .HasColumnName("PierFd_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRating)
                    .HasColumnName("PierFd_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRemarks).HasColumnName("PierFd_CorrosionRemarks");

                entity.Property(e => e.PierFdCorrosionSeverity)
                    .HasColumnName("PierFd_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackCondition)
                    .HasColumnName("PierFd_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCrackExtend)
                    .HasColumnName("PierFd_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRating)
                    .HasColumnName("PierFd_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRemarks).HasColumnName("PierFd_CrackRemarks");

                entity.Property(e => e.PierFdCrackSeverity)
                    .HasColumnName("PierFd_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeCondition)
                    .HasColumnName("PierFd_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDegradeExtend)
                    .HasColumnName("PierFd_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRating)
                    .HasColumnName("PierFd_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRemarks).HasColumnName("PierFd_DegradeRemarks");

                entity.Property(e => e.PierFdDegradeSeverity)
                    .HasColumnName("PierFd_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementCondition)
                    .HasColumnName("PierFd_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDisplacementExtend)
                    .HasColumnName("PierFd_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRating)
                    .HasColumnName("PierFd_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRemarks).HasColumnName("PierFd_DisplacementRemarks");

                entity.Property(e => e.PierFdDisplacementSeverity)
                    .HasColumnName("PierFd_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdOtherRemarks).HasColumnName("PierFd_OtherRemarks");

                entity.Property(e => e.PierFdSoilCondition)
                    .HasColumnName("PierFd_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSoilExtend)
                    .HasColumnName("PierFd_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRating)
                    .HasColumnName("PierFd_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRemarks).HasColumnName("PierFd_SoilRemarks");

                entity.Property(e => e.PierFdSoilSeverity)
                    .HasColumnName("PierFd_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingCondition)
                    .HasColumnName("PierFd_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSpallingExtend)
                    .HasColumnName("PierFd_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRating)
                    .HasColumnName("PierFd_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRemarks).HasColumnName("PierFd_SpallingRemarks");

                entity.Property(e => e.PierFdSpallingSeverity)
                    .HasColumnName("PierFd_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierOtherRemarks).HasColumnName("Pier_OtherRemarks");

                entity.Property(e => e.PierSpallingCondition)
                    .HasColumnName("Pier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierSpallingExtend)
                    .HasColumnName("Pier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRating)
                    .HasColumnName("Pier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRemarks).HasColumnName("Pier_SpallingRemarks");

                entity.Property(e => e.PierSpallingSeverity)
                    .HasColumnName("Pier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionCondition)
                    .HasColumnName("Pilecap_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCorrosionExtend)
                    .HasColumnName("Pilecap_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRating)
                    .HasColumnName("Pilecap_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRemarks).HasColumnName("Pilecap_CorrosionRemarks");

                entity.Property(e => e.PilecapCorrosionSeverity)
                    .HasColumnName("Pilecap_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackCondition)
                    .HasColumnName("Pilecap_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCrackExtend)
                    .HasColumnName("Pilecap_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRating)
                    .HasColumnName("Pilecap_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRemarks).HasColumnName("Pilecap_CrackRemarks");

                entity.Property(e => e.PilecapCrackSeverity)
                    .HasColumnName("Pilecap_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeCondition)
                    .HasColumnName("Pilecap_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDegradeExtend)
                    .HasColumnName("Pilecap_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRating)
                    .HasColumnName("Pilecap_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRemarks).HasColumnName("Pilecap_DegradeRemarks");

                entity.Property(e => e.PilecapDegradeSeverity)
                    .HasColumnName("Pilecap_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementCondition)
                    .HasColumnName("Pilecap_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDisplacementExtend)
                    .HasColumnName("Pilecap_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRating)
                    .HasColumnName("Pilecap_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRemarks).HasColumnName("Pilecap_DisplacementRemarks");

                entity.Property(e => e.PilecapDisplacementSeverity)
                    .HasColumnName("Pilecap_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapOtherRemarks).HasColumnName("Pilecap_OtherRemarks");

                entity.Property(e => e.PilecapSoilCondition)
                    .HasColumnName("Pilecap_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSoilExtend)
                    .HasColumnName("Pilecap_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRating)
                    .HasColumnName("Pilecap_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRemarks).HasColumnName("Pilecap_SoilRemarks");

                entity.Property(e => e.PilecapSoilSeverity)
                    .HasColumnName("Pilecap_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingCondition)
                    .HasColumnName("Pilecap_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSpallingExtend)
                    .HasColumnName("Pilecap_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRating)
                    .HasColumnName("Pilecap_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRemarks).HasColumnName("Pilecap_SpallingRemarks");

                entity.Property(e => e.PilecapSpallingSeverity)
                    .HasColumnName("Pilecap_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.RemedialWorkMajorDefect).HasColumnName("Remedial Work Major Defect");

                entity.Property(e => e.RemedialWorkRecommendedAction).HasColumnName("Remedial Work Recommended Action");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.RiverPierCorrosionCondition)
                    .HasColumnName("RiverPier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCorrosionExtend)
                    .HasColumnName("RiverPier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRating)
                    .HasColumnName("RiverPier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRemarks).HasColumnName("RiverPier_CorrosionRemarks");

                entity.Property(e => e.RiverPierCorrosionSeverity)
                    .HasColumnName("RiverPier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackCondition)
                    .HasColumnName("RiverPier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCrackExtend)
                    .HasColumnName("RiverPier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRating)
                    .HasColumnName("RiverPier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRemarks).HasColumnName("RiverPier_CrackRemarks");

                entity.Property(e => e.RiverPierCrackSeverity)
                    .HasColumnName("RiverPier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisCondition)
                    .HasColumnName("RiverPier_DebrisCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDebrisExtend)
                    .HasColumnName("RiverPier_DebrisExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRating)
                    .HasColumnName("RiverPier_DebrisRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRemarks).HasColumnName("RiverPier_DebrisRemarks");

                entity.Property(e => e.RiverPierDebrisSeverity)
                    .HasColumnName("RiverPier_DebrisSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeCondition)
                    .HasColumnName("RiverPier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDegradeExtend)
                    .HasColumnName("RiverPier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRating)
                    .HasColumnName("RiverPier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRemarks).HasColumnName("RiverPier_DegradeRemarks");

                entity.Property(e => e.RiverPierDegradeSeverity)
                    .HasColumnName("RiverPier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierOtherRemarks).HasColumnName("RiverPier_OtherRemarks");

                entity.Property(e => e.RiverPierScouringCondition)
                    .HasColumnName("RiverPier_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierScouringExtend)
                    .HasColumnName("RiverPier_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRating)
                    .HasColumnName("RiverPier_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRemarks).HasColumnName("RiverPier_ScouringRemarks");

                entity.Property(e => e.RiverPierScouringSeverity)
                    .HasColumnName("RiverPier_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingCondition)
                    .HasColumnName("RiverPier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierSpallingExtend)
                    .HasColumnName("RiverPier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRating)
                    .HasColumnName("RiverPier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRemarks).HasColumnName("RiverPier_SpallingRemarks");

                entity.Property(e => e.RiverPierSpallingSeverity)
                    .HasColumnName("RiverPier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SlopeDisintegrateCondition)
                    .HasColumnName("Slope_DisintegrateCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeDisintegrateExtend)
                    .HasColumnName("Slope_DisintegrateExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRating)
                    .HasColumnName("Slope_DisintegrateRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRemarks).HasColumnName("Slope_DisintegrateRemarks");

                entity.Property(e => e.SlopeDisintegrateSeverity)
                    .HasColumnName("Slope_DisintegrateSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionCondition)
                    .HasColumnName("Slope_ErosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeErosionExtend)
                    .HasColumnName("Slope_ErosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRating)
                    .HasColumnName("Slope_ErosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRemarks).HasColumnName("Slope_ErosionRemarks");

                entity.Property(e => e.SlopeErosionSeverity)
                    .HasColumnName("Slope_ErosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeOtherRemarks).HasColumnName("Slope_OtherRemarks");

                entity.Property(e => e.SlopePierCorrosionCondition)
                    .HasColumnName("SlopePier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCorrosionExtend)
                    .HasColumnName("SlopePier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRating)
                    .HasColumnName("SlopePier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRemarks).HasColumnName("SlopePier_CorrosionRemarks");

                entity.Property(e => e.SlopePierCorrosionSeverity)
                    .HasColumnName("SlopePier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackCondition)
                    .HasColumnName("SlopePier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCrackExtend)
                    .HasColumnName("SlopePier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRating)
                    .HasColumnName("SlopePier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRemarks).HasColumnName("SlopePier_CrackRemarks");

                entity.Property(e => e.SlopePierCrackSeverity)
                    .HasColumnName("SlopePier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierOtherRemarks).HasColumnName("SlopePier_OtherRemarks");

                entity.Property(e => e.SlopePierSpallingCondition)
                    .HasColumnName("SlopePier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierSpallingExtend)
                    .HasColumnName("SlopePier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRating)
                    .HasColumnName("SlopePier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRemarks).HasColumnName("SlopePier_SpallingRemarks");

                entity.Property(e => e.SlopePierSpallingSeverity)
                    .HasColumnName("SlopePier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringCondition)
                    .HasColumnName("Slope_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeScouringExtend)
                    .HasColumnName("Slope_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRating)
                    .HasColumnName("Slope_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRemarks).HasColumnName("Slope_ScouringRemarks");

                entity.Property(e => e.SlopeScouringSeverity)
                    .HasColumnName("Slope_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.UtilitiesCondition).HasColumnName("Utilities_Condition");

                entity.Property(e => e.UtilitiesRemarks).HasColumnName("Utilities_Remarks");

                entity.Property(e => e.WingwallCorrosionCondition)
                    .HasColumnName("Wingwall_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCorrosionExtend)
                    .HasColumnName("Wingwall_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRating)
                    .HasColumnName("Wingwall_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRemarks).HasColumnName("Wingwall_CorrosionRemarks");

                entity.Property(e => e.WingwallCorrosionSeverity)
                    .HasColumnName("Wingwall_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackCondition)
                    .HasColumnName("Wingwall_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCrackExtend)
                    .HasColumnName("Wingwall_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRating)
                    .HasColumnName("Wingwall_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRemarks).HasColumnName("Wingwall_CrackRemarks");

                entity.Property(e => e.WingwallCrackSeverity)
                    .HasColumnName("Wingwall_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeCondition)
                    .HasColumnName("Wingwall_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDegradeExtend)
                    .HasColumnName("Wingwall_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRating)
                    .HasColumnName("Wingwall_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRemarks).HasColumnName("Wingwall_DegradeRemarks");

                entity.Property(e => e.WingwallDegradeSeverity)
                    .HasColumnName("Wingwall_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementCondition)
                    .HasColumnName("Wingwall_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDisplacementExtend)
                    .HasColumnName("Wingwall_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRating)
                    .HasColumnName("Wingwall_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRemarks).HasColumnName("Wingwall_DisplacementRemarks");

                entity.Property(e => e.WingwallDisplacementSeverity)
                    .HasColumnName("Wingwall_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallOtherRemarks).HasColumnName("Wingwall_OtherRemarks");

                entity.Property(e => e.WingwallSpallingCondition)
                    .HasColumnName("Wingwall_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallSpallingExtend)
                    .HasColumnName("Wingwall_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRating)
                    .HasColumnName("Wingwall_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRemarks).HasColumnName("Wingwall_SpallingRemarks");

                entity.Property(e => e.WingwallSpallingSeverity)
                    .HasColumnName("Wingwall_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeCondition)
                    .HasColumnName("Wingwall_WeepholeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallWeepholeExtend)
                    .HasColumnName("Wingwall_WeepholeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRating)
                    .HasColumnName("Wingwall_WeepholeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRemarks).HasColumnName("Wingwall_WeepholeRemarks");

                entity.Property(e => e.WingwallWeepholeSeverity)
                    .HasColumnName("Wingwall_WeepholeSeverity")
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<PiCulvertExportDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PI_CulvertExportDetail");

                entity.Property(e => e.AssetBaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.BarrelAbrasion)
                    .HasColumnName("Barrel_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelAbrasionRem).HasColumnName("Barrel_AbrasionRem");

                entity.Property(e => e.BarrelCorosion)
                    .HasColumnName("Barrel_Corosion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCorosionRem).HasColumnName("Barrel_CorosionRem");

                entity.Property(e => e.BarrelCracking)
                    .HasColumnName("Barrel_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCrackingRem).HasColumnName("Barrel_CrackingRem");

                entity.Property(e => e.BarrelSettlement)
                    .HasColumnName("Barrel_Settlement")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelSettlementRem).HasColumnName("Barrel_SettlementRem");

                entity.Property(e => e.BasicCellNo)
                    .HasColumnName("Basic_CellNo")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicCellNoPhoto)
                    .HasColumnName("Basic_CellNoPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInlet)
                    .HasColumnName("Basic_Inlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInletPhoto)
                    .HasColumnName("Basic_InletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutlet)
                    .HasColumnName("Basic_Outlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutletPhoto)
                    .HasColumnName("Basic_OutletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSize)
                    .HasColumnName("Basic_Size")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSizePhoto)
                    .HasColumnName("Basic_SizePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicType)
                    .HasColumnName("Basic_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicTypePhoto)
                    .HasColumnName("Basic_TypePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureAccessibilityDown)
                    .HasColumnName("Feature_AccessibilityDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureAccessibilityUp)
                    .HasColumnName("Feature_AccessibilityUp")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureLanduseDown)
                    .HasColumnName("Feature_LanduseDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureLanduseUp)
                    .HasColumnName("Feature_LanduseUp")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FurtherInvestigationMajorDefect).HasColumnName("Further Investigation Major Defect");

                entity.Property(e => e.FurtherInvestigationRecommendedAction).HasColumnName("Further Investigation Recommended Action");

                entity.Property(e => e.GenInfoCulvertMarker)
                    .HasColumnName("GenInfo_CulvertMarker")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoIf3rdParty)
                    .HasColumnName("GenInfo_If3rdParty")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPurpose)
                    .HasColumnName("GenInfo_Purpose")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoWeather)
                    .HasColumnName("GenInfo_Weather")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasion)
                    .HasColumnName("Hdpe_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasionRem).HasColumnName("Hdpe_AbrasionRem");

                entity.Property(e => e.HdpeBolts)
                    .HasColumnName("Hdpe_Bolts")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeBoltsRem).HasColumnName("Hdpe_BoltsRem");

                entity.Property(e => e.HdpeCorrosion)
                    .HasColumnName("Hdpe_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeCorrosionRem).HasColumnName("Hdpe_CorrosionRem");

                entity.Property(e => e.HdpePaint)
                    .HasColumnName("Hdpe_Paint")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpePaintRem).HasColumnName("Hdpe_PaintRem");

                entity.Property(e => e.HdpeShape)
                    .HasColumnName("Hdpe_Shape")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeShapeRem).HasColumnName("Hdpe_ShapeRem");

                entity.Property(e => e.HydraulicFloodIn)
                    .HasColumnName("Hydraulic_FloodIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicFloodOut)
                    .HasColumnName("Hydraulic_FloodOut")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingIn)
                    .HasColumnName("Hydraulic_PondingIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingOut)
                    .HasColumnName("Hydraulic_PondingOut")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCracking)
                    .HasColumnName("InApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCrackingRem).HasColumnName("InApron_CrackingRem");

                entity.Property(e => e.InApronGabions)
                    .HasColumnName("InApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronGabionsRem).HasColumnName("InApron_GabionsRem");

                entity.Property(e => e.InApronRipRap)
                    .HasColumnName("InApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronRipRapRem).HasColumnName("InApron_RipRapRem");

                entity.Property(e => e.InEmbankCondition)
                    .HasColumnName("InEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankConditionRem).HasColumnName("InEmbank_ConditionRem");

                entity.Property(e => e.InEmbankDistingration)
                    .HasColumnName("InEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDistingrationRem).HasColumnName("InEmbank_DistingrationRem");

                entity.Property(e => e.InEmbankDrain)
                    .HasColumnName("InEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDrainRem).HasColumnName("InEmbank_DrainRem");

                entity.Property(e => e.InHeadwallCorrosion)
                    .HasColumnName("InHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCorrosionRem).HasColumnName("InHeadwall_CorrosionRem");

                entity.Property(e => e.InHeadwallCracking)
                    .HasColumnName("InHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCrackingRem).HasColumnName("InHeadwall_CrackingRem");

                entity.Property(e => e.InHeadwallDeterioration)
                    .HasColumnName("InHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallDeteriorationRem).HasColumnName("InHeadwall_DeteriorationRem");

                entity.Property(e => e.InHeadwallMovement)
                    .HasColumnName("InHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallMovementRem).HasColumnName("InHeadwall_MovementRem");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OutApronCracking)
                    .HasColumnName("OutApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronCrackingRem).HasColumnName("OutApron_CrackingRem");

                entity.Property(e => e.OutApronGabions)
                    .HasColumnName("OutApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronGabionsRem).HasColumnName("OutApron_GabionsRem");

                entity.Property(e => e.OutApronRipRap)
                    .HasColumnName("OutApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronRipRapRem).HasColumnName("OutApron_RipRapRem");

                entity.Property(e => e.OutEmbankCondition)
                    .HasColumnName("OutEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankConditionRem).HasColumnName("OutEmbank_ConditionRem");

                entity.Property(e => e.OutEmbankDistingration)
                    .HasColumnName("OutEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDistingrationRem).HasColumnName("OutEmbank_DistingrationRem");

                entity.Property(e => e.OutEmbankDrain)
                    .HasColumnName("OutEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDrainRem).HasColumnName("OutEmbank_DrainRem");

                entity.Property(e => e.OutHeadwallCorrosion)
                    .HasColumnName("OutHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCorrosionRem).HasColumnName("OutHeadwall_CorrosionRem");

                entity.Property(e => e.OutHeadwallCracking)
                    .HasColumnName("OutHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCrackingRem).HasColumnName("OutHeadwall_CrackingRem");

                entity.Property(e => e.OutHeadwallDeterioration)
                    .HasColumnName("OutHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallDeteriorationRem).HasColumnName("OutHeadwall_DeteriorationRem");

                entity.Property(e => e.OutHeadwallMovement)
                    .HasColumnName("OutHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallMovementRem).HasColumnName("OutHeadwall_MovementRem");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.RemedialWorkMajorDefect).HasColumnName("Remedial Work Major Defect");

                entity.Property(e => e.RemedialWorkRecommendedAction).HasColumnName("Remedial Work Recommended Action");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.ScouringIn)
                    .HasColumnName("Scouring_In")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringOut)
                    .HasColumnName("Scouring_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SiltationIn)
                    .HasColumnName("Siltation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.SiltationOut)
                    .HasColumnName("Siltation_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SummaryComments).HasColumnName("Summary_Comments");

                entity.Property(e => e.SummaryOverallCondition)
                    .HasColumnName("Summary_OverallCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryOverallService)
                    .HasColumnName("Summary_OverallService")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryPriorityRating)
                    .HasColumnName("Summary_PriorityRating")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamage)
                    .HasColumnName("Vbc_Damage")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamageRem).HasColumnName("Vbc_DamageRem");

                entity.Property(e => e.VegetationIn)
                    .HasColumnName("Vegetation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetationOut)
                    .HasColumnName("Vegetation_Out")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PiResultBridge>(entity =>
            {
                entity.HasKey(e => e.PiSchedulePk);

                entity.Property(e => e.PiSchedulePk)
                    .HasColumnName("PiSchedulePK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbutmentOtherRemarks).HasColumnName("Abutment_OtherRemarks");

                entity.Property(e => e.AbutmentOverallRating)
                    .HasColumnName("Abutment_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementCondition)
                    .HasColumnName("Abutment_PavementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.AbutmentPavementExtend)
                    .HasColumnName("Abutment_PavementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRating)
                    .HasColumnName("Abutment_PavementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRemarks).HasColumnName("Abutment_PavementRemarks");

                entity.Property(e => e.AbutmentPavementSeverity)
                    .HasColumnName("Abutment_PavementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentCondition)
                    .HasColumnName("Bearing_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingAlignmentExtend)
                    .HasColumnName("Bearing_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRating)
                    .HasColumnName("Bearing_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRemarks).HasColumnName("Bearing_AlignmentRemarks");

                entity.Property(e => e.BearingAlignmentSeverity)
                    .HasColumnName("Bearing_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackCondition)
                    .HasColumnName("Bearing_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingCrackExtend)
                    .HasColumnName("Bearing_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRating)
                    .HasColumnName("Bearing_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRemarks).HasColumnName("Bearing_CrackRemarks");

                entity.Property(e => e.BearingCrackSeverity)
                    .HasColumnName("Bearing_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformCondition)
                    .HasColumnName("Bearing_DeformCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingDeformExtend)
                    .HasColumnName("Bearing_DeformExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRating)
                    .HasColumnName("Bearing_DeformRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRemarks).HasColumnName("Bearing_DeformRemarks");

                entity.Property(e => e.BearingDeformSeverity)
                    .HasColumnName("Bearing_DeformSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingOtherRemarks).HasColumnName("Bearing_OtherRemarks");

                entity.Property(e => e.BearingOverallRating)
                    .HasColumnName("Bearing_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingCondition)
                    .HasColumnName("Bearing_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSpallingExtend)
                    .HasColumnName("Bearing_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRating)
                    .HasColumnName("Bearing_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRemarks).HasColumnName("Bearing_SpallingRemarks");

                entity.Property(e => e.BearingSpallingSeverity)
                    .HasColumnName("Bearing_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceCondition)
                    .HasColumnName("Bearing_SurfaceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSurfaceExtend)
                    .HasColumnName("Bearing_SurfaceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRating)
                    .HasColumnName("Bearing_SurfaceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRemarks).HasColumnName("Bearing_SurfaceRemarks");

                entity.Property(e => e.BearingSurfaceSeverity)
                    .HasColumnName("Bearing_SurfaceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageCondition)
                    .HasColumnName("Channel_BlockageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ChannelBlockageExtend)
                    .HasColumnName("Channel_BlockageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRating)
                    .HasColumnName("Channel_BlockageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRemarks).HasColumnName("Channel_BlockageRemarks");

                entity.Property(e => e.ChannelBlockageSeverity)
                    .HasColumnName("Channel_BlockageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelOtherRemarks).HasColumnName("Channel_OtherRemarks");

                entity.Property(e => e.ChannelOverallRating)
                    .HasColumnName("Channel_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageOtherRemarks).HasColumnName("DeckDrainage_OtherRemarks");

                entity.Property(e => e.DeckDrainageOverallRating)
                    .HasColumnName("DeckDrainage_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceCondition)
                    .HasColumnName("DeckDrainage_ServiceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageServiceExtend)
                    .HasColumnName("DeckDrainage_ServiceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRating)
                    .HasColumnName("DeckDrainage_ServiceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRemarks).HasColumnName("DeckDrainage_ServiceRemarks");

                entity.Property(e => e.DeckDrainageServiceSeverity)
                    .HasColumnName("DeckDrainage_ServiceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureCondition)
                    .HasColumnName("DeckDrainage_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageStructureExtend)
                    .HasColumnName("DeckDrainage_StructureExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRating)
                    .HasColumnName("DeckDrainage_StructureRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRemarks).HasColumnName("DeckDrainage_StructureRemarks");

                entity.Property(e => e.DeckDrainageStructureSeverity)
                    .HasColumnName("DeckDrainage_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionCondition)
                    .HasColumnName("DeckEdge_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCorrosionExtend)
                    .HasColumnName("DeckEdge_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRating)
                    .HasColumnName("DeckEdge_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRemarks).HasColumnName("DeckEdge_CorrosionRemarks");

                entity.Property(e => e.DeckEdgeCorrosionSeverity)
                    .HasColumnName("DeckEdge_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingCondition)
                    .HasColumnName("DeckEdge_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCrackingExtend)
                    .HasColumnName("DeckEdge_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRating)
                    .HasColumnName("DeckEdge_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRemarks).HasColumnName("DeckEdge_CrackingRemarks");

                entity.Property(e => e.DeckEdgeCrackingSeverity)
                    .HasColumnName("DeckEdge_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageCondition)
                    .HasColumnName("DeckEdge_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeLeakageExtend)
                    .HasColumnName("DeckEdge_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRating)
                    .HasColumnName("DeckEdge_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRemarks).HasColumnName("DeckEdge_LeakageRemarks");

                entity.Property(e => e.DeckEdgeLeakageSeverity)
                    .HasColumnName("DeckEdge_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeOtherRemarks).HasColumnName("DeckEdge_OtherRemarks");

                entity.Property(e => e.DeckEdgeOverallRating)
                    .HasColumnName("DeckEdge_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingCondition)
                    .HasColumnName("DeckEdge_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeSpallingExtend)
                    .HasColumnName("DeckEdge_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRating)
                    .HasColumnName("DeckEdge_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRemarks).HasColumnName("DeckEdge_SpallingRemarks");

                entity.Property(e => e.DeckEdgeSpallingSeverity)
                    .HasColumnName("DeckEdge_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainCondition)
                    .HasColumnName("DeckEdge_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeStainExtend)
                    .HasColumnName("DeckEdge_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRating)
                    .HasColumnName("DeckEdge_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRemarks).HasColumnName("DeckEdge_StainRemarks");

                entity.Property(e => e.DeckEdgeStainSeverity)
                    .HasColumnName("DeckEdge_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalCondition)
                    .HasColumnName("DeckTop_HorizontalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopHorizontalExtend)
                    .HasColumnName("DeckTop_HorizontalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRating)
                    .HasColumnName("DeckTop_HorizontalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRemarks).HasColumnName("DeckTop_HorizontalRemarks");

                entity.Property(e => e.DeckTopHorizontalSeverity)
                    .HasColumnName("DeckTop_HorizontalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopOtherRemarks).HasColumnName("DeckTop_OtherRemarks");

                entity.Property(e => e.DeckTopOverallRating)
                    .HasColumnName("DeckTop_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalCondition)
                    .HasColumnName("DeckTop_VerticalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopVerticalExtend)
                    .HasColumnName("DeckTop_VerticalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRating)
                    .HasColumnName("DeckTop_VerticalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRemarks).HasColumnName("DeckTop_VerticalRemarks");

                entity.Property(e => e.DeckTopVerticalSeverity)
                    .HasColumnName("DeckTop_VerticalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionCondition)
                    .HasColumnName("Diaphragm_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCorrosionExtend)
                    .HasColumnName("Diaphragm_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRating)
                    .HasColumnName("Diaphragm_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRemarks).HasColumnName("Diaphragm_CorrosionRemarks");

                entity.Property(e => e.DiaphragmCorrosionSeverity)
                    .HasColumnName("Diaphragm_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingCondition)
                    .HasColumnName("Diaphragm_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCrackingExtend)
                    .HasColumnName("Diaphragm_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRating)
                    .HasColumnName("Diaphragm_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRemarks).HasColumnName("Diaphragm_CrackingRemarks");

                entity.Property(e => e.DiaphragmCrackingSeverity)
                    .HasColumnName("Diaphragm_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseCondition)
                    .HasColumnName("Diaphragm_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmNoiseExtend)
                    .HasColumnName("Diaphragm_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRating)
                    .HasColumnName("Diaphragm_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRemarks).HasColumnName("Diaphragm_NoiseRemarks");

                entity.Property(e => e.DiaphragmNoiseSeverity)
                    .HasColumnName("Diaphragm_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmOtherRemarks).HasColumnName("Diaphragm_OtherRemarks");

                entity.Property(e => e.DiaphragmOverallRating)
                    .HasColumnName("Diaphragm_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingCondition)
                    .HasColumnName("Diaphragm_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmSpallingExtend)
                    .HasColumnName("Diaphragm_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRating)
                    .HasColumnName("Diaphragm_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRemarks).HasColumnName("Diaphragm_SpallingRemarks");

                entity.Property(e => e.DiaphragmSpallingSeverity)
                    .HasColumnName("Diaphragm_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightCondition)
                    .HasColumnName("Furniture_HeightCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FurnitureHeightExtend)
                    .HasColumnName("Furniture_HeightExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRating)
                    .HasColumnName("Furniture_HeightRating")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRemarks).HasColumnName("Furniture_HeightRemarks");

                entity.Property(e => e.FurnitureHeightSeverity)
                    .HasColumnName("Furniture_HeightSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureOtherRemarks).HasColumnName("Furniture_OtherRemarks");

                entity.Property(e => e.FurnitureOverallRating)
                    .HasColumnName("Furniture_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoRating)
                    .HasColumnName("GenInfo_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoSpanNo).HasColumnName("GenInfo_SpanNo");

                entity.Property(e => e.GenInfoSummary).HasColumnName("GenInfo_Summary");

                entity.Property(e => e.GenInfoTraffic)
                    .HasColumnName("GenInfo_Traffic")
                    .HasMaxLength(10);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GirderCorrosionCondition)
                    .HasColumnName("Girder_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCorrosionExtend)
                    .HasColumnName("Girder_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRating)
                    .HasColumnName("Girder_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRemarks).HasColumnName("Girder_CorrosionRemarks");

                entity.Property(e => e.GirderCorrosionSeverity)
                    .HasColumnName("Girder_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingCondition)
                    .HasColumnName("Girder_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCrackingExtend)
                    .HasColumnName("Girder_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRating)
                    .HasColumnName("Girder_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRemarks).HasColumnName("Girder_CrackingRemarks");

                entity.Property(e => e.GirderCrackingSeverity)
                    .HasColumnName("Girder_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageCondition)
                    .HasColumnName("Girder_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderLeakageExtend)
                    .HasColumnName("Girder_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRating)
                    .HasColumnName("Girder_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRemarks).HasColumnName("Girder_LeakageRemarks");

                entity.Property(e => e.GirderLeakageSeverity)
                    .HasColumnName("Girder_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseCondition)
                    .HasColumnName("Girder_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderNoiseExtend)
                    .HasColumnName("Girder_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRating)
                    .HasColumnName("Girder_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRemarks).HasColumnName("Girder_NoiseRemarks");

                entity.Property(e => e.GirderNoiseSeverity)
                    .HasColumnName("Girder_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderOtherRemarks).HasColumnName("Girder_OtherRemarks");

                entity.Property(e => e.GirderOverallRating)
                    .HasColumnName("Girder_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingCondition)
                    .HasColumnName("Girder_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderSpallingExtend)
                    .HasColumnName("Girder_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRating)
                    .HasColumnName("Girder_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRemarks).HasColumnName("Girder_SpallingRemarks");

                entity.Property(e => e.GirderSpallingSeverity)
                    .HasColumnName("Girder_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainCondition)
                    .HasColumnName("Girder_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderStainExtend)
                    .HasColumnName("Girder_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRating)
                    .HasColumnName("Girder_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRemarks).HasColumnName("Girder_StainRemarks");

                entity.Property(e => e.GirderStainSeverity)
                    .HasColumnName("Girder_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentCondition)
                    .HasColumnName("Joint_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointAlignmentExtend)
                    .HasColumnName("Joint_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRating)
                    .HasColumnName("Joint_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRemarks).HasColumnName("Joint_AlignmentRemarks");

                entity.Property(e => e.JointAlignmentSeverity)
                    .HasColumnName("Joint_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksCondition)
                    .HasColumnName("Joint_CracksCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointCracksExtend)
                    .HasColumnName("Joint_CracksExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRating)
                    .HasColumnName("Joint_CracksRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRemarks).HasColumnName("Joint_CracksRemarks");

                entity.Property(e => e.JointCracksSeverity)
                    .HasColumnName("Joint_CracksSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityCondition)
                    .HasColumnName("Joint_FixityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointFixityExtend)
                    .HasColumnName("Joint_FixityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRating)
                    .HasColumnName("Joint_FixityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRemarks).HasColumnName("Joint_FixityRemarks");

                entity.Property(e => e.JointFixitySeverity)
                    .HasColumnName("Joint_FixitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageCondition)
                    .HasColumnName("Joint_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointLeakageExtend)
                    .HasColumnName("Joint_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRating)
                    .HasColumnName("Joint_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRemarks).HasColumnName("Joint_LeakageRemarks");

                entity.Property(e => e.JointLeakageSeverity)
                    .HasColumnName("Joint_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointOtherRemarks).HasColumnName("Joint_OtherRemarks");

                entity.Property(e => e.JointOverallRating)
                    .HasColumnName("Joint_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionCondition)
                    .HasColumnName("Parapet_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCorrosionExtend)
                    .HasColumnName("Parapet_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRating)
                    .HasColumnName("Parapet_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRemarks).HasColumnName("Parapet_CorrosionRemarks");

                entity.Property(e => e.ParapetCorrosionSeverity)
                    .HasColumnName("Parapet_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingCondition)
                    .HasColumnName("Parapet_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCrackingExtend)
                    .HasColumnName("Parapet_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRating)
                    .HasColumnName("Parapet_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRemarks).HasColumnName("Parapet_CrackingRemarks");

                entity.Property(e => e.ParapetCrackingSeverity)
                    .HasColumnName("Parapet_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactCondition)
                    .HasColumnName("Parapet_ImpactCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetImpactExtend)
                    .HasColumnName("Parapet_ImpactExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRating)
                    .HasColumnName("Parapet_ImpactRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRemarks).HasColumnName("Parapet_ImpactRemarks");

                entity.Property(e => e.ParapetImpactSeverity)
                    .HasColumnName("Parapet_ImpactSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetOtherRemarks).HasColumnName("Parapet_OtherRemarks");

                entity.Property(e => e.ParapetOverallRating)
                    .HasColumnName("Parapet_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingCondition)
                    .HasColumnName("Parapet_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetSpallingExtend)
                    .HasColumnName("Parapet_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRating)
                    .HasColumnName("Parapet_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRemarks).HasColumnName("Parapet_SpallingRemarks");

                entity.Property(e => e.ParapetSpallingSeverity)
                    .HasColumnName("Parapet_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityCondition)
                    .HasColumnName("Parapet_StabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetStabilityExtend)
                    .HasColumnName("Parapet_StabilityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRating)
                    .HasColumnName("Parapet_StabilityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRemarks).HasColumnName("Parapet_StabilityRemarks");

                entity.Property(e => e.ParapetStabilitySeverity)
                    .HasColumnName("Parapet_StabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionCondition)
                    .HasColumnName("Pier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCorrosionExtend)
                    .HasColumnName("Pier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRating)
                    .HasColumnName("Pier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRemarks).HasColumnName("Pier_CorrosionRemarks");

                entity.Property(e => e.PierCorrosionSeverity)
                    .HasColumnName("Pier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackCondition)
                    .HasColumnName("Pier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCrackExtend)
                    .HasColumnName("Pier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRating)
                    .HasColumnName("Pier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRemarks).HasColumnName("Pier_CrackRemarks");

                entity.Property(e => e.PierCrackSeverity)
                    .HasColumnName("Pier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeCondition)
                    .HasColumnName("Pier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDegradeExtend)
                    .HasColumnName("Pier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRating)
                    .HasColumnName("Pier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRemarks).HasColumnName("Pier_DegradeRemarks");

                entity.Property(e => e.PierDegradeSeverity)
                    .HasColumnName("Pier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementCondition)
                    .HasColumnName("Pier_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDisplacementExtend)
                    .HasColumnName("Pier_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRating)
                    .HasColumnName("Pier_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRemarks).HasColumnName("Pier_DisplacementRemarks");

                entity.Property(e => e.PierDisplacementSeverity)
                    .HasColumnName("Pier_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionCondition)
                    .HasColumnName("PierFd_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCorrosionExtend)
                    .HasColumnName("PierFd_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRating)
                    .HasColumnName("PierFd_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRemarks).HasColumnName("PierFd_CorrosionRemarks");

                entity.Property(e => e.PierFdCorrosionSeverity)
                    .HasColumnName("PierFd_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackCondition)
                    .HasColumnName("PierFd_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCrackExtend)
                    .HasColumnName("PierFd_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRating)
                    .HasColumnName("PierFd_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRemarks).HasColumnName("PierFd_CrackRemarks");

                entity.Property(e => e.PierFdCrackSeverity)
                    .HasColumnName("PierFd_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeCondition)
                    .HasColumnName("PierFd_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDegradeExtend)
                    .HasColumnName("PierFd_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRating)
                    .HasColumnName("PierFd_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRemarks).HasColumnName("PierFd_DegradeRemarks");

                entity.Property(e => e.PierFdDegradeSeverity)
                    .HasColumnName("PierFd_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementCondition)
                    .HasColumnName("PierFd_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDisplacementExtend)
                    .HasColumnName("PierFd_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRating)
                    .HasColumnName("PierFd_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRemarks).HasColumnName("PierFd_DisplacementRemarks");

                entity.Property(e => e.PierFdDisplacementSeverity)
                    .HasColumnName("PierFd_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdOtherRemarks).HasColumnName("PierFd_OtherRemarks");

                entity.Property(e => e.PierFdOverallRating)
                    .HasColumnName("PierFd_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilCondition)
                    .HasColumnName("PierFd_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSoilExtend)
                    .HasColumnName("PierFd_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRating)
                    .HasColumnName("PierFd_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRemarks).HasColumnName("PierFd_SoilRemarks");

                entity.Property(e => e.PierFdSoilSeverity)
                    .HasColumnName("PierFd_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingCondition)
                    .HasColumnName("PierFd_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSpallingExtend)
                    .HasColumnName("PierFd_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRating)
                    .HasColumnName("PierFd_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRemarks).HasColumnName("PierFd_SpallingRemarks");

                entity.Property(e => e.PierFdSpallingSeverity)
                    .HasColumnName("PierFd_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierOtherRemarks).HasColumnName("Pier_OtherRemarks");

                entity.Property(e => e.PierOverallRating)
                    .HasColumnName("Pier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingCondition)
                    .HasColumnName("Pier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierSpallingExtend)
                    .HasColumnName("Pier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRating)
                    .HasColumnName("Pier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRemarks).HasColumnName("Pier_SpallingRemarks");

                entity.Property(e => e.PierSpallingSeverity)
                    .HasColumnName("Pier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionCondition)
                    .HasColumnName("Pilecap_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCorrosionExtend)
                    .HasColumnName("Pilecap_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRating)
                    .HasColumnName("Pilecap_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRemarks).HasColumnName("Pilecap_CorrosionRemarks");

                entity.Property(e => e.PilecapCorrosionSeverity)
                    .HasColumnName("Pilecap_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackCondition)
                    .HasColumnName("Pilecap_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCrackExtend)
                    .HasColumnName("Pilecap_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRating)
                    .HasColumnName("Pilecap_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRemarks).HasColumnName("Pilecap_CrackRemarks");

                entity.Property(e => e.PilecapCrackSeverity)
                    .HasColumnName("Pilecap_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeCondition)
                    .HasColumnName("Pilecap_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDegradeExtend)
                    .HasColumnName("Pilecap_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRating)
                    .HasColumnName("Pilecap_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRemarks).HasColumnName("Pilecap_DegradeRemarks");

                entity.Property(e => e.PilecapDegradeSeverity)
                    .HasColumnName("Pilecap_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementCondition)
                    .HasColumnName("Pilecap_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDisplacementExtend)
                    .HasColumnName("Pilecap_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRating)
                    .HasColumnName("Pilecap_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRemarks).HasColumnName("Pilecap_DisplacementRemarks");

                entity.Property(e => e.PilecapDisplacementSeverity)
                    .HasColumnName("Pilecap_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapOtherRemarks).HasColumnName("Pilecap_OtherRemarks");

                entity.Property(e => e.PilecapOverallRating)
                    .HasColumnName("Pilecap_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilCondition)
                    .HasColumnName("Pilecap_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSoilExtend)
                    .HasColumnName("Pilecap_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRating)
                    .HasColumnName("Pilecap_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRemarks).HasColumnName("Pilecap_SoilRemarks");

                entity.Property(e => e.PilecapSoilSeverity)
                    .HasColumnName("Pilecap_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingCondition)
                    .HasColumnName("Pilecap_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSpallingExtend)
                    .HasColumnName("Pilecap_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRating)
                    .HasColumnName("Pilecap_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRemarks).HasColumnName("Pilecap_SpallingRemarks");

                entity.Property(e => e.PilecapSpallingSeverity)
                    .HasColumnName("Pilecap_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionCondition)
                    .HasColumnName("RiverPier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCorrosionExtend)
                    .HasColumnName("RiverPier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRating)
                    .HasColumnName("RiverPier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRemarks).HasColumnName("RiverPier_CorrosionRemarks");

                entity.Property(e => e.RiverPierCorrosionSeverity)
                    .HasColumnName("RiverPier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackCondition)
                    .HasColumnName("RiverPier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCrackExtend)
                    .HasColumnName("RiverPier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRating)
                    .HasColumnName("RiverPier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRemarks).HasColumnName("RiverPier_CrackRemarks");

                entity.Property(e => e.RiverPierCrackSeverity)
                    .HasColumnName("RiverPier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisCondition)
                    .HasColumnName("RiverPier_DebrisCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDebrisExtend)
                    .HasColumnName("RiverPier_DebrisExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRating)
                    .HasColumnName("RiverPier_DebrisRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRemarks).HasColumnName("RiverPier_DebrisRemarks");

                entity.Property(e => e.RiverPierDebrisSeverity)
                    .HasColumnName("RiverPier_DebrisSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeCondition)
                    .HasColumnName("RiverPier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDegradeExtend)
                    .HasColumnName("RiverPier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRating)
                    .HasColumnName("RiverPier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRemarks).HasColumnName("RiverPier_DegradeRemarks");

                entity.Property(e => e.RiverPierDegradeSeverity)
                    .HasColumnName("RiverPier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierOtherRemarks).HasColumnName("RiverPier_OtherRemarks");

                entity.Property(e => e.RiverPierOverallRating)
                    .HasColumnName("RiverPier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringCondition)
                    .HasColumnName("RiverPier_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierScouringExtend)
                    .HasColumnName("RiverPier_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRating)
                    .HasColumnName("RiverPier_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRemarks).HasColumnName("RiverPier_ScouringRemarks");

                entity.Property(e => e.RiverPierScouringSeverity)
                    .HasColumnName("RiverPier_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingCondition)
                    .HasColumnName("RiverPier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierSpallingExtend)
                    .HasColumnName("RiverPier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRating)
                    .HasColumnName("RiverPier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRemarks).HasColumnName("RiverPier_SpallingRemarks");

                entity.Property(e => e.RiverPierSpallingSeverity)
                    .HasColumnName("RiverPier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateCondition)
                    .HasColumnName("Slope_DisintegrateCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeDisintegrateExtend)
                    .HasColumnName("Slope_DisintegrateExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRating)
                    .HasColumnName("Slope_DisintegrateRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRemarks).HasColumnName("Slope_DisintegrateRemarks");

                entity.Property(e => e.SlopeDisintegrateSeverity)
                    .HasColumnName("Slope_DisintegrateSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionCondition)
                    .HasColumnName("Slope_ErosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeErosionExtend)
                    .HasColumnName("Slope_ErosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRating)
                    .HasColumnName("Slope_ErosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRemarks).HasColumnName("Slope_ErosionRemarks");

                entity.Property(e => e.SlopeErosionSeverity)
                    .HasColumnName("Slope_ErosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeOtherRemarks).HasColumnName("Slope_OtherRemarks");

                entity.Property(e => e.SlopeOverallRating)
                    .HasColumnName("Slope_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionCondition)
                    .HasColumnName("SlopePier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCorrosionExtend)
                    .HasColumnName("SlopePier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRating)
                    .HasColumnName("SlopePier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRemarks).HasColumnName("SlopePier_CorrosionRemarks");

                entity.Property(e => e.SlopePierCorrosionSeverity)
                    .HasColumnName("SlopePier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackCondition)
                    .HasColumnName("SlopePier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCrackExtend)
                    .HasColumnName("SlopePier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRating)
                    .HasColumnName("SlopePier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRemarks).HasColumnName("SlopePier_CrackRemarks");

                entity.Property(e => e.SlopePierCrackSeverity)
                    .HasColumnName("SlopePier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierOtherRemarks).HasColumnName("SlopePier_OtherRemarks");

                entity.Property(e => e.SlopePierOverallRating)
                    .HasColumnName("SlopePier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingCondition)
                    .HasColumnName("SlopePier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierSpallingExtend)
                    .HasColumnName("SlopePier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRating)
                    .HasColumnName("SlopePier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRemarks).HasColumnName("SlopePier_SpallingRemarks");

                entity.Property(e => e.SlopePierSpallingSeverity)
                    .HasColumnName("SlopePier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringCondition)
                    .HasColumnName("Slope_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeScouringExtend)
                    .HasColumnName("Slope_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRating)
                    .HasColumnName("Slope_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRemarks).HasColumnName("Slope_ScouringRemarks");

                entity.Property(e => e.SlopeScouringSeverity)
                    .HasColumnName("Slope_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.UtilitiesCondition).HasColumnName("Utilities_Condition");

                entity.Property(e => e.UtilitiesRemarks).HasColumnName("Utilities_Remarks");

                entity.Property(e => e.WingwallCorrosionCondition)
                    .HasColumnName("Wingwall_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCorrosionExtend)
                    .HasColumnName("Wingwall_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRating)
                    .HasColumnName("Wingwall_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRemarks).HasColumnName("Wingwall_CorrosionRemarks");

                entity.Property(e => e.WingwallCorrosionSeverity)
                    .HasColumnName("Wingwall_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackCondition)
                    .HasColumnName("Wingwall_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCrackExtend)
                    .HasColumnName("Wingwall_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRating)
                    .HasColumnName("Wingwall_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRemarks).HasColumnName("Wingwall_CrackRemarks");

                entity.Property(e => e.WingwallCrackSeverity)
                    .HasColumnName("Wingwall_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeCondition)
                    .HasColumnName("Wingwall_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDegradeExtend)
                    .HasColumnName("Wingwall_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRating)
                    .HasColumnName("Wingwall_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRemarks).HasColumnName("Wingwall_DegradeRemarks");

                entity.Property(e => e.WingwallDegradeSeverity)
                    .HasColumnName("Wingwall_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementCondition)
                    .HasColumnName("Wingwall_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDisplacementExtend)
                    .HasColumnName("Wingwall_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRating)
                    .HasColumnName("Wingwall_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRemarks).HasColumnName("Wingwall_DisplacementRemarks");

                entity.Property(e => e.WingwallDisplacementSeverity)
                    .HasColumnName("Wingwall_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallOtherRemarks).HasColumnName("Wingwall_OtherRemarks");

                entity.Property(e => e.WingwallOverallRating)
                    .HasColumnName("Wingwall_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingCondition)
                    .HasColumnName("Wingwall_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallSpallingExtend)
                    .HasColumnName("Wingwall_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRating)
                    .HasColumnName("Wingwall_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRemarks).HasColumnName("Wingwall_SpallingRemarks");

                entity.Property(e => e.WingwallSpallingSeverity)
                    .HasColumnName("Wingwall_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeCondition)
                    .HasColumnName("Wingwall_WeepholeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallWeepholeExtend)
                    .HasColumnName("Wingwall_WeepholeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRating)
                    .HasColumnName("Wingwall_WeepholeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRemarks).HasColumnName("Wingwall_WeepholeRemarks");

                entity.Property(e => e.WingwallWeepholeSeverity)
                    .HasColumnName("Wingwall_WeepholeSeverity")
                    .HasMaxLength(5);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithOne(p => p.PiResultBridge)
                    .HasForeignKey<PiResultBridge>(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultBridge_PiSchedule");
            });

            modelBuilder.Entity<PiResultBridgeFurtherInvestigation>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultBridge_FurtherInvestigation");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.FiMajorDefect)
                    .HasColumnName("FI_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.FiRecommendedAction)
                    .HasColumnName("FI_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultBridgeFurtherInvestigation)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultBridge_FurtherInvestigation_PiResultBridge");
            });

            modelBuilder.Entity<PiResultBridgePhoto>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultBridge_Photo");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.PhoName)
                    .HasColumnName("Pho_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoPhoto)
                    .HasColumnName("Pho_Photo")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoRemark)
                    .HasColumnName("Pho_Remark")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultBridgePhoto)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultBridge_Photo_PiResultBridge");
            });

            modelBuilder.Entity<PiResultBridgeRemedialWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultBridge_RemedialWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RwMajorDefect)
                    .HasColumnName("RW_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RwRecommendedAction)
                    .HasColumnName("RW_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultBridgeRemedialWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultBridge_RemedialWork_PiResultBridge");
            });

            modelBuilder.Entity<PiResultBridgeRoutineWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultBridge_RoutineWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RmMajorDefect)
                    .HasColumnName("RM_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RmRecommendedAction)
                    .HasColumnName("RM_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultBridgeRoutineWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultBridge_RoutineWork_PiResultBridge");
            });

            modelBuilder.Entity<PiResultBridgeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PiResultBridgeView");

                entity.Property(e => e.AbutmentOtherRemarks).HasColumnName("Abutment_OtherRemarks");

                entity.Property(e => e.AbutmentOverallRating)
                    .HasColumnName("Abutment_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementCondition)
                    .HasColumnName("Abutment_PavementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.AbutmentPavementExtend)
                    .HasColumnName("Abutment_PavementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRating)
                    .HasColumnName("Abutment_PavementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.AbutmentPavementRemarks).HasColumnName("Abutment_PavementRemarks");

                entity.Property(e => e.AbutmentPavementSeverity)
                    .HasColumnName("Abutment_PavementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentCondition)
                    .HasColumnName("Bearing_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingAlignmentExtend)
                    .HasColumnName("Bearing_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRating)
                    .HasColumnName("Bearing_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingAlignmentRemarks).HasColumnName("Bearing_AlignmentRemarks");

                entity.Property(e => e.BearingAlignmentSeverity)
                    .HasColumnName("Bearing_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackCondition)
                    .HasColumnName("Bearing_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingCrackExtend)
                    .HasColumnName("Bearing_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRating)
                    .HasColumnName("Bearing_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingCrackRemarks).HasColumnName("Bearing_CrackRemarks");

                entity.Property(e => e.BearingCrackSeverity)
                    .HasColumnName("Bearing_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformCondition)
                    .HasColumnName("Bearing_DeformCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingDeformExtend)
                    .HasColumnName("Bearing_DeformExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRating)
                    .HasColumnName("Bearing_DeformRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingDeformRemarks).HasColumnName("Bearing_DeformRemarks");

                entity.Property(e => e.BearingDeformSeverity)
                    .HasColumnName("Bearing_DeformSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingOtherRemarks).HasColumnName("Bearing_OtherRemarks");

                entity.Property(e => e.BearingOverallRating)
                    .HasColumnName("Bearing_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingCondition)
                    .HasColumnName("Bearing_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSpallingExtend)
                    .HasColumnName("Bearing_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRating)
                    .HasColumnName("Bearing_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSpallingRemarks).HasColumnName("Bearing_SpallingRemarks");

                entity.Property(e => e.BearingSpallingSeverity)
                    .HasColumnName("Bearing_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceCondition)
                    .HasColumnName("Bearing_SurfaceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.BearingSurfaceExtend)
                    .HasColumnName("Bearing_SurfaceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRating)
                    .HasColumnName("Bearing_SurfaceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.BearingSurfaceRemarks).HasColumnName("Bearing_SurfaceRemarks");

                entity.Property(e => e.BearingSurfaceSeverity)
                    .HasColumnName("Bearing_SurfaceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.BridgeKmlocation).HasColumnName("BridgeKMLocation");

                entity.Property(e => e.BridgeName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BridgeType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelBlockageCondition)
                    .HasColumnName("Channel_BlockageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ChannelBlockageExtend)
                    .HasColumnName("Channel_BlockageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRating)
                    .HasColumnName("Channel_BlockageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelBlockageRemarks).HasColumnName("Channel_BlockageRemarks");

                entity.Property(e => e.ChannelBlockageSeverity)
                    .HasColumnName("Channel_BlockageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ChannelOtherRemarks).HasColumnName("Channel_OtherRemarks");

                entity.Property(e => e.ChannelOverallRating)
                    .HasColumnName("Channel_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageOtherRemarks).HasColumnName("DeckDrainage_OtherRemarks");

                entity.Property(e => e.DeckDrainageOverallRating)
                    .HasColumnName("DeckDrainage_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceCondition)
                    .HasColumnName("DeckDrainage_ServiceCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageServiceExtend)
                    .HasColumnName("DeckDrainage_ServiceExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRating)
                    .HasColumnName("DeckDrainage_ServiceRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageServiceRemarks).HasColumnName("DeckDrainage_ServiceRemarks");

                entity.Property(e => e.DeckDrainageServiceSeverity)
                    .HasColumnName("DeckDrainage_ServiceSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureCondition)
                    .HasColumnName("DeckDrainage_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckDrainageStructureExtend)
                    .HasColumnName("DeckDrainage_StructureExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRating)
                    .HasColumnName("DeckDrainage_StructureRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckDrainageStructureRemarks).HasColumnName("DeckDrainage_StructureRemarks");

                entity.Property(e => e.DeckDrainageStructureSeverity)
                    .HasColumnName("DeckDrainage_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionCondition)
                    .HasColumnName("DeckEdge_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCorrosionExtend)
                    .HasColumnName("DeckEdge_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRating)
                    .HasColumnName("DeckEdge_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCorrosionRemarks).HasColumnName("DeckEdge_CorrosionRemarks");

                entity.Property(e => e.DeckEdgeCorrosionSeverity)
                    .HasColumnName("DeckEdge_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingCondition)
                    .HasColumnName("DeckEdge_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeCrackingExtend)
                    .HasColumnName("DeckEdge_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRating)
                    .HasColumnName("DeckEdge_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeCrackingRemarks).HasColumnName("DeckEdge_CrackingRemarks");

                entity.Property(e => e.DeckEdgeCrackingSeverity)
                    .HasColumnName("DeckEdge_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageCondition)
                    .HasColumnName("DeckEdge_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeLeakageExtend)
                    .HasColumnName("DeckEdge_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRating)
                    .HasColumnName("DeckEdge_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeLeakageRemarks).HasColumnName("DeckEdge_LeakageRemarks");

                entity.Property(e => e.DeckEdgeLeakageSeverity)
                    .HasColumnName("DeckEdge_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeOtherRemarks).HasColumnName("DeckEdge_OtherRemarks");

                entity.Property(e => e.DeckEdgeOverallRating)
                    .HasColumnName("DeckEdge_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingCondition)
                    .HasColumnName("DeckEdge_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeSpallingExtend)
                    .HasColumnName("DeckEdge_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRating)
                    .HasColumnName("DeckEdge_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeSpallingRemarks).HasColumnName("DeckEdge_SpallingRemarks");

                entity.Property(e => e.DeckEdgeSpallingSeverity)
                    .HasColumnName("DeckEdge_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainCondition)
                    .HasColumnName("DeckEdge_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckEdgeStainExtend)
                    .HasColumnName("DeckEdge_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRating)
                    .HasColumnName("DeckEdge_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckEdgeStainRemarks).HasColumnName("DeckEdge_StainRemarks");

                entity.Property(e => e.DeckEdgeStainSeverity)
                    .HasColumnName("DeckEdge_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalCondition)
                    .HasColumnName("DeckTop_HorizontalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopHorizontalExtend)
                    .HasColumnName("DeckTop_HorizontalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRating)
                    .HasColumnName("DeckTop_HorizontalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopHorizontalRemarks).HasColumnName("DeckTop_HorizontalRemarks");

                entity.Property(e => e.DeckTopHorizontalSeverity)
                    .HasColumnName("DeckTop_HorizontalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopOtherRemarks).HasColumnName("DeckTop_OtherRemarks");

                entity.Property(e => e.DeckTopOverallRating)
                    .HasColumnName("DeckTop_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalCondition)
                    .HasColumnName("DeckTop_VerticalCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DeckTopVerticalExtend)
                    .HasColumnName("DeckTop_VerticalExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRating)
                    .HasColumnName("DeckTop_VerticalRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DeckTopVerticalRemarks).HasColumnName("DeckTop_VerticalRemarks");

                entity.Property(e => e.DeckTopVerticalSeverity)
                    .HasColumnName("DeckTop_VerticalSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionCondition)
                    .HasColumnName("Diaphragm_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCorrosionExtend)
                    .HasColumnName("Diaphragm_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRating)
                    .HasColumnName("Diaphragm_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCorrosionRemarks).HasColumnName("Diaphragm_CorrosionRemarks");

                entity.Property(e => e.DiaphragmCorrosionSeverity)
                    .HasColumnName("Diaphragm_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingCondition)
                    .HasColumnName("Diaphragm_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmCrackingExtend)
                    .HasColumnName("Diaphragm_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRating)
                    .HasColumnName("Diaphragm_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmCrackingRemarks).HasColumnName("Diaphragm_CrackingRemarks");

                entity.Property(e => e.DiaphragmCrackingSeverity)
                    .HasColumnName("Diaphragm_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseCondition)
                    .HasColumnName("Diaphragm_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmNoiseExtend)
                    .HasColumnName("Diaphragm_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRating)
                    .HasColumnName("Diaphragm_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmNoiseRemarks).HasColumnName("Diaphragm_NoiseRemarks");

                entity.Property(e => e.DiaphragmNoiseSeverity)
                    .HasColumnName("Diaphragm_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmOtherRemarks).HasColumnName("Diaphragm_OtherRemarks");

                entity.Property(e => e.DiaphragmOverallRating)
                    .HasColumnName("Diaphragm_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingCondition)
                    .HasColumnName("Diaphragm_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaphragmSpallingExtend)
                    .HasColumnName("Diaphragm_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRating)
                    .HasColumnName("Diaphragm_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.DiaphragmSpallingRemarks).HasColumnName("Diaphragm_SpallingRemarks");

                entity.Property(e => e.DiaphragmSpallingSeverity)
                    .HasColumnName("Diaphragm_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FeatureBound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeatureRoute)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FurnitureHeightCondition)
                    .HasColumnName("Furniture_HeightCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FurnitureHeightExtend)
                    .HasColumnName("Furniture_HeightExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRating)
                    .HasColumnName("Furniture_HeightRating")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureHeightRemarks).HasColumnName("Furniture_HeightRemarks");

                entity.Property(e => e.FurnitureHeightSeverity)
                    .HasColumnName("Furniture_HeightSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FurnitureOtherRemarks).HasColumnName("Furniture_OtherRemarks");

                entity.Property(e => e.FurnitureOverallRating)
                    .HasColumnName("Furniture_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoRating)
                    .HasColumnName("GenInfo_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoSpanNo).HasColumnName("GenInfo_SpanNo");

                entity.Property(e => e.GenInfoSummary).HasColumnName("GenInfo_Summary");

                entity.Property(e => e.GenInfoTraffic)
                    .HasColumnName("GenInfo_Traffic")
                    .HasMaxLength(10);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GirderCorrosionCondition)
                    .HasColumnName("Girder_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCorrosionExtend)
                    .HasColumnName("Girder_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRating)
                    .HasColumnName("Girder_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCorrosionRemarks).HasColumnName("Girder_CorrosionRemarks");

                entity.Property(e => e.GirderCorrosionSeverity)
                    .HasColumnName("Girder_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingCondition)
                    .HasColumnName("Girder_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderCrackingExtend)
                    .HasColumnName("Girder_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRating)
                    .HasColumnName("Girder_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderCrackingRemarks).HasColumnName("Girder_CrackingRemarks");

                entity.Property(e => e.GirderCrackingSeverity)
                    .HasColumnName("Girder_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageCondition)
                    .HasColumnName("Girder_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderLeakageExtend)
                    .HasColumnName("Girder_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRating)
                    .HasColumnName("Girder_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderLeakageRemarks).HasColumnName("Girder_LeakageRemarks");

                entity.Property(e => e.GirderLeakageSeverity)
                    .HasColumnName("Girder_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseCondition)
                    .HasColumnName("Girder_NoiseCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderNoiseExtend)
                    .HasColumnName("Girder_NoiseExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRating)
                    .HasColumnName("Girder_NoiseRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderNoiseRemarks).HasColumnName("Girder_NoiseRemarks");

                entity.Property(e => e.GirderNoiseSeverity)
                    .HasColumnName("Girder_NoiseSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderOtherRemarks).HasColumnName("Girder_OtherRemarks");

                entity.Property(e => e.GirderOverallRating)
                    .HasColumnName("Girder_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingCondition)
                    .HasColumnName("Girder_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderSpallingExtend)
                    .HasColumnName("Girder_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRating)
                    .HasColumnName("Girder_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderSpallingRemarks).HasColumnName("Girder_SpallingRemarks");

                entity.Property(e => e.GirderSpallingSeverity)
                    .HasColumnName("Girder_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainCondition)
                    .HasColumnName("Girder_StainCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.GirderStainExtend)
                    .HasColumnName("Girder_StainExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRating)
                    .HasColumnName("Girder_StainRating")
                    .HasMaxLength(5);

                entity.Property(e => e.GirderStainRemarks).HasColumnName("Girder_StainRemarks");

                entity.Property(e => e.GirderStainSeverity)
                    .HasColumnName("Girder_StainSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentCondition)
                    .HasColumnName("Joint_AlignmentCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointAlignmentExtend)
                    .HasColumnName("Joint_AlignmentExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRating)
                    .HasColumnName("Joint_AlignmentRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointAlignmentRemarks).HasColumnName("Joint_AlignmentRemarks");

                entity.Property(e => e.JointAlignmentSeverity)
                    .HasColumnName("Joint_AlignmentSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksCondition)
                    .HasColumnName("Joint_CracksCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointCracksExtend)
                    .HasColumnName("Joint_CracksExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRating)
                    .HasColumnName("Joint_CracksRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointCracksRemarks).HasColumnName("Joint_CracksRemarks");

                entity.Property(e => e.JointCracksSeverity)
                    .HasColumnName("Joint_CracksSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityCondition)
                    .HasColumnName("Joint_FixityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointFixityExtend)
                    .HasColumnName("Joint_FixityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRating)
                    .HasColumnName("Joint_FixityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointFixityRemarks).HasColumnName("Joint_FixityRemarks");

                entity.Property(e => e.JointFixitySeverity)
                    .HasColumnName("Joint_FixitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageCondition)
                    .HasColumnName("Joint_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.JointLeakageExtend)
                    .HasColumnName("Joint_LeakageExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRating)
                    .HasColumnName("Joint_LeakageRating")
                    .HasMaxLength(5);

                entity.Property(e => e.JointLeakageRemarks).HasColumnName("Joint_LeakageRemarks");

                entity.Property(e => e.JointLeakageSeverity)
                    .HasColumnName("Joint_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.JointOtherRemarks).HasColumnName("Joint_OtherRemarks");

                entity.Property(e => e.JointOverallRating)
                    .HasColumnName("Joint_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionCondition)
                    .HasColumnName("Parapet_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCorrosionExtend)
                    .HasColumnName("Parapet_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRating)
                    .HasColumnName("Parapet_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCorrosionRemarks).HasColumnName("Parapet_CorrosionRemarks");

                entity.Property(e => e.ParapetCorrosionSeverity)
                    .HasColumnName("Parapet_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingCondition)
                    .HasColumnName("Parapet_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetCrackingExtend)
                    .HasColumnName("Parapet_CrackingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRating)
                    .HasColumnName("Parapet_CrackingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetCrackingRemarks).HasColumnName("Parapet_CrackingRemarks");

                entity.Property(e => e.ParapetCrackingSeverity)
                    .HasColumnName("Parapet_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactCondition)
                    .HasColumnName("Parapet_ImpactCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetImpactExtend)
                    .HasColumnName("Parapet_ImpactExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRating)
                    .HasColumnName("Parapet_ImpactRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetImpactRemarks).HasColumnName("Parapet_ImpactRemarks");

                entity.Property(e => e.ParapetImpactSeverity)
                    .HasColumnName("Parapet_ImpactSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetOtherRemarks).HasColumnName("Parapet_OtherRemarks");

                entity.Property(e => e.ParapetOverallRating)
                    .HasColumnName("Parapet_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingCondition)
                    .HasColumnName("Parapet_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetSpallingExtend)
                    .HasColumnName("Parapet_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRating)
                    .HasColumnName("Parapet_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetSpallingRemarks).HasColumnName("Parapet_SpallingRemarks");

                entity.Property(e => e.ParapetSpallingSeverity)
                    .HasColumnName("Parapet_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityCondition)
                    .HasColumnName("Parapet_StabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ParapetStabilityExtend)
                    .HasColumnName("Parapet_StabilityExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRating)
                    .HasColumnName("Parapet_StabilityRating")
                    .HasMaxLength(5);

                entity.Property(e => e.ParapetStabilityRemarks).HasColumnName("Parapet_StabilityRemarks");

                entity.Property(e => e.ParapetStabilitySeverity)
                    .HasColumnName("Parapet_StabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.PierCorrosionCondition)
                    .HasColumnName("Pier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCorrosionExtend)
                    .HasColumnName("Pier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRating)
                    .HasColumnName("Pier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCorrosionRemarks).HasColumnName("Pier_CorrosionRemarks");

                entity.Property(e => e.PierCorrosionSeverity)
                    .HasColumnName("Pier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackCondition)
                    .HasColumnName("Pier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierCrackExtend)
                    .HasColumnName("Pier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRating)
                    .HasColumnName("Pier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierCrackRemarks).HasColumnName("Pier_CrackRemarks");

                entity.Property(e => e.PierCrackSeverity)
                    .HasColumnName("Pier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeCondition)
                    .HasColumnName("Pier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDegradeExtend)
                    .HasColumnName("Pier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRating)
                    .HasColumnName("Pier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDegradeRemarks).HasColumnName("Pier_DegradeRemarks");

                entity.Property(e => e.PierDegradeSeverity)
                    .HasColumnName("Pier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementCondition)
                    .HasColumnName("Pier_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierDisplacementExtend)
                    .HasColumnName("Pier_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRating)
                    .HasColumnName("Pier_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierDisplacementRemarks).HasColumnName("Pier_DisplacementRemarks");

                entity.Property(e => e.PierDisplacementSeverity)
                    .HasColumnName("Pier_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionCondition)
                    .HasColumnName("PierFd_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCorrosionExtend)
                    .HasColumnName("PierFd_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRating)
                    .HasColumnName("PierFd_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCorrosionRemarks).HasColumnName("PierFd_CorrosionRemarks");

                entity.Property(e => e.PierFdCorrosionSeverity)
                    .HasColumnName("PierFd_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackCondition)
                    .HasColumnName("PierFd_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdCrackExtend)
                    .HasColumnName("PierFd_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRating)
                    .HasColumnName("PierFd_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdCrackRemarks).HasColumnName("PierFd_CrackRemarks");

                entity.Property(e => e.PierFdCrackSeverity)
                    .HasColumnName("PierFd_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeCondition)
                    .HasColumnName("PierFd_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDegradeExtend)
                    .HasColumnName("PierFd_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRating)
                    .HasColumnName("PierFd_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDegradeRemarks).HasColumnName("PierFd_DegradeRemarks");

                entity.Property(e => e.PierFdDegradeSeverity)
                    .HasColumnName("PierFd_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementCondition)
                    .HasColumnName("PierFd_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdDisplacementExtend)
                    .HasColumnName("PierFd_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRating)
                    .HasColumnName("PierFd_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdDisplacementRemarks).HasColumnName("PierFd_DisplacementRemarks");

                entity.Property(e => e.PierFdDisplacementSeverity)
                    .HasColumnName("PierFd_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdOtherRemarks).HasColumnName("PierFd_OtherRemarks");

                entity.Property(e => e.PierFdOverallRating)
                    .HasColumnName("PierFd_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilCondition)
                    .HasColumnName("PierFd_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSoilExtend)
                    .HasColumnName("PierFd_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRating)
                    .HasColumnName("PierFd_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSoilRemarks).HasColumnName("PierFd_SoilRemarks");

                entity.Property(e => e.PierFdSoilSeverity)
                    .HasColumnName("PierFd_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingCondition)
                    .HasColumnName("PierFd_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierFdSpallingExtend)
                    .HasColumnName("PierFd_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRating)
                    .HasColumnName("PierFd_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierFdSpallingRemarks).HasColumnName("PierFd_SpallingRemarks");

                entity.Property(e => e.PierFdSpallingSeverity)
                    .HasColumnName("PierFd_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PierOtherRemarks).HasColumnName("Pier_OtherRemarks");

                entity.Property(e => e.PierOverallRating)
                    .HasColumnName("Pier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingCondition)
                    .HasColumnName("Pier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PierSpallingExtend)
                    .HasColumnName("Pier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRating)
                    .HasColumnName("Pier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PierSpallingRemarks).HasColumnName("Pier_SpallingRemarks");

                entity.Property(e => e.PierSpallingSeverity)
                    .HasColumnName("Pier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionCondition)
                    .HasColumnName("Pilecap_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCorrosionExtend)
                    .HasColumnName("Pilecap_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRating)
                    .HasColumnName("Pilecap_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCorrosionRemarks).HasColumnName("Pilecap_CorrosionRemarks");

                entity.Property(e => e.PilecapCorrosionSeverity)
                    .HasColumnName("Pilecap_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackCondition)
                    .HasColumnName("Pilecap_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapCrackExtend)
                    .HasColumnName("Pilecap_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRating)
                    .HasColumnName("Pilecap_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapCrackRemarks).HasColumnName("Pilecap_CrackRemarks");

                entity.Property(e => e.PilecapCrackSeverity)
                    .HasColumnName("Pilecap_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeCondition)
                    .HasColumnName("Pilecap_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDegradeExtend)
                    .HasColumnName("Pilecap_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRating)
                    .HasColumnName("Pilecap_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDegradeRemarks).HasColumnName("Pilecap_DegradeRemarks");

                entity.Property(e => e.PilecapDegradeSeverity)
                    .HasColumnName("Pilecap_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementCondition)
                    .HasColumnName("Pilecap_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapDisplacementExtend)
                    .HasColumnName("Pilecap_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRating)
                    .HasColumnName("Pilecap_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapDisplacementRemarks).HasColumnName("Pilecap_DisplacementRemarks");

                entity.Property(e => e.PilecapDisplacementSeverity)
                    .HasColumnName("Pilecap_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapOtherRemarks).HasColumnName("Pilecap_OtherRemarks");

                entity.Property(e => e.PilecapOverallRating)
                    .HasColumnName("Pilecap_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilCondition)
                    .HasColumnName("Pilecap_SoilCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSoilExtend)
                    .HasColumnName("Pilecap_SoilExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRating)
                    .HasColumnName("Pilecap_SoilRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSoilRemarks).HasColumnName("Pilecap_SoilRemarks");

                entity.Property(e => e.PilecapSoilSeverity)
                    .HasColumnName("Pilecap_SoilSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingCondition)
                    .HasColumnName("Pilecap_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.PilecapSpallingExtend)
                    .HasColumnName("Pilecap_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRating)
                    .HasColumnName("Pilecap_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.PilecapSpallingRemarks).HasColumnName("Pilecap_SpallingRemarks");

                entity.Property(e => e.PilecapSpallingSeverity)
                    .HasColumnName("Pilecap_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RiverPierCorrosionCondition)
                    .HasColumnName("RiverPier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCorrosionExtend)
                    .HasColumnName("RiverPier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRating)
                    .HasColumnName("RiverPier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCorrosionRemarks).HasColumnName("RiverPier_CorrosionRemarks");

                entity.Property(e => e.RiverPierCorrosionSeverity)
                    .HasColumnName("RiverPier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackCondition)
                    .HasColumnName("RiverPier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierCrackExtend)
                    .HasColumnName("RiverPier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRating)
                    .HasColumnName("RiverPier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierCrackRemarks).HasColumnName("RiverPier_CrackRemarks");

                entity.Property(e => e.RiverPierCrackSeverity)
                    .HasColumnName("RiverPier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisCondition)
                    .HasColumnName("RiverPier_DebrisCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDebrisExtend)
                    .HasColumnName("RiverPier_DebrisExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRating)
                    .HasColumnName("RiverPier_DebrisRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDebrisRemarks).HasColumnName("RiverPier_DebrisRemarks");

                entity.Property(e => e.RiverPierDebrisSeverity)
                    .HasColumnName("RiverPier_DebrisSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeCondition)
                    .HasColumnName("RiverPier_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierDegradeExtend)
                    .HasColumnName("RiverPier_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRating)
                    .HasColumnName("RiverPier_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierDegradeRemarks).HasColumnName("RiverPier_DegradeRemarks");

                entity.Property(e => e.RiverPierDegradeSeverity)
                    .HasColumnName("RiverPier_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierOtherRemarks).HasColumnName("RiverPier_OtherRemarks");

                entity.Property(e => e.RiverPierOverallRating)
                    .HasColumnName("RiverPier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringCondition)
                    .HasColumnName("RiverPier_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierScouringExtend)
                    .HasColumnName("RiverPier_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRating)
                    .HasColumnName("RiverPier_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierScouringRemarks).HasColumnName("RiverPier_ScouringRemarks");

                entity.Property(e => e.RiverPierScouringSeverity)
                    .HasColumnName("RiverPier_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingCondition)
                    .HasColumnName("RiverPier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.RiverPierSpallingExtend)
                    .HasColumnName("RiverPier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRating)
                    .HasColumnName("RiverPier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.RiverPierSpallingRemarks).HasColumnName("RiverPier_SpallingRemarks");

                entity.Property(e => e.RiverPierSpallingSeverity)
                    .HasColumnName("RiverPier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SlopeDisintegrateCondition)
                    .HasColumnName("Slope_DisintegrateCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeDisintegrateExtend)
                    .HasColumnName("Slope_DisintegrateExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRating)
                    .HasColumnName("Slope_DisintegrateRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeDisintegrateRemarks).HasColumnName("Slope_DisintegrateRemarks");

                entity.Property(e => e.SlopeDisintegrateSeverity)
                    .HasColumnName("Slope_DisintegrateSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionCondition)
                    .HasColumnName("Slope_ErosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeErosionExtend)
                    .HasColumnName("Slope_ErosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRating)
                    .HasColumnName("Slope_ErosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeErosionRemarks).HasColumnName("Slope_ErosionRemarks");

                entity.Property(e => e.SlopeErosionSeverity)
                    .HasColumnName("Slope_ErosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeOtherRemarks).HasColumnName("Slope_OtherRemarks");

                entity.Property(e => e.SlopeOverallRating)
                    .HasColumnName("Slope_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionCondition)
                    .HasColumnName("SlopePier_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCorrosionExtend)
                    .HasColumnName("SlopePier_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRating)
                    .HasColumnName("SlopePier_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCorrosionRemarks).HasColumnName("SlopePier_CorrosionRemarks");

                entity.Property(e => e.SlopePierCorrosionSeverity)
                    .HasColumnName("SlopePier_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackCondition)
                    .HasColumnName("SlopePier_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierCrackExtend)
                    .HasColumnName("SlopePier_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRating)
                    .HasColumnName("SlopePier_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierCrackRemarks).HasColumnName("SlopePier_CrackRemarks");

                entity.Property(e => e.SlopePierCrackSeverity)
                    .HasColumnName("SlopePier_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierOtherRemarks).HasColumnName("SlopePier_OtherRemarks");

                entity.Property(e => e.SlopePierOverallRating)
                    .HasColumnName("SlopePier_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingCondition)
                    .HasColumnName("SlopePier_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopePierSpallingExtend)
                    .HasColumnName("SlopePier_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRating)
                    .HasColumnName("SlopePier_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopePierSpallingRemarks).HasColumnName("SlopePier_SpallingRemarks");

                entity.Property(e => e.SlopePierSpallingSeverity)
                    .HasColumnName("SlopePier_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringCondition)
                    .HasColumnName("Slope_ScouringCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SlopeScouringExtend)
                    .HasColumnName("Slope_ScouringExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRating)
                    .HasColumnName("Slope_ScouringRating")
                    .HasMaxLength(5);

                entity.Property(e => e.SlopeScouringRemarks).HasColumnName("Slope_ScouringRemarks");

                entity.Property(e => e.SlopeScouringSeverity)
                    .HasColumnName("Slope_ScouringSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.UtilitiesCondition).HasColumnName("Utilities_Condition");

                entity.Property(e => e.UtilitiesRemarks).HasColumnName("Utilities_Remarks");

                entity.Property(e => e.WingwallCorrosionCondition)
                    .HasColumnName("Wingwall_CorrosionCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCorrosionExtend)
                    .HasColumnName("Wingwall_CorrosionExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRating)
                    .HasColumnName("Wingwall_CorrosionRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCorrosionRemarks).HasColumnName("Wingwall_CorrosionRemarks");

                entity.Property(e => e.WingwallCorrosionSeverity)
                    .HasColumnName("Wingwall_CorrosionSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackCondition)
                    .HasColumnName("Wingwall_CrackCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallCrackExtend)
                    .HasColumnName("Wingwall_CrackExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRating)
                    .HasColumnName("Wingwall_CrackRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallCrackRemarks).HasColumnName("Wingwall_CrackRemarks");

                entity.Property(e => e.WingwallCrackSeverity)
                    .HasColumnName("Wingwall_CrackSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeCondition)
                    .HasColumnName("Wingwall_DegradeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDegradeExtend)
                    .HasColumnName("Wingwall_DegradeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRating)
                    .HasColumnName("Wingwall_DegradeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDegradeRemarks).HasColumnName("Wingwall_DegradeRemarks");

                entity.Property(e => e.WingwallDegradeSeverity)
                    .HasColumnName("Wingwall_DegradeSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementCondition)
                    .HasColumnName("Wingwall_DisplacementCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallDisplacementExtend)
                    .HasColumnName("Wingwall_DisplacementExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRating)
                    .HasColumnName("Wingwall_DisplacementRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallDisplacementRemarks).HasColumnName("Wingwall_DisplacementRemarks");

                entity.Property(e => e.WingwallDisplacementSeverity)
                    .HasColumnName("Wingwall_DisplacementSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallOtherRemarks).HasColumnName("Wingwall_OtherRemarks");

                entity.Property(e => e.WingwallOverallRating)
                    .HasColumnName("Wingwall_OverallRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingCondition)
                    .HasColumnName("Wingwall_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallSpallingExtend)
                    .HasColumnName("Wingwall_SpallingExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRating)
                    .HasColumnName("Wingwall_SpallingRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallSpallingRemarks).HasColumnName("Wingwall_SpallingRemarks");

                entity.Property(e => e.WingwallSpallingSeverity)
                    .HasColumnName("Wingwall_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeCondition)
                    .HasColumnName("Wingwall_WeepholeCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.WingwallWeepholeExtend)
                    .HasColumnName("Wingwall_WeepholeExtend")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRating)
                    .HasColumnName("Wingwall_WeepholeRating")
                    .HasMaxLength(5);

                entity.Property(e => e.WingwallWeepholeRemarks).HasColumnName("Wingwall_WeepholeRemarks");

                entity.Property(e => e.WingwallWeepholeSeverity)
                    .HasColumnName("Wingwall_WeepholeSeverity")
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<PiResultCulvert>(entity =>
            {
                entity.HasKey(e => e.PiSchedulePk);

                entity.Property(e => e.PiSchedulePk)
                    .HasColumnName("PiSchedulePK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BarrelAbrasion)
                    .HasColumnName("Barrel_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelAbrasionRem).HasColumnName("Barrel_AbrasionRem");

                entity.Property(e => e.BarrelCorosion)
                    .HasColumnName("Barrel_Corosion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCorosionRem).HasColumnName("Barrel_CorosionRem");

                entity.Property(e => e.BarrelCracking)
                    .HasColumnName("Barrel_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCrackingRem).HasColumnName("Barrel_CrackingRem");

                entity.Property(e => e.BarrelSettlement)
                    .HasColumnName("Barrel_Settlement")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelSettlementRem).HasColumnName("Barrel_SettlementRem");

                entity.Property(e => e.BasicCellNo)
                    .HasColumnName("Basic_CellNo")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicCellNoPhoto)
                    .HasColumnName("Basic_CellNoPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInlet)
                    .HasColumnName("Basic_Inlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInletPhoto)
                    .HasColumnName("Basic_InletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutlet)
                    .HasColumnName("Basic_Outlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutletPhoto)
                    .HasColumnName("Basic_OutletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSize)
                    .HasColumnName("Basic_Size")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSizePhoto)
                    .HasColumnName("Basic_SizePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicType)
                    .HasColumnName("Basic_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicTypePhoto)
                    .HasColumnName("Basic_TypePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureAccessibilityDown)
                    .HasColumnName("Feature_AccessibilityDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureAccessibilityUp)
                    .HasColumnName("Feature_AccessibilityUp")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureLanduseDown)
                    .HasColumnName("Feature_LanduseDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureLanduseUp)
                    .HasColumnName("Feature_LanduseUp")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoCulvertMarker)
                    .HasColumnName("GenInfo_CulvertMarker")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoIf3rdParty)
                    .HasColumnName("GenInfo_If3rdParty")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPurpose)
                    .HasColumnName("GenInfo_Purpose")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoWeather)
                    .HasColumnName("GenInfo_Weather")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasion)
                    .HasColumnName("Hdpe_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasionRem).HasColumnName("Hdpe_AbrasionRem");

                entity.Property(e => e.HdpeBolts)
                    .HasColumnName("Hdpe_Bolts")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeBoltsRem).HasColumnName("Hdpe_BoltsRem");

                entity.Property(e => e.HdpeCorrosion)
                    .HasColumnName("Hdpe_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeCorrosionRem).HasColumnName("Hdpe_CorrosionRem");

                entity.Property(e => e.HdpePaint)
                    .HasColumnName("Hdpe_Paint")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpePaintRem).HasColumnName("Hdpe_PaintRem");

                entity.Property(e => e.HdpeShape)
                    .HasColumnName("Hdpe_Shape")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeShapeRem).HasColumnName("Hdpe_ShapeRem");

                entity.Property(e => e.HydraulicFloodIn)
                    .HasColumnName("Hydraulic_FloodIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicFloodOut)
                    .HasColumnName("Hydraulic_FloodOut")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingIn)
                    .HasColumnName("Hydraulic_PondingIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingOut)
                    .HasColumnName("Hydraulic_PondingOut")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCracking)
                    .HasColumnName("InApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCrackingRem).HasColumnName("InApron_CrackingRem");

                entity.Property(e => e.InApronGabions)
                    .HasColumnName("InApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronGabionsRem).HasColumnName("InApron_GabionsRem");

                entity.Property(e => e.InApronRipRap)
                    .HasColumnName("InApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronRipRapRem).HasColumnName("InApron_RipRapRem");

                entity.Property(e => e.InEmbankCondition)
                    .HasColumnName("InEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankConditionRem).HasColumnName("InEmbank_ConditionRem");

                entity.Property(e => e.InEmbankDistingration)
                    .HasColumnName("InEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDistingrationRem).HasColumnName("InEmbank_DistingrationRem");

                entity.Property(e => e.InEmbankDrain)
                    .HasColumnName("InEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDrainRem).HasColumnName("InEmbank_DrainRem");

                entity.Property(e => e.InHeadwallCorrosion)
                    .HasColumnName("InHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCorrosionRem).HasColumnName("InHeadwall_CorrosionRem");

                entity.Property(e => e.InHeadwallCracking)
                    .HasColumnName("InHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCrackingRem).HasColumnName("InHeadwall_CrackingRem");

                entity.Property(e => e.InHeadwallDeterioration)
                    .HasColumnName("InHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallDeteriorationRem).HasColumnName("InHeadwall_DeteriorationRem");

                entity.Property(e => e.InHeadwallMovement)
                    .HasColumnName("InHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallMovementRem).HasColumnName("InHeadwall_MovementRem");

                entity.Property(e => e.OutApronCracking)
                    .HasColumnName("OutApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronCrackingRem).HasColumnName("OutApron_CrackingRem");

                entity.Property(e => e.OutApronGabions)
                    .HasColumnName("OutApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronGabionsRem).HasColumnName("OutApron_GabionsRem");

                entity.Property(e => e.OutApronRipRap)
                    .HasColumnName("OutApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronRipRapRem).HasColumnName("OutApron_RipRapRem");

                entity.Property(e => e.OutEmbankCondition)
                    .HasColumnName("OutEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankConditionRem).HasColumnName("OutEmbank_ConditionRem");

                entity.Property(e => e.OutEmbankDistingration)
                    .HasColumnName("OutEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDistingrationRem).HasColumnName("OutEmbank_DistingrationRem");

                entity.Property(e => e.OutEmbankDrain)
                    .HasColumnName("OutEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDrainRem).HasColumnName("OutEmbank_DrainRem");

                entity.Property(e => e.OutHeadwallCorrosion)
                    .HasColumnName("OutHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCorrosionRem).HasColumnName("OutHeadwall_CorrosionRem");

                entity.Property(e => e.OutHeadwallCracking)
                    .HasColumnName("OutHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCrackingRem).HasColumnName("OutHeadwall_CrackingRem");

                entity.Property(e => e.OutHeadwallDeterioration)
                    .HasColumnName("OutHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallDeteriorationRem).HasColumnName("OutHeadwall_DeteriorationRem");

                entity.Property(e => e.OutHeadwallMovement)
                    .HasColumnName("OutHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallMovementRem).HasColumnName("OutHeadwall_MovementRem");

                entity.Property(e => e.ScouringIn)
                    .HasColumnName("Scouring_In")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringOut)
                    .HasColumnName("Scouring_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.SiltationIn)
                    .HasColumnName("Siltation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.SiltationOut)
                    .HasColumnName("Siltation_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryComments).HasColumnName("Summary_Comments");

                entity.Property(e => e.SummaryOverallCondition)
                    .HasColumnName("Summary_OverallCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryOverallService)
                    .HasColumnName("Summary_OverallService")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryPriorityRating)
                    .HasColumnName("Summary_PriorityRating")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamage)
                    .HasColumnName("Vbc_Damage")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamageRem).HasColumnName("Vbc_DamageRem");

                entity.Property(e => e.VegetationIn)
                    .HasColumnName("Vegetation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetationOut)
                    .HasColumnName("Vegetation_Out")
                    .HasMaxLength(50);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithOne(p => p.PiResultCulvert)
                    .HasForeignKey<PiResultCulvert>(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultCulvert_PiSchedule");
            });

            modelBuilder.Entity<PiResultCulvertFurtherInvestigation>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultCulvert_FurtherInvestigation");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.FiMajorDefect)
                    .HasColumnName("FI_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.FiRecommendedAction)
                    .HasColumnName("FI_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultCulvertFurtherInvestigation)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultCulvert_FurtherInvestigation_PiResultCulvert");
            });

            modelBuilder.Entity<PiResultCulvertPhoto>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultCulvert_Photo");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.PhoName)
                    .HasColumnName("Pho_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoPhoto)
                    .HasColumnName("Pho_Photo")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoRemark)
                    .HasColumnName("Pho_Remark")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultCulvertPhoto)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultCulvert_Photo_PiResultCulvert");
            });

            modelBuilder.Entity<PiResultCulvertRemedialWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultCulvert_RemedialWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RwMajorDefect)
                    .HasColumnName("RW_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RwRecommendedAction)
                    .HasColumnName("RW_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultCulvertRemedialWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultCulvert_RemedialWork_PiResultCulvert");
            });

            modelBuilder.Entity<PiResultCulvertRoutineWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultCulvert_RoutineWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RmMajorDefect)
                    .HasColumnName("RM_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RmRecommendedAction)
                    .HasColumnName("RM_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultCulvertRoutineWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultCulvert_RoutineWork_PiResultCulvert");
            });

            modelBuilder.Entity<PiResultCulvertView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PiResultCulvertView");

                entity.Property(e => e.BarrelAbrasion)
                    .HasColumnName("Barrel_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelAbrasionRem).HasColumnName("Barrel_AbrasionRem");

                entity.Property(e => e.BarrelCorosion)
                    .HasColumnName("Barrel_Corosion")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCorosionRem).HasColumnName("Barrel_CorosionRem");

                entity.Property(e => e.BarrelCracking)
                    .HasColumnName("Barrel_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelCrackingRem).HasColumnName("Barrel_CrackingRem");

                entity.Property(e => e.BarrelSettlement)
                    .HasColumnName("Barrel_Settlement")
                    .HasMaxLength(50);

                entity.Property(e => e.BarrelSettlementRem).HasColumnName("Barrel_SettlementRem");

                entity.Property(e => e.BasicCellNo)
                    .HasColumnName("Basic_CellNo")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicCellNoPhoto)
                    .HasColumnName("Basic_CellNoPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInlet)
                    .HasColumnName("Basic_Inlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicInletPhoto)
                    .HasColumnName("Basic_InletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutlet)
                    .HasColumnName("Basic_Outlet")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicOutletPhoto)
                    .HasColumnName("Basic_OutletPhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSize)
                    .HasColumnName("Basic_Size")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicSizePhoto)
                    .HasColumnName("Basic_SizePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicType)
                    .HasColumnName("Basic_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.BasicTypePhoto)
                    .HasColumnName("Basic_TypePhoto")
                    .HasMaxLength(50);

                entity.Property(e => e.CulvertKmlocation).HasColumnName("CulvertKMLocation");

                entity.Property(e => e.FeatureAccessibilityDown)
                    .HasColumnName("Feature_AccessibilityDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureAccessibilityUp)
                    .HasColumnName("Feature_AccessibilityUp")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureBound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeatureLanduseDown)
                    .HasColumnName("Feature_LanduseDown")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureLanduseUp)
                    .HasColumnName("Feature_LanduseUp")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureRoute)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GenInfoCulvertMarker)
                    .HasColumnName("GenInfo_CulvertMarker")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoIf3rdParty)
                    .HasColumnName("GenInfo_If3rdParty")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPurpose)
                    .HasColumnName("GenInfo_Purpose")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoWeather)
                    .HasColumnName("GenInfo_Weather")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasion)
                    .HasColumnName("Hdpe_Abrasion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeAbrasionRem).HasColumnName("Hdpe_AbrasionRem");

                entity.Property(e => e.HdpeBolts)
                    .HasColumnName("Hdpe_Bolts")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeBoltsRem).HasColumnName("Hdpe_BoltsRem");

                entity.Property(e => e.HdpeCorrosion)
                    .HasColumnName("Hdpe_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeCorrosionRem).HasColumnName("Hdpe_CorrosionRem");

                entity.Property(e => e.HdpePaint)
                    .HasColumnName("Hdpe_Paint")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpePaintRem).HasColumnName("Hdpe_PaintRem");

                entity.Property(e => e.HdpeShape)
                    .HasColumnName("Hdpe_Shape")
                    .HasMaxLength(50);

                entity.Property(e => e.HdpeShapeRem).HasColumnName("Hdpe_ShapeRem");

                entity.Property(e => e.HydraulicFloodIn)
                    .HasColumnName("Hydraulic_FloodIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicFloodOut)
                    .HasColumnName("Hydraulic_FloodOut")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingIn)
                    .HasColumnName("Hydraulic_PondingIn")
                    .HasMaxLength(50);

                entity.Property(e => e.HydraulicPondingOut)
                    .HasColumnName("Hydraulic_PondingOut")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCracking)
                    .HasColumnName("InApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronCrackingRem).HasColumnName("InApron_CrackingRem");

                entity.Property(e => e.InApronGabions)
                    .HasColumnName("InApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronGabionsRem).HasColumnName("InApron_GabionsRem");

                entity.Property(e => e.InApronRipRap)
                    .HasColumnName("InApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.InApronRipRapRem).HasColumnName("InApron_RipRapRem");

                entity.Property(e => e.InEmbankCondition)
                    .HasColumnName("InEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankConditionRem).HasColumnName("InEmbank_ConditionRem");

                entity.Property(e => e.InEmbankDistingration)
                    .HasColumnName("InEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDistingrationRem).HasColumnName("InEmbank_DistingrationRem");

                entity.Property(e => e.InEmbankDrain)
                    .HasColumnName("InEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.InEmbankDrainRem).HasColumnName("InEmbank_DrainRem");

                entity.Property(e => e.InHeadwallCorrosion)
                    .HasColumnName("InHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCorrosionRem).HasColumnName("InHeadwall_CorrosionRem");

                entity.Property(e => e.InHeadwallCracking)
                    .HasColumnName("InHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallCrackingRem).HasColumnName("InHeadwall_CrackingRem");

                entity.Property(e => e.InHeadwallDeterioration)
                    .HasColumnName("InHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallDeteriorationRem).HasColumnName("InHeadwall_DeteriorationRem");

                entity.Property(e => e.InHeadwallMovement)
                    .HasColumnName("InHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.InHeadwallMovementRem).HasColumnName("InHeadwall_MovementRem");

                entity.Property(e => e.OutApronCracking)
                    .HasColumnName("OutApron_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronCrackingRem).HasColumnName("OutApron_CrackingRem");

                entity.Property(e => e.OutApronGabions)
                    .HasColumnName("OutApron_Gabions")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronGabionsRem).HasColumnName("OutApron_GabionsRem");

                entity.Property(e => e.OutApronRipRap)
                    .HasColumnName("OutApron_RipRap")
                    .HasMaxLength(50);

                entity.Property(e => e.OutApronRipRapRem).HasColumnName("OutApron_RipRapRem");

                entity.Property(e => e.OutEmbankCondition)
                    .HasColumnName("OutEmbank_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankConditionRem).HasColumnName("OutEmbank_ConditionRem");

                entity.Property(e => e.OutEmbankDistingration)
                    .HasColumnName("OutEmbank_Distingration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDistingrationRem).HasColumnName("OutEmbank_DistingrationRem");

                entity.Property(e => e.OutEmbankDrain)
                    .HasColumnName("OutEmbank_Drain")
                    .HasMaxLength(50);

                entity.Property(e => e.OutEmbankDrainRem).HasColumnName("OutEmbank_DrainRem");

                entity.Property(e => e.OutHeadwallCorrosion)
                    .HasColumnName("OutHeadwall_Corrosion")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCorrosionRem).HasColumnName("OutHeadwall_CorrosionRem");

                entity.Property(e => e.OutHeadwallCracking)
                    .HasColumnName("OutHeadwall_Cracking")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallCrackingRem).HasColumnName("OutHeadwall_CrackingRem");

                entity.Property(e => e.OutHeadwallDeterioration)
                    .HasColumnName("OutHeadwall_Deterioration")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallDeteriorationRem).HasColumnName("OutHeadwall_DeteriorationRem");

                entity.Property(e => e.OutHeadwallMovement)
                    .HasColumnName("OutHeadwall_Movement")
                    .HasMaxLength(50);

                entity.Property(e => e.OutHeadwallMovementRem).HasColumnName("OutHeadwall_MovementRem");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ScouringIn)
                    .HasColumnName("Scouring_In")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringOut)
                    .HasColumnName("Scouring_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SiltationIn)
                    .HasColumnName("Siltation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.SiltationOut)
                    .HasColumnName("Siltation_Out")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryComments).HasColumnName("Summary_Comments");

                entity.Property(e => e.SummaryOverallCondition)
                    .HasColumnName("Summary_OverallCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryOverallService)
                    .HasColumnName("Summary_OverallService")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryPriorityRating)
                    .HasColumnName("Summary_PriorityRating")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamage)
                    .HasColumnName("Vbc_Damage")
                    .HasMaxLength(50);

                entity.Property(e => e.VbcDamageRem).HasColumnName("Vbc_DamageRem");

                entity.Property(e => e.VegetationIn)
                    .HasColumnName("Vegetation_In")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetationOut)
                    .HasColumnName("Vegetation_Out")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PiResultSlope>(entity =>
            {
                entity.HasKey(e => e.PiSchedulePk);

                entity.Property(e => e.PiSchedulePk)
                    .HasColumnName("PiSchedulePK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AboveDevCondition)
                    .HasColumnName("AboveDev_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.AboveDevIsRelevant).HasColumnName("AboveDev_IsRelevant");

                entity.Property(e => e.BermDrainsIsRelevant).HasColumnName("BermDrains_IsRelevant");

                entity.Property(e => e.BermDrainsServiceabilityStatus)
                    .HasColumnName("BermDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsStructuralDefect)
                    .HasColumnName("BermDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsWorkDetails).HasColumnName("BermDrains_WorkDetails");

                entity.Property(e => e.BermDrainsWorkRequired).HasColumnName("BermDrains_WorkRequired");

                entity.Property(e => e.CatchPitsIsRelevant).HasColumnName("CatchPits_IsRelevant");

                entity.Property(e => e.CatchPitsServiceabilityStatus)
                    .HasColumnName("CatchPits_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsStructuralDefect)
                    .HasColumnName("CatchPits_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsWorkDetails).HasColumnName("CatchPits_WorkDetails");

                entity.Property(e => e.CatchPitsWorkRequired).HasColumnName("CatchPits_WorkRequired");

                entity.Property(e => e.CatchmentArea).HasMaxLength(50);

                entity.Property(e => e.ErosionCondition)
                    .HasColumnName("Erosion_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeAreaAffected).HasColumnName("ErosionDegree_AreaAffected");

                entity.Property(e => e.ErosionDegreeCondition)
                    .HasColumnName("ErosionDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeLocation)
                    .HasColumnName("ErosionDegree_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionIsRelevant).HasColumnName("Erosion_IsRelevant");

                entity.Property(e => e.ErosionWorkDetails).HasColumnName("Erosion_WorkDetails");

                entity.Property(e => e.ErosionWorkRequired).HasColumnName("Erosion_WorkRequired");

                entity.Property(e => e.ExistingStabilizingWorksCondition).HasMaxLength(50);

                entity.Property(e => e.ExistingWorksAnyExistingWorks).HasColumnName("ExistingWorks_AnyExistingWorks");

                entity.Property(e => e.ExistingWorksCondition)
                    .HasColumnName("ExistingWorks_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoAccessibility)
                    .HasColumnName("GenInfo_Accessibility")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoDiskNo)
                    .HasColumnName("GenInfo_DiskNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPhotoNo)
                    .HasColumnName("GenInfo_PhotoNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoSlopeOnBend)
                    .HasColumnName("GenInfo_SlopeOnBend")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GeneralDistressCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralDrainageCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralSurfaceCondition).HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityCondition)
                    .HasColumnName("GeoDiscontinuity_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityIsRelevant).HasColumnName("GeoDiscontinuity_IsRelevant");

                entity.Property(e => e.GeoDiscontinuityWorkDetails).HasColumnName("GeoDiscontinuity_WorkDetails");

                entity.Property(e => e.GeoDiscontinuityWorkRequired).HasColumnName("GeoDiscontinuity_WorkRequired");

                entity.Property(e => e.GeologicalAdversity)
                    .HasColumnName("Geological_Adversity")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalDiscontinuity).HasColumnName("Geological_Discontinuity");

                entity.Property(e => e.GeologicalLithology)
                    .HasColumnName("Geological_Lithology")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalMajorStructure)
                    .HasColumnName("Geological_MajorStructure")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalSoilRockInterface)
                    .HasColumnName("Geological_SoilRockInterface")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalWeathering)
                    .HasColumnName("Geological_Weathering")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverCondition)
                    .HasColumnName("HardCover_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverIsRelevant).HasColumnName("HardCover_IsRelevant");

                entity.Property(e => e.HardCoverLocation)
                    .HasColumnName("HardCover_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverPercentage).HasColumnName("HardCover_Percentage");

                entity.Property(e => e.HardCoverWorkDetails).HasColumnName("HardCover_WorkDetails");

                entity.Property(e => e.HardCoverWorkRequired).HasColumnName("HardCover_WorkRequired");

                entity.Property(e => e.HorizontalDrainsIsRelevant).HasColumnName("HorizontalDrains_IsRelevant");

                entity.Property(e => e.HorizontalDrainsServiceabilityStatus)
                    .HasColumnName("HorizontalDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsStructuralDefect)
                    .HasColumnName("HorizontalDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsWorkDetails).HasColumnName("HorizontalDrains_WorkDetails");

                entity.Property(e => e.HorizontalDrainsWorkRequired).HasColumnName("HorizontalDrains_WorkRequired");

                entity.Property(e => e.InstabilityDegreeCondition)
                    .HasColumnName("InstabilityDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignCondition)
                    .HasColumnName("InstabilitySign_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignIsRelevant).HasColumnName("InstabilitySign_IsRelevant");

                entity.Property(e => e.InstabilitySignWorkDetails).HasColumnName("InstabilitySign_WorkDetails");

                entity.Property(e => e.InstabilitySignWorkRequired).HasColumnName("InstabilitySign_WorkRequired");

                entity.Property(e => e.InterceptorDrainsIsRelevant).HasColumnName("InterceptorDrains_IsRelevant");

                entity.Property(e => e.InterceptorDrainsServiceabilityStatus)
                    .HasColumnName("InterceptorDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsStructuralDefect)
                    .HasColumnName("InterceptorDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsWorkDetails).HasColumnName("InterceptorDrains_WorkDetails");

                entity.Property(e => e.InterceptorDrainsWorkRequired).HasColumnName("InterceptorDrains_WorkRequired");

                entity.Property(e => e.LooseMaterialCondition)
                    .HasColumnName("LooseMaterial_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.LooseMaterialIsRelevant).HasColumnName("LooseMaterial_IsRelevant");

                entity.Property(e => e.LooseMaterialWorkDetails).HasColumnName("LooseMaterial_WorkDetails");

                entity.Property(e => e.LooseMaterialWorkRequired).HasColumnName("LooseMaterial_WorkRequired");

                entity.Property(e => e.OpenGapsCondition)
                    .HasColumnName("OpenGaps_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OpenGapsWorkDetails).HasColumnName("OpenGaps_WorkDetails");

                entity.Property(e => e.OpenGapsWorkRequired).HasColumnName("OpenGaps_WorkRequired");

                entity.Property(e => e.PreviousFailureIsRelevant).HasColumnName("PreviousFailure_IsRelevant");

                entity.Property(e => e.PreviousFailureLocation)
                    .HasColumnName("PreviousFailure_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.PreviousFailureRemedialWork)
                    .HasColumnName("PreviousFailure_RemedialWork")
                    .HasMaxLength(50);

                entity.Property(e => e.PriorityRatingCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A, B or C");

                entity.Property(e => e.RoadDistressCondition).HasMaxLength(50);

                entity.Property(e => e.RockDitchIsRelevant).HasColumnName("RockDitch_IsRelevant");

                entity.Property(e => e.RockDitchServiceabilityDepth).HasColumnName("RockDitch_Serviceability_Depth");

                entity.Property(e => e.RockDitchServiceabilityWidth).HasColumnName("RockDitch_Serviceability_Width");

                entity.Property(e => e.RockDitchStructuralDefect)
                    .HasColumnName("RockDitch_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.RockDitchWorkDetails).HasColumnName("RockDitch_WorkDetails");

                entity.Property(e => e.RockDitchWorkRequired).HasColumnName("RockDitch_WorkRequired");

                entity.Property(e => e.RockFallAnyVisualDefect).HasColumnName("RockFall_AnyVisualDefect");

                entity.Property(e => e.RockFallCondition)
                    .HasColumnName("RockFall_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallIsRelevant).HasColumnName("RockFall_IsRelevant");

                entity.Property(e => e.RockFallVisualCondition)
                    .HasColumnName("RockFall_VisualCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallWorkDetails).HasColumnName("RockFall_WorkDetails");

                entity.Property(e => e.RockFallWorkRequired).HasColumnName("RockFall_WorkRequired");

                entity.Property(e => e.ScalingIsRequired).HasColumnName("Scaling_IsRequired");

                entity.Property(e => e.ScalingLocation)
                    .HasColumnName("Scaling_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ScalingType)
                    .HasColumnName("Scaling_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringDrainsCondition)
                    .HasColumnName("ScouringDrains_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringDrainsWorkDetails).HasColumnName("ScouringDrains_WorkDetails");

                entity.Property(e => e.ScouringDrainsWorkRequired).HasColumnName("ScouringDrains_WorkRequired");

                entity.Property(e => e.SeepageCondition)
                    .HasColumnName("Seepage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageLocation)
                    .HasColumnName("Seepage_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageWorkDetails).HasColumnName("Seepage_WorkDetails");

                entity.Property(e => e.SeepageWorkRequired).HasColumnName("Seepage_WorkRequired");

                entity.Property(e => e.SevDefectCondition).HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsIsRelevant).HasColumnName("ShoulderDrains_IsRelevant");

                entity.Property(e => e.ShoulderDrainsServiceabilityStatus)
                    .HasColumnName("ShoulderDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsStructuralDefect)
                    .HasColumnName("ShoulderDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsWorkDetails).HasColumnName("ShoulderDrains_WorkDetails");

                entity.Property(e => e.ShoulderDrainsWorkRequired).HasColumnName("ShoulderDrains_WorkRequired");

                entity.Property(e => e.SketchPlan)
                    .HasColumnName("Sketch_Plan")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSection)
                    .HasColumnName("Sketch_Section")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSlope)
                    .HasColumnName("Sketch_Slope")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsIsRelevant).HasColumnName("SlopeDrains_IsRelevant");

                entity.Property(e => e.SlopeDrainsServiceabilityStatus)
                    .HasColumnName("SlopeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsStructuralDefect)
                    .HasColumnName("SlopeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsWorkDetails).HasColumnName("SlopeDrains_WorkDetails");

                entity.Property(e => e.SlopeDrainsWorkRequired).HasColumnName("SlopeDrains_WorkRequired");

                entity.Property(e => e.SlopeFailureCauseofFailure)
                    .HasColumnName("SlopeFailure_CauseofFailure")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureCondition)
                    .HasColumnName("SlopeFailure_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureHeight).HasColumnName("SlopeFailure_Height");

                entity.Property(e => e.SlopeFailureIsRelevant).HasColumnName("SlopeFailure_IsRelevant");

                entity.Property(e => e.SlopeFailureSlopeSurfaceNo)
                    .HasColumnName("SlopeFailure_SlopeSurfaceNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureWidth).HasColumnName("SlopeFailure_Width");

                entity.Property(e => e.SlopeFailureWorkDetails).HasColumnName("SlopeFailure_WorkDetails");

                entity.Property(e => e.SlopeFailureWorkRequired).HasColumnName("SlopeFailure_WorkRequired");

                entity.Property(e => e.StructureCondCondition)
                    .HasColumnName("StructureCond_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryOverall).HasColumnName("Summary_Overall");

                entity.Property(e => e.ToeDrainsIsRelevant).HasColumnName("ToeDrains_IsRelevant");

                entity.Property(e => e.ToeDrainsServiceabilityStatus)
                    .HasColumnName("ToeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsStructuralDefect)
                    .HasColumnName("ToeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsWorkDetails).HasColumnName("ToeDrains_WorkDetails");

                entity.Property(e => e.ToeDrainsWorkRequired).HasColumnName("ToeDrains_WorkRequired");

                entity.Property(e => e.VegCoverageCondition)
                    .HasColumnName("VegCoverage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegCoverageDueTo)
                    .HasColumnName("VegCoverage_DueTo")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceCondition)
                    .HasColumnName("VegetatedSurface_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceIsRelevant).HasColumnName("VegetatedSurface_IsRelevant");

                entity.Property(e => e.VegetatedSurfaceWorkDetails).HasColumnName("VegetatedSurface_WorkDetails");

                entity.Property(e => e.VegetatedSurfaceWorkRequired).HasColumnName("VegetatedSurface_WorkRequired");

                entity.Property(e => e.VisualDefectAnyVisualDefect).HasColumnName("VisualDefect_AnyVisualDefect");

                entity.Property(e => e.VisualDefectCondition)
                    .HasColumnName("VisualDefect_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VisualDefectWorkDetails).HasColumnName("VisualDefect_WorkDetails");

                entity.Property(e => e.VisualDefectWorkRequired).HasColumnName("VisualDefect_WorkRequired");

                entity.Property(e => e.WaterFlowEvidence)
                    .HasColumnName("WaterFlow_Evidence")
                    .HasMaxLength(50);

                entity.Property(e => e.WaterFlowIsRelevant).HasColumnName("WaterFlow_IsRelevant");

                entity.Property(e => e.WeepHolesRelevant).HasColumnName("WeepHoles_Relevant");

                entity.Property(e => e.WeepHolesServiceabilityStatus)
                    .HasColumnName("WeepHoles_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesStructuralDefect)
                    .HasColumnName("WeepHoles_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesWorkDetails).HasColumnName("WeepHoles_WorkDetails");

                entity.Property(e => e.WeepHolesWorkRequired).HasColumnName("WeepHoles_WorkRequired");

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithOne(p => p.PiResultSlope)
                    .HasForeignKey<PiResultSlope>(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultSlope_PiSchedule");
            });

            modelBuilder.Entity<PiResultSlopeFurtherInvestigation>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultSlope_FurtherInvestigation");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.FiMajorDefect)
                    .HasColumnName("FI_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.FiRecommendedAction)
                    .HasColumnName("FI_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultSlopeFurtherInvestigation)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultSlope_FurtherInvestigation_PiResultSlope");
            });

            modelBuilder.Entity<PiResultSlopePhoto>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultSlope_Photo");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.PhoName)
                    .HasColumnName("Pho_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoPhoto)
                    .HasColumnName("Pho_Photo")
                    .HasMaxLength(1000);

                entity.Property(e => e.PhoRemark)
                    .HasColumnName("Pho_Remark")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultSlopePhoto)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultSlope_Photo_PiResultSlope");
            });

            modelBuilder.Entity<PiResultSlopeRemedialWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultSlope_RemedialWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RwMajorDefect)
                    .HasColumnName("RW_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RwRecommendedAction)
                    .HasColumnName("RW_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultSlopeRemedialWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultSlope_RemedialWork_PiResultSlope");
            });

            modelBuilder.Entity<PiResultSlopeRoutineWork>(entity =>
            {
                entity.HasKey(e => new { e.PiSchedulePk, e.RecordIndex });

                entity.ToTable("PiResultSlope_RoutineWork");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.RmMajorDefect)
                    .HasColumnName("RM_MajorDefect")
                    .HasMaxLength(1000);

                entity.Property(e => e.RmRecommendedAction)
                    .HasColumnName("RM_RecommendedAction")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultSlopeRoutineWork)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultSlope_RoutineWork_PiResultSlope");
            });

            modelBuilder.Entity<PiResultSlopeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PiResultSlopeView");

                entity.Property(e => e.AboveDevCondition)
                    .HasColumnName("AboveDev_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.AboveDevIsRelevant).HasColumnName("AboveDev_IsRelevant");

                entity.Property(e => e.BermDrainsIsRelevant).HasColumnName("BermDrains_IsRelevant");

                entity.Property(e => e.BermDrainsServiceabilityStatus)
                    .HasColumnName("BermDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsStructuralDefect)
                    .HasColumnName("BermDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsWorkDetails).HasColumnName("BermDrains_WorkDetails");

                entity.Property(e => e.BermDrainsWorkRequired).HasColumnName("BermDrains_WorkRequired");

                entity.Property(e => e.CatchPitsIsRelevant).HasColumnName("CatchPits_IsRelevant");

                entity.Property(e => e.CatchPitsServiceabilityStatus)
                    .HasColumnName("CatchPits_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsStructuralDefect)
                    .HasColumnName("CatchPits_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsWorkDetails).HasColumnName("CatchPits_WorkDetails");

                entity.Property(e => e.CatchPitsWorkRequired).HasColumnName("CatchPits_WorkRequired");

                entity.Property(e => e.CatchmentArea).HasMaxLength(50);

                entity.Property(e => e.ErosionCondition)
                    .HasColumnName("Erosion_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeAreaAffected).HasColumnName("ErosionDegree_AreaAffected");

                entity.Property(e => e.ErosionDegreeCondition)
                    .HasColumnName("ErosionDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeLocation)
                    .HasColumnName("ErosionDegree_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionIsRelevant).HasColumnName("Erosion_IsRelevant");

                entity.Property(e => e.ErosionWorkDetails).HasColumnName("Erosion_WorkDetails");

                entity.Property(e => e.ErosionWorkRequired).HasColumnName("Erosion_WorkRequired");

                entity.Property(e => e.ExistingStabilizingWorksCondition).HasMaxLength(50);

                entity.Property(e => e.ExistingWorksAnyExistingWorks).HasColumnName("ExistingWorks_AnyExistingWorks");

                entity.Property(e => e.ExistingWorksCondition)
                    .HasColumnName("ExistingWorks_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureBound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeatureRoute)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GenInfoAccessibility)
                    .HasColumnName("GenInfo_Accessibility")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoDiskNo)
                    .HasColumnName("GenInfo_DiskNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPhotoNo)
                    .HasColumnName("GenInfo_PhotoNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoSlopeOnBend)
                    .HasColumnName("GenInfo_SlopeOnBend")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GeneralDistressCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralDrainageCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralSurfaceCondition).HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityCondition)
                    .HasColumnName("GeoDiscontinuity_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityIsRelevant).HasColumnName("GeoDiscontinuity_IsRelevant");

                entity.Property(e => e.GeoDiscontinuityWorkDetails).HasColumnName("GeoDiscontinuity_WorkDetails");

                entity.Property(e => e.GeoDiscontinuityWorkRequired).HasColumnName("GeoDiscontinuity_WorkRequired");

                entity.Property(e => e.GeologicalAdversity)
                    .HasColumnName("Geological_Adversity")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalDiscontinuity).HasColumnName("Geological_Discontinuity");

                entity.Property(e => e.GeologicalLithology)
                    .HasColumnName("Geological_Lithology")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalMajorStructure)
                    .HasColumnName("Geological_MajorStructure")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalSoilRockInterface)
                    .HasColumnName("Geological_SoilRockInterface")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalWeathering)
                    .HasColumnName("Geological_Weathering")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverCondition)
                    .HasColumnName("HardCover_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverIsRelevant).HasColumnName("HardCover_IsRelevant");

                entity.Property(e => e.HardCoverLocation)
                    .HasColumnName("HardCover_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverPercentage).HasColumnName("HardCover_Percentage");

                entity.Property(e => e.HardCoverWorkDetails).HasColumnName("HardCover_WorkDetails");

                entity.Property(e => e.HardCoverWorkRequired).HasColumnName("HardCover_WorkRequired");

                entity.Property(e => e.HorizontalDrainsIsRelevant).HasColumnName("HorizontalDrains_IsRelevant");

                entity.Property(e => e.HorizontalDrainsServiceabilityStatus)
                    .HasColumnName("HorizontalDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsStructuralDefect)
                    .HasColumnName("HorizontalDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsWorkDetails).HasColumnName("HorizontalDrains_WorkDetails");

                entity.Property(e => e.HorizontalDrainsWorkRequired).HasColumnName("HorizontalDrains_WorkRequired");

                entity.Property(e => e.InstabilityDegreeCondition)
                    .HasColumnName("InstabilityDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignCondition)
                    .HasColumnName("InstabilitySign_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignIsRelevant).HasColumnName("InstabilitySign_IsRelevant");

                entity.Property(e => e.InstabilitySignWorkDetails).HasColumnName("InstabilitySign_WorkDetails");

                entity.Property(e => e.InstabilitySignWorkRequired).HasColumnName("InstabilitySign_WorkRequired");

                entity.Property(e => e.InterceptorDrainsIsRelevant).HasColumnName("InterceptorDrains_IsRelevant");

                entity.Property(e => e.InterceptorDrainsServiceabilityStatus)
                    .HasColumnName("InterceptorDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsStructuralDefect)
                    .HasColumnName("InterceptorDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsWorkDetails).HasColumnName("InterceptorDrains_WorkDetails");

                entity.Property(e => e.InterceptorDrainsWorkRequired).HasColumnName("InterceptorDrains_WorkRequired");

                entity.Property(e => e.LooseMaterialCondition)
                    .HasColumnName("LooseMaterial_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.LooseMaterialIsRelevant).HasColumnName("LooseMaterial_IsRelevant");

                entity.Property(e => e.LooseMaterialWorkDetails).HasColumnName("LooseMaterial_WorkDetails");

                entity.Property(e => e.LooseMaterialWorkRequired).HasColumnName("LooseMaterial_WorkRequired");

                entity.Property(e => e.OpenGapsCondition)
                    .HasColumnName("OpenGaps_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OpenGapsWorkDetails).HasColumnName("OpenGaps_WorkDetails");

                entity.Property(e => e.OpenGapsWorkRequired).HasColumnName("OpenGaps_WorkRequired");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousFailureIsRelevant).HasColumnName("PreviousFailure_IsRelevant");

                entity.Property(e => e.PreviousFailureLocation)
                    .HasColumnName("PreviousFailure_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.PreviousFailureRemedialWork)
                    .HasColumnName("PreviousFailure_RemedialWork")
                    .HasMaxLength(50);

                entity.Property(e => e.PriorityRatingCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RoadDistressCondition).HasMaxLength(50);

                entity.Property(e => e.RockDitchIsRelevant).HasColumnName("RockDitch_IsRelevant");

                entity.Property(e => e.RockDitchServiceabilityDepth).HasColumnName("RockDitch_Serviceability_Depth");

                entity.Property(e => e.RockDitchServiceabilityWidth).HasColumnName("RockDitch_Serviceability_Width");

                entity.Property(e => e.RockDitchStructuralDefect)
                    .HasColumnName("RockDitch_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.RockDitchWorkDetails).HasColumnName("RockDitch_WorkDetails");

                entity.Property(e => e.RockDitchWorkRequired).HasColumnName("RockDitch_WorkRequired");

                entity.Property(e => e.RockFallAnyVisualDefect).HasColumnName("RockFall_AnyVisualDefect");

                entity.Property(e => e.RockFallCondition)
                    .HasColumnName("RockFall_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallIsRelevant).HasColumnName("RockFall_IsRelevant");

                entity.Property(e => e.RockFallVisualCondition)
                    .HasColumnName("RockFall_VisualCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallWorkDetails).HasColumnName("RockFall_WorkDetails");

                entity.Property(e => e.RockFallWorkRequired).HasColumnName("RockFall_WorkRequired");

                entity.Property(e => e.ScalingIsRequired).HasColumnName("Scaling_IsRequired");

                entity.Property(e => e.ScalingLocation)
                    .HasColumnName("Scaling_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ScalingType)
                    .HasColumnName("Scaling_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringDrainsCondition)
                    .HasColumnName("ScouringDrains_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringDrainsWorkDetails).HasColumnName("ScouringDrains_WorkDetails");

                entity.Property(e => e.ScouringDrainsWorkRequired).HasColumnName("ScouringDrains_WorkRequired");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SeepageCondition)
                    .HasColumnName("Seepage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageLocation)
                    .HasColumnName("Seepage_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageWorkDetails).HasColumnName("Seepage_WorkDetails");

                entity.Property(e => e.SeepageWorkRequired).HasColumnName("Seepage_WorkRequired");

                entity.Property(e => e.SevDefectCondition).HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsIsRelevant).HasColumnName("ShoulderDrains_IsRelevant");

                entity.Property(e => e.ShoulderDrainsServiceabilityStatus)
                    .HasColumnName("ShoulderDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsStructuralDefect)
                    .HasColumnName("ShoulderDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsWorkDetails).HasColumnName("ShoulderDrains_WorkDetails");

                entity.Property(e => e.ShoulderDrainsWorkRequired).HasColumnName("ShoulderDrains_WorkRequired");

                entity.Property(e => e.SketchPlan)
                    .HasColumnName("Sketch_Plan")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSection)
                    .HasColumnName("Sketch_Section")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSlope)
                    .HasColumnName("Sketch_Slope")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeAngle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsIsRelevant).HasColumnName("SlopeDrains_IsRelevant");

                entity.Property(e => e.SlopeDrainsServiceabilityStatus)
                    .HasColumnName("SlopeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsStructuralDefect)
                    .HasColumnName("SlopeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsWorkDetails).HasColumnName("SlopeDrains_WorkDetails");

                entity.Property(e => e.SlopeDrainsWorkRequired).HasColumnName("SlopeDrains_WorkRequired");

                entity.Property(e => e.SlopeFailureCauseofFailure)
                    .HasColumnName("SlopeFailure_CauseofFailure")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureCondition)
                    .HasColumnName("SlopeFailure_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureHeight).HasColumnName("SlopeFailure_Height");

                entity.Property(e => e.SlopeFailureIsRelevant).HasColumnName("SlopeFailure_IsRelevant");

                entity.Property(e => e.SlopeFailureSlopeSurfaceNo)
                    .HasColumnName("SlopeFailure_SlopeSurfaceNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureWidth).HasColumnName("SlopeFailure_Width");

                entity.Property(e => e.SlopeFailureWorkDetails).HasColumnName("SlopeFailure_WorkDetails");

                entity.Property(e => e.SlopeFailureWorkRequired).HasColumnName("SlopeFailure_WorkRequired");

                entity.Property(e => e.SlopeHazardRiskRanking)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeKmend).HasColumnName("SlopeKMEnd");

                entity.Property(e => e.SlopeKmstart).HasColumnName("SlopeKMStart");

                entity.Property(e => e.SlopeMaterial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SlopeType)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.StructureCondCondition)
                    .HasColumnName("StructureCond_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SummaryOverall).HasColumnName("Summary_Overall");

                entity.Property(e => e.ToeDrainsIsRelevant).HasColumnName("ToeDrains_IsRelevant");

                entity.Property(e => e.ToeDrainsServiceabilityStatus)
                    .HasColumnName("ToeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsStructuralDefect)
                    .HasColumnName("ToeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsWorkDetails).HasColumnName("ToeDrains_WorkDetails");

                entity.Property(e => e.ToeDrainsWorkRequired).HasColumnName("ToeDrains_WorkRequired");

                entity.Property(e => e.VegCoverageCondition)
                    .HasColumnName("VegCoverage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegCoverageDueTo)
                    .HasColumnName("VegCoverage_DueTo")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceCondition)
                    .HasColumnName("VegetatedSurface_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceIsRelevant).HasColumnName("VegetatedSurface_IsRelevant");

                entity.Property(e => e.VegetatedSurfaceWorkDetails).HasColumnName("VegetatedSurface_WorkDetails");

                entity.Property(e => e.VegetatedSurfaceWorkRequired).HasColumnName("VegetatedSurface_WorkRequired");

                entity.Property(e => e.VisualDefectAnyVisualDefect).HasColumnName("VisualDefect_AnyVisualDefect");

                entity.Property(e => e.VisualDefectCondition)
                    .HasColumnName("VisualDefect_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VisualDefectWorkDetails).HasColumnName("VisualDefect_WorkDetails");

                entity.Property(e => e.VisualDefectWorkRequired).HasColumnName("VisualDefect_WorkRequired");

                entity.Property(e => e.WaterFlowEvidence)
                    .HasColumnName("WaterFlow_Evidence")
                    .HasMaxLength(50);

                entity.Property(e => e.WaterFlowIsRelevant).HasColumnName("WaterFlow_IsRelevant");

                entity.Property(e => e.WeepHolesRelevant).HasColumnName("WeepHoles_Relevant");

                entity.Property(e => e.WeepHolesServiceabilityStatus)
                    .HasColumnName("WeepHoles_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesStructuralDefect)
                    .HasColumnName("WeepHoles_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesWorkDetails).HasColumnName("WeepHoles_WorkDetails");

                entity.Property(e => e.WeepHolesWorkRequired).HasColumnName("WeepHoles_WorkRequired");
            });

            modelBuilder.Entity<PiResultTunnel>(entity =>
            {
                entity.HasKey(e => e.PiSchedulePk)
                    .HasName("PK_PiScheduleTunnel");

                entity.Property(e => e.PiSchedulePk)
                    .HasColumnName("PiSchedulePK")
                    .ValueGeneratedNever();

                entity.Property(e => e.GenInfoTrafficControl)
                    .HasColumnName("GenInfo_TrafficControl")
                    .HasMaxLength(50);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithOne(p => p.PiResultTunnel)
                    .HasForeignKey<PiResultTunnel>(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultTunnel_PiSchedule");
            });

            modelBuilder.Entity<PiResultTunnelPanel>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PiResultTunnel_Panel_1");

                entity.ToTable("PiResultTunnel_Panel");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ConcreteCrackingCode)
                    .HasColumnName("Concrete_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteCrackingCondition)
                    .HasColumnName("Concrete_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteCrackingExtent)
                    .HasColumnName("Concrete_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteCrackingRemarks).HasColumnName("Concrete_CrackingRemarks");

                entity.Property(e => e.ConcreteCrackingSeverity)
                    .HasColumnName("Concrete_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteOtherRemarks).HasColumnName("Concrete_OtherRemarks");

                entity.Property(e => e.ConcreteRating)
                    .HasColumnName("Concrete_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteSpallingCode)
                    .HasColumnName("Concrete_SpallingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteSpallingCondition)
                    .HasColumnName("Concrete_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteSpallingExtent)
                    .HasColumnName("Concrete_SpallingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteSpallingRemarks).HasColumnName("Concrete_SpallingRemarks");

                entity.Property(e => e.ConcreteSpallingSeverity)
                    .HasColumnName("Concrete_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageOtherRemarks).HasColumnName("Drainage_OtherRemarks");

                entity.Property(e => e.DrainageRating)
                    .HasColumnName("Drainage_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageServiceabilityCode)
                    .HasColumnName("Drainage_ServiceabilityCode")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageServiceabilityCondition)
                    .HasColumnName("Drainage_ServiceabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageServiceabilityExtent)
                    .HasColumnName("Drainage_ServiceabilityExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageServiceabilityRemarks).HasColumnName("Drainage_ServiceabilityRemarks");

                entity.Property(e => e.DrainageServiceabilitySeverity)
                    .HasColumnName("Drainage_ServiceabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageStructureCode)
                    .HasColumnName("Drainage_StructureCode")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageStructureCondition)
                    .HasColumnName("Drainage_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageStructureExtent)
                    .HasColumnName("Drainage_StructureExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageStructureRemarks).HasColumnName("Drainage_StructureRemarks");

                entity.Property(e => e.DrainageStructureSeverity)
                    .HasColumnName("Drainage_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingCrackingCode)
                    .HasColumnName("Finishing_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingCrackingCondition)
                    .HasColumnName("Finishing_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingCrackingExtent)
                    .HasColumnName("Finishing_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingCrackingRemarks).HasColumnName("Finishing_CrackingRemarks");

                entity.Property(e => e.FinishingCrackingSeverity)
                    .HasColumnName("Finishing_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingOtherRemarks).HasColumnName("Finishing_OtherRemarks");

                entity.Property(e => e.FinishingRating)
                    .HasColumnName("Finishing_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingSpallingCode)
                    .HasColumnName("Finishing_SpallingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingSpallingCondition)
                    .HasColumnName("Finishing_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingSpallingExtent)
                    .HasColumnName("Finishing_SpallingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingSpallingRemarks).HasColumnName("Finishing_SpallingRemarks");

                entity.Property(e => e.FinishingSpallingSeverity)
                    .HasColumnName("Finishing_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingStainingCode)
                    .HasColumnName("Finishing_StainingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingStainingCondition)
                    .HasColumnName("Finishing_StainingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingStainingExtent)
                    .HasColumnName("Finishing_StainingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingStainingRemarks).HasColumnName("Finishing_StainingRemarks");

                entity.Property(e => e.FinishingStainingSeverity)
                    .HasColumnName("Finishing_StainingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.SealantBulgingCode)
                    .HasColumnName("Sealant_BulgingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantBulgingCondition)
                    .HasColumnName("Sealant_BulgingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantBulgingExtent)
                    .HasColumnName("Sealant_BulgingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantBulgingRemarks).HasColumnName("Sealant_BulgingRemarks");

                entity.Property(e => e.SealantBulgingSeverity)
                    .HasColumnName("Sealant_BulgingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantCrackingCode)
                    .HasColumnName("Sealant_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantCrackingCondition)
                    .HasColumnName("Sealant_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantCrackingExtent)
                    .HasColumnName("Sealant_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantCrackingRemarks).HasColumnName("Sealant_CrackingRemarks");

                entity.Property(e => e.SealantCrackingSeverity)
                    .HasColumnName("Sealant_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantLeakageCode)
                    .HasColumnName("Sealant_LeakageCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantLeakageCondition)
                    .HasColumnName("Sealant_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantLeakageExtent)
                    .HasColumnName("Sealant_LeakageExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantLeakageRemarks).HasColumnName("Sealant_LeakageRemarks");

                entity.Property(e => e.SealantLeakageSeverity)
                    .HasColumnName("Sealant_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantOtherRemarks).HasColumnName("Sealant_OtherRemarks");

                entity.Property(e => e.SealantRating)
                    .HasColumnName("Sealant_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctOtherRemarks).HasColumnName("ServiceDuct_OtherRemarks");

                entity.Property(e => e.ServiceDuctRating)
                    .HasColumnName("ServiceDuct_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctServiceabilityCode)
                    .HasColumnName("ServiceDuct_ServiceabilityCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctServiceabilityCondition)
                    .HasColumnName("ServiceDuct_ServiceabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctServiceabilityExtent)
                    .HasColumnName("ServiceDuct_ServiceabilityExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctServiceabilityRemarks).HasColumnName("ServiceDuct_ServiceabilityRemarks");

                entity.Property(e => e.ServiceDuctServiceabilitySeverity)
                    .HasColumnName("ServiceDuct_ServiceabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctStructureCode)
                    .HasColumnName("ServiceDuct_StructureCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctStructureCondition)
                    .HasColumnName("ServiceDuct_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctStructureExtent)
                    .HasColumnName("ServiceDuct_StructureExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctStructureRemarks).HasColumnName("ServiceDuct_StructureRemarks");

                entity.Property(e => e.ServiceDuctStructureSeverity)
                    .HasColumnName("ServiceDuct_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SideType).HasMaxLength(20);

                entity.HasOne(d => d.PiSchedulePkNavigation)
                    .WithMany(p => p.PiResultTunnelPanel)
                    .HasForeignKey(d => d.PiSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiResultTunnel_Panel_PiResultTunnel");
            });

            modelBuilder.Entity<PiResultTunnelView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PiResultTunnelView");

                entity.Property(e => e.FeatureBound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeatureRoute)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GenInfoTrafficControl)
                    .HasColumnName("GenInfo_TrafficControl")
                    .HasMaxLength(50);

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TunnelKmlocation).HasColumnName("TunnelKMLocation");

                entity.Property(e => e.TunnelName)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<PiSchedule>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PeriodicInspectionSchedule");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");
            });

            modelBuilder.Entity<PiScheduleMaster>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.BaseDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastScheduleRunDateTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NextScheduleRunDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PiScheduleMasterAsset>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.PiScheduleMasterPk).HasColumnName("PiScheduleMasterPK");

                entity.HasOne(d => d.InvMasterPkNavigation)
                    .WithMany(p => p.PiScheduleMasterAsset)
                    .HasForeignKey(d => d.InvMasterPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiScheduleMasterAsset_InvMaster");

                entity.HasOne(d => d.PiScheduleMasterPkNavigation)
                    .WithMany(p => p.PiScheduleMasterAsset)
                    .HasForeignKey(d => d.PiScheduleMasterPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PiScheduleMasterAsset_PiScheduleMaster");
            });

            modelBuilder.Entity<PiScheduleView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PiScheduleView");

                entity.Property(e => e.AssetBaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);
            });

            modelBuilder.Entity<PiSlopeExportDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PI_SlopeExportDetail");

                entity.Property(e => e.AboveDevCondition)
                    .HasColumnName("AboveDev_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.AboveDevIsRelevant).HasColumnName("AboveDev_IsRelevant");

                entity.Property(e => e.AssetBaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.BermDrainsIsRelevant).HasColumnName("BermDrains_IsRelevant");

                entity.Property(e => e.BermDrainsServiceabilityStatus)
                    .HasColumnName("BermDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsStructuralDefect)
                    .HasColumnName("BermDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.BermDrainsWorkDetails).HasColumnName("BermDrains_WorkDetails");

                entity.Property(e => e.BermDrainsWorkRequired).HasColumnName("BermDrains_WorkRequired");

                entity.Property(e => e.CatchPitsIsRelevant).HasColumnName("CatchPits_IsRelevant");

                entity.Property(e => e.CatchPitsServiceabilityStatus)
                    .HasColumnName("CatchPits_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsStructuralDefect)
                    .HasColumnName("CatchPits_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.CatchPitsWorkDetails).HasColumnName("CatchPits_WorkDetails");

                entity.Property(e => e.CatchPitsWorkRequired).HasColumnName("CatchPits_WorkRequired");

                entity.Property(e => e.CatchmentArea).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ErosionCondition)
                    .HasColumnName("Erosion_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeAreaAffected).HasColumnName("ErosionDegree_AreaAffected");

                entity.Property(e => e.ErosionDegreeCondition)
                    .HasColumnName("ErosionDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionDegreeLocation)
                    .HasColumnName("ErosionDegree_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ErosionIsRelevant).HasColumnName("Erosion_IsRelevant");

                entity.Property(e => e.ErosionWorkDetails).HasColumnName("Erosion_WorkDetails");

                entity.Property(e => e.ErosionWorkRequired).HasColumnName("Erosion_WorkRequired");

                entity.Property(e => e.ExistingStabilizingWorksCondition).HasMaxLength(50);

                entity.Property(e => e.ExistingWorksAnyExistingWorks).HasColumnName("ExistingWorks_AnyExistingWorks");

                entity.Property(e => e.ExistingWorksCondition)
                    .HasColumnName("ExistingWorks_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FurtherInvestigationMajorDefect).HasColumnName("Further Investigation Major Defect");

                entity.Property(e => e.FurtherInvestigationRecommendedAction).HasColumnName("Further Investigation Recommended Action");

                entity.Property(e => e.GenInfoAccessibility)
                    .HasColumnName("GenInfo_Accessibility")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoDiskNo)
                    .HasColumnName("GenInfo_DiskNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoPhotoNo)
                    .HasColumnName("GenInfo_PhotoNo")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoSlopeOnBend)
                    .HasColumnName("GenInfo_SlopeOnBend")
                    .HasMaxLength(50);

                entity.Property(e => e.GenInfoTypeOfInspection)
                    .HasColumnName("GenInfo_TypeOfInspection")
                    .HasMaxLength(50);

                entity.Property(e => e.GeneralDistressCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralDrainageCondition).HasMaxLength(50);

                entity.Property(e => e.GeneralSurfaceCondition).HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityCondition)
                    .HasColumnName("GeoDiscontinuity_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.GeoDiscontinuityIsRelevant).HasColumnName("GeoDiscontinuity_IsRelevant");

                entity.Property(e => e.GeoDiscontinuityWorkDetails).HasColumnName("GeoDiscontinuity_WorkDetails");

                entity.Property(e => e.GeoDiscontinuityWorkRequired).HasColumnName("GeoDiscontinuity_WorkRequired");

                entity.Property(e => e.GeologicalAdversity)
                    .HasColumnName("Geological_Adversity")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalDiscontinuity).HasColumnName("Geological_Discontinuity");

                entity.Property(e => e.GeologicalLithology)
                    .HasColumnName("Geological_Lithology")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalMajorStructure)
                    .HasColumnName("Geological_MajorStructure")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalSoilRockInterface)
                    .HasColumnName("Geological_SoilRockInterface")
                    .HasMaxLength(50);

                entity.Property(e => e.GeologicalWeathering)
                    .HasColumnName("Geological_Weathering")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverCondition)
                    .HasColumnName("HardCover_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverIsRelevant).HasColumnName("HardCover_IsRelevant");

                entity.Property(e => e.HardCoverLocation)
                    .HasColumnName("HardCover_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.HardCoverPercentage).HasColumnName("HardCover_Percentage");

                entity.Property(e => e.HardCoverWorkDetails).HasColumnName("HardCover_WorkDetails");

                entity.Property(e => e.HardCoverWorkRequired).HasColumnName("HardCover_WorkRequired");

                entity.Property(e => e.HorizontalDrainsIsRelevant).HasColumnName("HorizontalDrains_IsRelevant");

                entity.Property(e => e.HorizontalDrainsServiceabilityStatus)
                    .HasColumnName("HorizontalDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsStructuralDefect)
                    .HasColumnName("HorizontalDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.HorizontalDrainsWorkDetails).HasColumnName("HorizontalDrains_WorkDetails");

                entity.Property(e => e.HorizontalDrainsWorkRequired).HasColumnName("HorizontalDrains_WorkRequired");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InstabilityDegreeCondition)
                    .HasColumnName("InstabilityDegree_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignCondition)
                    .HasColumnName("InstabilitySign_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.InstabilitySignIsRelevant).HasColumnName("InstabilitySign_IsRelevant");

                entity.Property(e => e.InstabilitySignWorkDetails).HasColumnName("InstabilitySign_WorkDetails");

                entity.Property(e => e.InstabilitySignWorkRequired).HasColumnName("InstabilitySign_WorkRequired");

                entity.Property(e => e.InterceptorDrainsIsRelevant).HasColumnName("InterceptorDrains_IsRelevant");

                entity.Property(e => e.InterceptorDrainsServiceabilityStatus)
                    .HasColumnName("InterceptorDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsStructuralDefect)
                    .HasColumnName("InterceptorDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.InterceptorDrainsWorkDetails).HasColumnName("InterceptorDrains_WorkDetails");

                entity.Property(e => e.InterceptorDrainsWorkRequired).HasColumnName("InterceptorDrains_WorkRequired");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LooseMaterialCondition)
                    .HasColumnName("LooseMaterial_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.LooseMaterialIsRelevant).HasColumnName("LooseMaterial_IsRelevant");

                entity.Property(e => e.LooseMaterialWorkDetails).HasColumnName("LooseMaterial_WorkDetails");

                entity.Property(e => e.LooseMaterialWorkRequired).HasColumnName("LooseMaterial_WorkRequired");

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OpenGapsCondition)
                    .HasColumnName("OpenGaps_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OpenGapsWorkDetails).HasColumnName("OpenGaps_WorkDetails");

                entity.Property(e => e.OpenGapsWorkRequired).HasColumnName("OpenGaps_WorkRequired");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousFailureIsRelevant).HasColumnName("PreviousFailure_IsRelevant");

                entity.Property(e => e.PreviousFailureLocation)
                    .HasColumnName("PreviousFailure_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.PreviousFailureRemedialWork)
                    .HasColumnName("PreviousFailure_RemedialWork")
                    .HasMaxLength(50);

                entity.Property(e => e.PreviousInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.PriorityRatingCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.RemedialWorkMajorDefect).HasColumnName("Remedial Work Major Defect");

                entity.Property(e => e.RemedialWorkRecommendedAction).HasColumnName("Remedial Work Recommended Action");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.RoadDistressCondition).HasMaxLength(50);

                entity.Property(e => e.RockDitchIsRelevant).HasColumnName("RockDitch_IsRelevant");

                entity.Property(e => e.RockDitchServiceabilityDepth).HasColumnName("RockDitch_Serviceability_Depth");

                entity.Property(e => e.RockDitchServiceabilityWidth).HasColumnName("RockDitch_Serviceability_Width");

                entity.Property(e => e.RockDitchStructuralDefect)
                    .HasColumnName("RockDitch_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.RockDitchWorkDetails).HasColumnName("RockDitch_WorkDetails");

                entity.Property(e => e.RockDitchWorkRequired).HasColumnName("RockDitch_WorkRequired");

                entity.Property(e => e.RockFallAnyVisualDefect).HasColumnName("RockFall_AnyVisualDefect");

                entity.Property(e => e.RockFallCondition)
                    .HasColumnName("RockFall_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallIsRelevant).HasColumnName("RockFall_IsRelevant");

                entity.Property(e => e.RockFallVisualCondition)
                    .HasColumnName("RockFall_VisualCondition")
                    .HasMaxLength(50);

                entity.Property(e => e.RockFallWorkDetails).HasColumnName("RockFall_WorkDetails");

                entity.Property(e => e.RockFallWorkRequired).HasColumnName("RockFall_WorkRequired");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScalingIsRequired).HasColumnName("Scaling_IsRequired");

                entity.Property(e => e.ScalingLocation)
                    .HasColumnName("Scaling_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.ScalingType)
                    .HasColumnName("Scaling_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.ScouringDrainsCondition)
                    .HasColumnName("ScouringDrains_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.ScouringDrainsWorkDetails).HasColumnName("ScouringDrains_WorkDetails");

                entity.Property(e => e.ScouringDrainsWorkRequired).HasColumnName("ScouringDrains_WorkRequired");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SeepageCondition)
                    .HasColumnName("Seepage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageLocation)
                    .HasColumnName("Seepage_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.SeepageWorkDetails).HasColumnName("Seepage_WorkDetails");

                entity.Property(e => e.SeepageWorkRequired).HasColumnName("Seepage_WorkRequired");

                entity.Property(e => e.SevDefectCondition).HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsIsRelevant).HasColumnName("ShoulderDrains_IsRelevant");

                entity.Property(e => e.ShoulderDrainsServiceabilityStatus)
                    .HasColumnName("ShoulderDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsStructuralDefect)
                    .HasColumnName("ShoulderDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ShoulderDrainsWorkDetails).HasColumnName("ShoulderDrains_WorkDetails");

                entity.Property(e => e.ShoulderDrainsWorkRequired).HasColumnName("ShoulderDrains_WorkRequired");

                entity.Property(e => e.SketchPlan)
                    .HasColumnName("Sketch_Plan")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSection)
                    .HasColumnName("Sketch_Section")
                    .HasMaxLength(50);

                entity.Property(e => e.SketchSlope)
                    .HasColumnName("Sketch_Slope")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsIsRelevant).HasColumnName("SlopeDrains_IsRelevant");

                entity.Property(e => e.SlopeDrainsServiceabilityStatus)
                    .HasColumnName("SlopeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsStructuralDefect)
                    .HasColumnName("SlopeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeDrainsWorkDetails).HasColumnName("SlopeDrains_WorkDetails");

                entity.Property(e => e.SlopeDrainsWorkRequired).HasColumnName("SlopeDrains_WorkRequired");

                entity.Property(e => e.SlopeFailureCauseofFailure)
                    .HasColumnName("SlopeFailure_CauseofFailure")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureCondition)
                    .HasColumnName("SlopeFailure_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureHeight).HasColumnName("SlopeFailure_Height");

                entity.Property(e => e.SlopeFailureIsRelevant).HasColumnName("SlopeFailure_IsRelevant");

                entity.Property(e => e.SlopeFailureSlopeSurfaceNo)
                    .HasColumnName("SlopeFailure_SlopeSurfaceNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SlopeFailureWidth).HasColumnName("SlopeFailure_Width");

                entity.Property(e => e.SlopeFailureWorkDetails).HasColumnName("SlopeFailure_WorkDetails");

                entity.Property(e => e.SlopeFailureWorkRequired).HasColumnName("SlopeFailure_WorkRequired");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StructureCondCondition)
                    .HasColumnName("StructureCond_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SummaryOverall).HasColumnName("Summary_Overall");

                entity.Property(e => e.ToeDrainsIsRelevant).HasColumnName("ToeDrains_IsRelevant");

                entity.Property(e => e.ToeDrainsServiceabilityStatus)
                    .HasColumnName("ToeDrains_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsStructuralDefect)
                    .HasColumnName("ToeDrains_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.ToeDrainsWorkDetails).HasColumnName("ToeDrains_WorkDetails");

                entity.Property(e => e.ToeDrainsWorkRequired).HasColumnName("ToeDrains_WorkRequired");

                entity.Property(e => e.VegCoverageCondition)
                    .HasColumnName("VegCoverage_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegCoverageDueTo)
                    .HasColumnName("VegCoverage_DueTo")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceCondition)
                    .HasColumnName("VegetatedSurface_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VegetatedSurfaceIsRelevant).HasColumnName("VegetatedSurface_IsRelevant");

                entity.Property(e => e.VegetatedSurfaceWorkDetails).HasColumnName("VegetatedSurface_WorkDetails");

                entity.Property(e => e.VegetatedSurfaceWorkRequired).HasColumnName("VegetatedSurface_WorkRequired");

                entity.Property(e => e.VisualDefectAnyVisualDefect).HasColumnName("VisualDefect_AnyVisualDefect");

                entity.Property(e => e.VisualDefectCondition)
                    .HasColumnName("VisualDefect_Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.VisualDefectWorkDetails).HasColumnName("VisualDefect_WorkDetails");

                entity.Property(e => e.VisualDefectWorkRequired).HasColumnName("VisualDefect_WorkRequired");

                entity.Property(e => e.WaterFlowEvidence)
                    .HasColumnName("WaterFlow_Evidence")
                    .HasMaxLength(50);

                entity.Property(e => e.WaterFlowIsRelevant).HasColumnName("WaterFlow_IsRelevant");

                entity.Property(e => e.WeepHolesRelevant).HasColumnName("WeepHoles_Relevant");

                entity.Property(e => e.WeepHolesServiceabilityStatus)
                    .HasColumnName("WeepHoles_ServiceabilityStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesStructuralDefect)
                    .HasColumnName("WeepHoles_StructuralDefect")
                    .HasMaxLength(50);

                entity.Property(e => e.WeepHolesWorkDetails).HasColumnName("WeepHoles_WorkDetails");

                entity.Property(e => e.WeepHolesWorkRequired).HasColumnName("WeepHoles_WorkRequired");
            });

            modelBuilder.Entity<PiTunnelExportDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PI_TunnelExportDetail");

                entity.Property(e => e.AssetBaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.ConcreteCrackingCode)
                    .HasColumnName("Concrete_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteCrackingCondition)
                    .HasColumnName("Concrete_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteCrackingExtent)
                    .HasColumnName("Concrete_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteCrackingRemarks).HasColumnName("Concrete_CrackingRemarks");

                entity.Property(e => e.ConcreteCrackingSeverity)
                    .HasColumnName("Concrete_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteOtherRemarks).HasColumnName("Concrete_OtherRemarks");

                entity.Property(e => e.ConcreteRating)
                    .HasColumnName("Concrete_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteSpallingCode)
                    .HasColumnName("Concrete_SpallingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteSpallingCondition)
                    .HasColumnName("Concrete_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ConcreteSpallingExtent)
                    .HasColumnName("Concrete_SpallingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ConcreteSpallingRemarks).HasColumnName("Concrete_SpallingRemarks");

                entity.Property(e => e.ConcreteSpallingSeverity)
                    .HasColumnName("Concrete_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DrainageOtherRemarks).HasColumnName("Drainage_OtherRemarks");

                entity.Property(e => e.DrainageRating)
                    .HasColumnName("Drainage_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageServiceabilityCode)
                    .HasColumnName("Drainage_ServiceabilityCode")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageServiceabilityCondition)
                    .HasColumnName("Drainage_ServiceabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageServiceabilityExtent)
                    .HasColumnName("Drainage_ServiceabilityExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageServiceabilityRemarks).HasColumnName("Drainage_ServiceabilityRemarks");

                entity.Property(e => e.DrainageServiceabilitySeverity)
                    .HasColumnName("Drainage_ServiceabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageStructureCode)
                    .HasColumnName("Drainage_StructureCode")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageStructureCondition)
                    .HasColumnName("Drainage_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.DrainageStructureExtent)
                    .HasColumnName("Drainage_StructureExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.DrainageStructureRemarks).HasColumnName("Drainage_StructureRemarks");

                entity.Property(e => e.DrainageStructureSeverity)
                    .HasColumnName("Drainage_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishingCrackingCode)
                    .HasColumnName("Finishing_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingCrackingCondition)
                    .HasColumnName("Finishing_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingCrackingExtent)
                    .HasColumnName("Finishing_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingCrackingRemarks).HasColumnName("Finishing_CrackingRemarks");

                entity.Property(e => e.FinishingCrackingSeverity)
                    .HasColumnName("Finishing_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingOtherRemarks).HasColumnName("Finishing_OtherRemarks");

                entity.Property(e => e.FinishingRating)
                    .HasColumnName("Finishing_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingSpallingCode)
                    .HasColumnName("Finishing_SpallingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingSpallingCondition)
                    .HasColumnName("Finishing_SpallingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingSpallingExtent)
                    .HasColumnName("Finishing_SpallingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingSpallingRemarks).HasColumnName("Finishing_SpallingRemarks");

                entity.Property(e => e.FinishingSpallingSeverity)
                    .HasColumnName("Finishing_SpallingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingStainingCode)
                    .HasColumnName("Finishing_StainingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingStainingCondition)
                    .HasColumnName("Finishing_StainingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishingStainingExtent)
                    .HasColumnName("Finishing_StainingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.FinishingStainingRemarks).HasColumnName("Finishing_StainingRemarks");

                entity.Property(e => e.FinishingStainingSeverity)
                    .HasColumnName("Finishing_StainingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.GenInfoTrafficControl)
                    .HasColumnName("GenInfo_TrafficControl")
                    .HasMaxLength(50);

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PiSchedulePk).HasColumnName("PiSchedulePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PreviousInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(300);

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.ScheduleInspectionDate).HasColumnType("datetime");

                entity.Property(e => e.SealantBulgingCode)
                    .HasColumnName("Sealant_BulgingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantBulgingCondition)
                    .HasColumnName("Sealant_BulgingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantBulgingExtent)
                    .HasColumnName("Sealant_BulgingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantBulgingRemarks).HasColumnName("Sealant_BulgingRemarks");

                entity.Property(e => e.SealantBulgingSeverity)
                    .HasColumnName("Sealant_BulgingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantCrackingCode)
                    .HasColumnName("Sealant_CrackingCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantCrackingCondition)
                    .HasColumnName("Sealant_CrackingCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantCrackingExtent)
                    .HasColumnName("Sealant_CrackingExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantCrackingRemarks).HasColumnName("Sealant_CrackingRemarks");

                entity.Property(e => e.SealantCrackingSeverity)
                    .HasColumnName("Sealant_CrackingSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantLeakageCode)
                    .HasColumnName("Sealant_LeakageCode")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantLeakageCondition)
                    .HasColumnName("Sealant_LeakageCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.SealantLeakageExtent)
                    .HasColumnName("Sealant_LeakageExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantLeakageRemarks).HasColumnName("Sealant_LeakageRemarks");

                entity.Property(e => e.SealantLeakageSeverity)
                    .HasColumnName("Sealant_LeakageSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SealantOtherRemarks).HasColumnName("Sealant_OtherRemarks");

                entity.Property(e => e.SealantRating)
                    .HasColumnName("Sealant_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.ServiceDuctOtherRemarks).HasColumnName("ServiceDuct_OtherRemarks");

                entity.Property(e => e.ServiceDuctRating)
                    .HasColumnName("ServiceDuct_Rating")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctServiceabilityCode)
                    .HasColumnName("ServiceDuct_ServiceabilityCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctServiceabilityCondition)
                    .HasColumnName("ServiceDuct_ServiceabilityCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctServiceabilityExtent)
                    .HasColumnName("ServiceDuct_ServiceabilityExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctServiceabilityRemarks).HasColumnName("ServiceDuct_ServiceabilityRemarks");

                entity.Property(e => e.ServiceDuctServiceabilitySeverity)
                    .HasColumnName("ServiceDuct_ServiceabilitySeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctStructureCode)
                    .HasColumnName("ServiceDuct_StructureCode")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctStructureCondition)
                    .HasColumnName("ServiceDuct_StructureCondition")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceDuctStructureExtent)
                    .HasColumnName("ServiceDuct_StructureExtent")
                    .HasMaxLength(5);

                entity.Property(e => e.ServiceDuctStructureRemarks).HasColumnName("ServiceDuct_StructureRemarks");

                entity.Property(e => e.ServiceDuctStructureSeverity)
                    .HasColumnName("ServiceDuct_StructureSeverity")
                    .HasMaxLength(5);

                entity.Property(e => e.SideType).HasMaxLength(20);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);
            });

            modelBuilder.Entity<PitAssetGroup>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PitAssetGroupDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitAssetGroupDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GroupStructureDetailMainComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailMainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailMainGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailMainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailSubComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructureDetailSubGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PitShift>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeedometerEnd)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SpeedometerStart)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TeamLeadMobile)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TeamLeadName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VehiclePlateNo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName1)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName2)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName3)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerTmcmobile)
                    .IsRequired()
                    .HasColumnName("WorkerTMCMobile")
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerTmcname)
                    .IsRequired()
                    .HasColumnName("WorkerTMCName")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<PitShiftDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitShiftDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeedometerEnd)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SpeedometerStart)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TeamLeadMobile)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TeamLeadName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VehiclePlateNo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName1)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName2)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerName3)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerTmcmobile)
                    .IsRequired()
                    .HasColumnName("WorkerTMCMobile")
                    .HasMaxLength(250);

                entity.Property(e => e.WorkerTmcname)
                    .IsRequired()
                    .HasColumnName("WorkerTMCName")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<PitTask>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PitTask_1");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Ac2ndAccident).HasColumnName("Ac_2ndAccident");

                entity.Property(e => e.AcAccidentSummary).HasColumnName("Ac_AccidentSummary");

                entity.Property(e => e.AcAmbulanceArriveDt)
                    .HasColumnName("Ac_AmbulanceArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcApprovedByDt)
                    .HasColumnName("Ac_ApprovedByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcApprovedByName)
                    .HasColumnName("Ac_ApprovedByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcApprovedByPosition)
                    .HasColumnName("Ac_ApprovedByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcApprovedBySign)
                    .HasColumnName("Ac_ApprovedBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcBombaArriveDt)
                    .HasColumnName("Ac_BombaArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcDamageLocation)
                    .HasColumnName("Ac_DamageLocation")
                    .HasMaxLength(20);

                entity.Property(e => e.AcDanger).HasColumnName("Ac_Danger");

                entity.Property(e => e.AcEventType)
                    .HasColumnName("Ac_EventType")
                    .HasMaxLength(20);

                entity.Property(e => e.AcInvestigatorArriveDt)
                    .HasColumnName("Ac_InvestigatorArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcLaneClosed)
                    .HasColumnName("Ac_LaneClosed")
                    .HasMaxLength(20);

                entity.Property(e => e.AcLateFactor).HasColumnName("Ac_LateFactor");

                entity.Property(e => e.AcMautCount).HasColumnName("Ac_MautCount");

                entity.Property(e => e.AcMovingToLocDt)
                    .HasColumnName("Ac_MovingToLocDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcNewsFeaturePk).HasColumnName("Ac_NewsFeaturePK");

                entity.Property(e => e.AcNewsKmLoc)
                    .HasColumnName("Ac_NewsKmLoc")
                    .HasMaxLength(200);

                entity.Property(e => e.AcNewsLocation)
                    .HasColumnName("Ac_NewsLocation")
                    .HasMaxLength(50);

                entity.Property(e => e.AcParahCount).HasColumnName("Ac_ParahCount");

                entity.Property(e => e.AcPitArriveDt)
                    .HasColumnName("Ac_PitArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcPrepByDt)
                    .HasColumnName("Ac_PrepByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcPrepByName)
                    .HasColumnName("Ac_PrepByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcPrepByPosition)
                    .HasColumnName("Ac_PrepByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcPrepBySign)
                    .HasColumnName("Ac_PrepBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcRinganCount).HasColumnName("Ac_RinganCount");

                entity.Property(e => e.AcRoadGeometry)
                    .HasColumnName("Ac_RoadGeometry")
                    .HasMaxLength(20);

                entity.Property(e => e.AcRoadSurface)
                    .HasColumnName("Ac_RoadSurface")
                    .HasMaxLength(20);

                entity.Property(e => e.AcRondaArriveDt)
                    .HasColumnName("Ac_RondaArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSelamatCount).HasColumnName("Ac_SelamatCount");

                entity.Property(e => e.AcSpvisorArriveDt)
                    .HasColumnName("Ac_SpvisorArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSpvisorInformDt)
                    .HasColumnName("Ac_SpvisorInformDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSuppByDt)
                    .HasColumnName("Ac_SuppByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSuppByName)
                    .HasColumnName("Ac_SuppByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcSuppByPosition)
                    .HasColumnName("Ac_SuppByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcSuppBySign)
                    .HasColumnName("Ac_SuppBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcTmcInformDt)
                    .HasColumnName("Ac_TmcInformDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcWeather)
                    .HasColumnName("Ac_Weather")
                    .HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDt).HasColumnType("datetime");

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishedDt).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.KmLocation).HasMaxLength(200);

                entity.Property(e => e.Lane)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PitTaskStructurePk).HasColumnName("PitTaskStructurePK");

                entity.Property(e => e.ResponseDt).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift).HasMaxLength(5);

                entity.Property(e => e.UploadedBy).HasMaxLength(50);

                entity.Property(e => e.UploadedDt).HasColumnType("datetime");

                entity.HasOne(d => d.PitTaskStructurePkNavigation)
                    .WithMany(p => p.PitTask)
                    .HasForeignKey(d => d.PitTaskStructurePk)
                    .HasConstraintName("FK_PitTask_PitTaskStructure");
            });

            modelBuilder.Entity<PitTaskDamage>(entity =>
            {
                entity.HasKey(e => new { e.PitTaskPk, e.RecordIndex });

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");

                entity.Property(e => e.DamagePitAssetGroupPk).HasColumnName("DamagePitAssetGroupPK");

                entity.HasOne(d => d.DamagePitAssetGroupPkNavigation)
                    .WithMany(p => p.PitTaskDamage)
                    .HasForeignKey(d => d.DamagePitAssetGroupPk)
                    .HasConstraintName("FK_PitTaskDamage_PitAssetGroup");

                entity.HasOne(d => d.PitTaskPkNavigation)
                    .WithMany(p => p.PitTaskDamage)
                    .HasForeignKey(d => d.PitTaskPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PitTaskDamage_PitTask");
            });

            modelBuilder.Entity<PitTaskDamageView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitTaskDamageView");

                entity.Property(e => e.AssetGroupCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AssetGroupName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DamagePitAssetGroupPk).HasColumnName("DamagePitAssetGroupPK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");
            });

            modelBuilder.Entity<PitTaskDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitTaskDetail");

                entity.Property(e => e.AcEventType)
                    .HasColumnName("Ac_EventType")
                    .HasMaxLength(20);

                entity.Property(e => e.AcTmcInformDt)
                    .HasColumnName("Ac_TmcInformDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDt).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishedDt).HasColumnType("datetime");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.KmLocation).HasMaxLength(200);

                entity.Property(e => e.Lane)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Level1Code).HasMaxLength(50);

                entity.Property(e => e.Level1Name).HasMaxLength(500);

                entity.Property(e => e.Level1Pk).HasColumnName("Level1PK");

                entity.Property(e => e.Level2Code).HasMaxLength(50);

                entity.Property(e => e.Level2Name).HasMaxLength(500);

                entity.Property(e => e.Level2Pk).HasColumnName("Level2PK");

                entity.Property(e => e.MainCode).HasMaxLength(50);

                entity.Property(e => e.MainName).HasMaxLength(500);

                entity.Property(e => e.MainPk).HasColumnName("MainPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PhotoFileName1).HasMaxLength(200);

                entity.Property(e => e.PhotoFileName2).HasMaxLength(200);

                entity.Property(e => e.PhotoFileName3).HasMaxLength(200);

                entity.Property(e => e.PitAssetGroupName).HasMaxLength(500);

                entity.Property(e => e.PitTaskStructurePk).HasColumnName("PitTaskStructurePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ResponseDt).HasColumnType("datetime");

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift).HasMaxLength(5);

                entity.Property(e => e.UploadedBy).HasMaxLength(50);

                entity.Property(e => e.UploadedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<PitTaskOnDuty>(entity =>
            {
                entity.HasKey(e => new { e.PitTaskPk, e.RecordIndex });

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");

                entity.Property(e => e.OnDutyStaffName).HasMaxLength(200);

                entity.HasOne(d => d.PitTaskPkNavigation)
                    .WithMany(p => p.PitTaskOnDuty)
                    .HasForeignKey(d => d.PitTaskPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PitTaskOnDuty_PitTask");
            });

            modelBuilder.Entity<PitTaskPhoto>(entity =>
            {
                entity.HasKey(e => new { e.PitTaskPk, e.RecordIndex });

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(1000);

                entity.HasOne(d => d.PitTaskPkNavigation)
                    .WithMany(p => p.PitTaskPhoto)
                    .HasForeignKey(d => d.PitTaskPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PitTaskPhoto_PitTask");
            });

            modelBuilder.Entity<PitTaskStructure>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PitTask");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PitTaskStructureDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitTaskStructureDetail");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ParentPk).HasColumnName("ParentPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PitTaskUserSign>(entity =>
            {
                entity.HasKey(e => new { e.PitTaskPk, e.RecordIndex });

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");

                entity.Property(e => e.UserSignDt).HasColumnType("datetime");

                entity.Property(e => e.UserSignFileName).HasMaxLength(200);

                entity.Property(e => e.UserSignName).HasMaxLength(200);

                entity.Property(e => e.UserSignPosition).HasMaxLength(200);

                entity.HasOne(d => d.PitTaskPkNavigation)
                    .WithMany(p => p.PitTaskUserSign)
                    .HasForeignKey(d => d.PitTaskPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PitTaskUserSign_PitTask");
            });

            modelBuilder.Entity<PitTaskVehicle>(entity =>
            {
                entity.HasKey(e => new { e.PitTaskPk, e.RecordIndex });

                entity.Property(e => e.PitTaskPk).HasColumnName("PitTaskPK");

                entity.Property(e => e.VehicleCapacity).HasMaxLength(100);

                entity.Property(e => e.VehicleModel).HasMaxLength(100);

                entity.Property(e => e.VehicleName).HasMaxLength(100);

                entity.Property(e => e.VehicleRegNo).HasMaxLength(100);

                entity.Property(e => e.VehicleType).HasMaxLength(100);

                entity.HasOne(d => d.PitTaskPkNavigation)
                    .WithMany(p => p.PitTaskVehicle)
                    .HasForeignKey(d => d.PitTaskPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PitTaskVehicle_PitTask");
            });

            modelBuilder.Entity<PitTaskView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PitTaskView");

                entity.Property(e => e.Ac2ndAccident).HasColumnName("Ac_2ndAccident");

                entity.Property(e => e.AcAccidentSummary).HasColumnName("Ac_AccidentSummary");

                entity.Property(e => e.AcAmbulanceArriveDt)
                    .HasColumnName("Ac_AmbulanceArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcApprovedByDt)
                    .HasColumnName("Ac_ApprovedByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcApprovedByName)
                    .HasColumnName("Ac_ApprovedByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcApprovedByPosition)
                    .HasColumnName("Ac_ApprovedByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcApprovedBySign)
                    .HasColumnName("Ac_ApprovedBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcBombaArriveDt)
                    .HasColumnName("Ac_BombaArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcDamageLocation)
                    .HasColumnName("Ac_DamageLocation")
                    .HasMaxLength(20);

                entity.Property(e => e.AcDanger).HasColumnName("Ac_Danger");

                entity.Property(e => e.AcEventType)
                    .HasColumnName("Ac_EventType")
                    .HasMaxLength(20);

                entity.Property(e => e.AcInvestigatorArriveDt)
                    .HasColumnName("Ac_InvestigatorArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcLaneClosed)
                    .HasColumnName("Ac_LaneClosed")
                    .HasMaxLength(20);

                entity.Property(e => e.AcLateFactor).HasColumnName("Ac_LateFactor");

                entity.Property(e => e.AcMautCount).HasColumnName("Ac_MautCount");

                entity.Property(e => e.AcMovingToLocDt)
                    .HasColumnName("Ac_MovingToLocDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcNewsFeatureName)
                    .HasColumnName("Ac_NewsFeatureName")
                    .HasMaxLength(255);

                entity.Property(e => e.AcNewsFeaturePk).HasColumnName("Ac_NewsFeaturePK");

                entity.Property(e => e.AcNewsKmLoc)
                    .HasColumnName("Ac_NewsKmLoc")
                    .HasMaxLength(200);

                entity.Property(e => e.AcNewsLocation)
                    .HasColumnName("Ac_NewsLocation")
                    .HasMaxLength(50);

                entity.Property(e => e.AcParahCount).HasColumnName("Ac_ParahCount");

                entity.Property(e => e.AcPitArriveDt)
                    .HasColumnName("Ac_PitArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcPrepByDt)
                    .HasColumnName("Ac_PrepByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcPrepByName)
                    .HasColumnName("Ac_PrepByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcPrepByPosition)
                    .HasColumnName("Ac_PrepByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcPrepBySign)
                    .HasColumnName("Ac_PrepBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcRinganCount).HasColumnName("Ac_RinganCount");

                entity.Property(e => e.AcRoadGeometry)
                    .HasColumnName("Ac_RoadGeometry")
                    .HasMaxLength(20);

                entity.Property(e => e.AcRoadSurface)
                    .HasColumnName("Ac_RoadSurface")
                    .HasMaxLength(20);

                entity.Property(e => e.AcRondaArriveDt)
                    .HasColumnName("Ac_RondaArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSelamatCount).HasColumnName("Ac_SelamatCount");

                entity.Property(e => e.AcSpvisorArriveDt)
                    .HasColumnName("Ac_SpvisorArriveDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSpvisorInformDt)
                    .HasColumnName("Ac_SpvisorInformDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSuppByDt)
                    .HasColumnName("Ac_SuppByDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcSuppByName)
                    .HasColumnName("Ac_SuppByName")
                    .HasMaxLength(50);

                entity.Property(e => e.AcSuppByPosition)
                    .HasColumnName("Ac_SuppByPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.AcSuppBySign)
                    .HasColumnName("Ac_SuppBySign")
                    .HasMaxLength(50);

                entity.Property(e => e.AcTmcInformDt)
                    .HasColumnName("Ac_TmcInformDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcWeather)
                    .HasColumnName("Ac_Weather")
                    .HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDt).HasColumnType("datetime");

                entity.Property(e => e.FeatureId)
                    .IsRequired()
                    .HasColumnName("FeatureID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.FinishedDt).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.KmLocation).HasMaxLength(200);

                entity.Property(e => e.Lane)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PitTaskStructurePk).HasColumnName("PitTaskStructurePK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ResponseDt).HasColumnType("datetime");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift).HasMaxLength(5);

                entity.Property(e => e.UploadedBy).HasMaxLength(50);

                entity.Property(e => e.UploadedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<PrincipalBridgeInspection>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_PrincipleBridgeInspection");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionActualDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionBy).HasMaxLength(255);

                entity.Property(e => e.InspectionScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.HasOne(d => d.InvMasterPkNavigation)
                    .WithMany(p => p.PrincipalBridgeInspection)
                    .HasForeignKey(d => d.InvMasterPk)
                    .HasConstraintName("FK_PrincipleBridgeInspection_InvMaster");
            });

            modelBuilder.Entity<PrincipalBridgeInspectionAttachment>(entity =>
            {
                entity.HasKey(e => new { e.PrincipalBridgeInspectionPk, e.RecordIndex })
                    .HasName("PK_PrincipleBridgeInspectionAttachment");

                entity.Property(e => e.PrincipalBridgeInspectionPk).HasColumnName("PrincipalBridgeInspectionPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);

                entity.HasOne(d => d.PrincipalBridgeInspectionPkNavigation)
                    .WithMany(p => p.PrincipalBridgeInspectionAttachment)
                    .HasForeignKey(d => d.PrincipalBridgeInspectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrincipleBridgeInspectionAttachment_PrincipleBridgeInspection");
            });

            modelBuilder.Entity<PrincipalBridgeInspectionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrincipalBridgeInspectionDetail");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionActualDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionBy).HasMaxLength(255);

                entity.Property(e => e.InspectionScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<Ramp>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_RAMP");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RmForm>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_RoutineForm");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.RmFormCategoryPk).HasColumnName("RmFormCategoryPK");

                entity.HasOne(d => d.RmFormCategoryPkNavigation)
                    .WithMany(p => p.RmForm)
                    .HasForeignKey(d => d.RmFormCategoryPk)
                    .HasConstraintName("FK_RmForm_RmFormCategory");
            });

            modelBuilder.Entity<RmFormCategory>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_RoutineFormCategory");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<RmResult>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RmSchedulePk).HasColumnName("RmSchedulePK");

                entity.Property(e => e.Value).HasMaxLength(1000);

                entity.HasOne(d => d.RmSchedulePkNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.RmSchedulePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RmResult_RmSchedule");
            });

            modelBuilder.Entity<RmSchedule>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_RoutineSchedule");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetName).HasMaxLength(100);

                entity.Property(e => e.AssetPk).HasColumnName("AssetPK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("AssAtt");

                entity.Property(e => e.ChainageEndKm).HasColumnName("ChainageEndKM");

                entity.Property(e => e.ChainageStartKm).HasColumnName("ChainageStartKM");

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PlanningType)
                    .HasMaxLength(100)
                    .HasComment("");

                entity.Property(e => e.RescheduleFromRmSchedulePk).HasColumnName("RescheduleFromRmSchedulePK");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.ReviewBy).HasMaxLength(50);

                entity.Property(e => e.ReviewDate).HasColumnType("datetime");

                entity.Property(e => e.RmFormPk).HasColumnName("RmFormPK");

                entity.Property(e => e.ScheduleEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");

                entity.Property(e => e.Task)
                    .HasMaxLength(100)
                    .HasComment("AssAtt - ROT");

                entity.HasOne(d => d.AssetPkNavigation)
                    .WithMany(p => p.RmSchedule)
                    .HasForeignKey(d => d.AssetPk)
                    .HasConstraintName("FK_RmSchedule_InvMaster");

                entity.HasOne(d => d.ContractorPkNavigation)
                    .WithMany(p => p.RmSchedule)
                    .HasForeignKey(d => d.ContractorPk)
                    .HasConstraintName("FK_RmSchedule_Contractor");

                entity.HasOne(d => d.FeaturePkNavigation)
                    .WithMany(p => p.RmSchedule)
                    .HasForeignKey(d => d.FeaturePk)
                    .HasConstraintName("FK_RoutineSchedule_Section");

                entity.HasOne(d => d.RmFormPkNavigation)
                    .WithMany(p => p.RmSchedule)
                    .HasForeignKey(d => d.RmFormPk)
                    .HasConstraintName("FK_RoutineSchedule_RoutineForm");
            });

            modelBuilder.Entity<RmScheduleDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RmScheduleDetail");

                entity.Property(e => e.AssetId)
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetName).HasMaxLength(100);

                entity.Property(e => e.AssetPk).HasColumnName("AssetPK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.ChainageEndKm).HasColumnName("ChainageEndKM");

                entity.Property(e => e.ChainageStartKm).HasColumnName("ChainageStartKM");

                entity.Property(e => e.CompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.MainComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.MainGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.MainGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlanningType).HasMaxLength(100);

                entity.Property(e => e.RescheduleEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.RescheduleFromRmSchedulePk).HasColumnName("RescheduleFromRmSchedulePK");

                entity.Property(e => e.RescheduleStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.ReviewBy).HasMaxLength(50);

                entity.Property(e => e.ReviewDate).HasColumnType("datetime");

                entity.Property(e => e.RmFormCategoryName).HasMaxLength(200);

                entity.Property(e => e.RmFormCategoryPk).HasColumnName("RmFormCategoryPK");

                entity.Property(e => e.RmFormCode).HasMaxLength(10);

                entity.Property(e => e.RmFormName).HasMaxLength(200);

                entity.Property(e => e.RmFormPk).HasColumnName("RmFormPK");

                entity.Property(e => e.ScheduleEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubComponentAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubComponentAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubComponentAttributeType).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeCode).HasMaxLength(5);

                entity.Property(e => e.SubGroupAttributeName).HasMaxLength(50);

                entity.Property(e => e.SubGroupAttributeType).HasMaxLength(5);

                entity.Property(e => e.Task).HasMaxLength(100);
            });

            modelBuilder.Entity<RmSchedulePhoto>(entity =>
            {
                entity.HasKey(e => new { e.RmSchedulePk, e.RecordIndex });

                entity.Property(e => e.RmSchedulePk).HasColumnName("RmSchedulePK");

                entity.Property(e => e.PhotoFileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<RmScheduleView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RmScheduleView");

                entity.Property(e => e.AssetId)
                    .HasColumnName("AssetID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetName).HasMaxLength(100);

                entity.Property(e => e.AssetPk).HasColumnName("AssetPK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.ChainageEndKm).HasColumnName("ChainageEndKM");

                entity.Property(e => e.ChainageStartKm).HasColumnName("ChainageStartKM");

                entity.Property(e => e.ContractorName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeatureName).HasMaxLength(255);

                entity.Property(e => e.FeaturePk).HasColumnName("FeaturePK");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.InspectedBy).HasMaxLength(50);

                entity.Property(e => e.InspectionEndDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionStartDate).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlanningType).HasMaxLength(100);

                entity.Property(e => e.RescheduleFromRmSchedulePk).HasColumnName("RescheduleFromRmSchedulePK");

                entity.Property(e => e.ResultModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ResultModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ResultUploadedBy).HasMaxLength(50);

                entity.Property(e => e.ResultUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.ReviewBy).HasMaxLength(50);

                entity.Property(e => e.ReviewDate).HasColumnType("datetime");

                entity.Property(e => e.RmFormCategoryName).HasMaxLength(200);

                entity.Property(e => e.RmFormCategoryPk).HasColumnName("RmFormCategoryPK");

                entity.Property(e => e.RmFormCode).HasMaxLength(10);

                entity.Property(e => e.RmFormName).HasMaxLength(200);

                entity.Property(e => e.RmFormPk).HasColumnName("RmFormPK");

                entity.Property(e => e.ScheduleEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Task).HasMaxLength(100);

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.Username).HasMaxLength(255);
            });

            modelBuilder.Entity<RossVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ross_vendor");

                entity.Property(e => e.Column0)
                    .HasColumnName("Column 0")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Column1)
                    .HasColumnName("Column 1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Column2)
                    .HasColumnName("Column 2")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RossworkRr>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("ROSSWorkRR");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCode).HasMaxLength(150);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Drdate)
                    .HasColumnName("DRDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Drnumber)
                    .HasColumnName("DRNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.FinalBq).HasColumnName("FinalBQ");

                entity.Property(e => e.InitialBq).HasColumnName("InitialBQ");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NotificationDate).HasColumnType("datetime");

                entity.Property(e => e.RossuniqueId)
                    .HasColumnName("ROSSUniqueID")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode).HasMaxLength(50);

                entity.Property(e => e.WorkDescription).HasMaxLength(500);

                entity.Property(e => e.WorkMaintenanceType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AscendingDirection).HasMaxLength(50);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.RouteFrom).HasMaxLength(50);

                entity.Property(e => e.RouteTo).HasMaxLength(50);
            });

            modelBuilder.Entity<RouteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RouteDetail");

                entity.Property(e => e.AscendingDirection).HasMaxLength(50);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RouteFrom).HasMaxLength(50);

                entity.Property(e => e.RouteTo).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptBiNod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptBI_NOD");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptTotalAsset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Rpt_TotalAsset");

                entity.Property(e => e.AssetType).HasMaxLength(50);

                entity.Property(e => e.Totalasset).HasColumnName("totalasset");
            });

            modelBuilder.Entity<RunningNumber>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Section>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssetOwner).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SectionRouteFrom).HasMaxLength(50);

                entity.Property(e => e.SectionRouteTo).HasMaxLength(50);

                entity.HasOne(d => d.RegionPkNavigation)
                    .WithMany(p => p.Section)
                    .HasForeignKey(d => d.RegionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Section_Region");
            });

            modelBuilder.Entity<SectionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SectionDetail");

                entity.Property(e => e.AssetOwner).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SectionRouteFrom).HasMaxLength(50);

                entity.Property(e => e.SectionRouteTo).HasMaxLength(50);
            });

            modelBuilder.Entity<SectionGroup>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<SectionGroupDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SectionGroupDetail");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<SectionGroupScope>(entity =>
            {
                entity.HasKey(e => new { e.SectionGroupPk, e.SectionPk });

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<Sic>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .HasComment("Manual. = McsActivityScorecardPK")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConfirmedByCompany).HasMaxLength(50);

                entity.Property(e => e.ConfirmedByName).HasMaxLength(50);

                entity.Property(e => e.ConfirmedByPosition).HasMaxLength(50);

                entity.Property(e => e.ConfirmedBySignature).HasMaxLength(200);

                entity.Property(e => e.EditEndDt).HasColumnType("datetime");

                entity.Property(e => e.EditStartDt).HasColumnType("datetime");

                entity.Property(e => e.FormType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");

                entity.Property(e => e.InspectedByCompany).HasMaxLength(50);

                entity.Property(e => e.InspectedByName).HasMaxLength(50);

                entity.Property(e => e.InspectedByPosition).HasMaxLength(50);

                entity.Property(e => e.InspectedBySignature).HasMaxLength(200);

                entity.Property(e => e.LastCalculatedBy).HasMaxLength(50);

                entity.Property(e => e.LastCalculatedDt).HasColumnType("datetime");

                entity.Property(e => e.Shift)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Flag");

                entity.Property(e => e.UploadedBy).HasMaxLength(50);

                entity.Property(e => e.UploadedDt).HasColumnType("datetime");

                entity.Property(e => e.VehicleRemark).HasMaxLength(500);

                entity.Property(e => e.VehicleWorking).HasMaxLength(200);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.Sic)
                    .HasForeignKey<Sic>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sic_McsActivityScorecard");
            });

            modelBuilder.Entity<SicFertilizer>(entity =>
            {
                entity.HasKey(e => e.SicPk);

                entity.Property(e => e.SicPk)
                    .HasColumnName("SicPK")
                    .ValueGeneratedNever();

                entity.Property(e => e.BagsUsed).HasMaxLength(50);

                entity.Property(e => e.CompositionK).HasMaxLength(50);

                entity.Property(e => e.CompositionN).HasMaxLength(50);

                entity.Property(e => e.CompositionP).HasMaxLength(50);

                entity.Property(e => e.CompositionTracers).HasMaxLength(50);

                entity.Property(e => e.FertilizerType)
                    .HasMaxLength(50)
                    .HasComment("");

                entity.HasOne(d => d.SicPkNavigation)
                    .WithOne(p => p.SicFertilizer)
                    .HasForeignKey<SicFertilizer>(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicFertilizer_Sic");
            });

            modelBuilder.Entity<SicFixedL1>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityName).HasMaxLength(200);

                entity.Property(e => e.EodCompleted).HasMaxLength(200);

                entity.Property(e => e.EodIncomplete).HasMaxLength(200);

                entity.Property(e => e.EodManpower).HasMaxLength(200);

                entity.Property(e => e.EodRemarks).HasMaxLength(500);

                entity.Property(e => e.InspOnGoingActivities).HasMaxLength(200);

                entity.Property(e => e.InspOnGoingShift).HasMaxLength(200);

                entity.Property(e => e.InspRemarks).HasMaxLength(500);

                entity.Property(e => e.InspTime).HasColumnType("datetime");

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.HasOne(d => d.SicPkNavigation)
                    .WithMany(p => p.SicFixedL1)
                    .HasForeignKey(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicFixedL1_Sic");
            });

            modelBuilder.Entity<SicFixedL2>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.L2activityName)
                    .HasColumnName("L2ActivityName")
                    .HasMaxLength(200);

                entity.Property(e => e.L3activityName)
                    .HasColumnName("L3ActivityName")
                    .HasMaxLength(200);

                entity.Property(e => e.SicFixedL1pk).HasColumnName("SicFixedL1PK");

                entity.HasOne(d => d.SicFixedL1pkNavigation)
                    .WithMany(p => p.SicFixedL2)
                    .HasForeignKey(d => d.SicFixedL1pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicFixedL2_SicFixedL1");
            });

            modelBuilder.Entity<SicLandscape>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActivityName).HasMaxLength(200);

                entity.Property(e => e.ActualLocation).HasMaxLength(200);

                entity.Property(e => e.ActualTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.ActualTimeTo).HasColumnType("datetime");

                entity.Property(e => e.PlanLocation).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.HasOne(d => d.SicPkNavigation)
                    .WithMany(p => p.SicLandscape)
                    .HasForeignKey(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicLandscape_Sic");
            });

            modelBuilder.Entity<SicMobile>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("Attr:BND");

                entity.Property(e => e.Dt).HasColumnType("datetime");

                entity.Property(e => e.InspectionNo).HasMaxLength(200);

                entity.Property(e => e.Km)
                    .HasColumnName("KM")
                    .HasMaxLength(200);

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.HasOne(d => d.SicPkNavigation)
                    .WithMany(p => p.SicMobile)
                    .HasForeignKey(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicMobile_Sic");
            });

            modelBuilder.Entity<SicMobileView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SicMobileView");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.Dt).HasColumnType("datetime");

                entity.Property(e => e.InspectionNo).HasMaxLength(200);

                entity.Property(e => e.Km)
                    .HasColumnName("KM")
                    .HasMaxLength(200);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SicPk).HasColumnName("SicPK");
            });

            modelBuilder.Entity<SicPhoto>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_SicPhoto_1");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(500);

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.HasOne(d => d.SicPkNavigation)
                    .WithMany(p => p.SicPhoto)
                    .HasForeignKey(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicPhoto_Sic");
            });

            modelBuilder.Entity<SicUploadFile>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FileName).IsRequired();

                entity.Property(e => e.Ipaddress)
                    .IsRequired()
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SicVehicle>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Dt).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(200);

                entity.Property(e => e.PlatNo).HasMaxLength(200);

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.Property(e => e.TaggingNo).HasMaxLength(200);

                entity.HasOne(d => d.SicPkNavigation)
                    .WithMany(p => p.SicVehicle)
                    .HasForeignKey(d => d.SicPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SicVehicle_Sic");
            });

            modelBuilder.Entity<SicView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SicView");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.BagsUsed).HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BoundName).HasMaxLength(50);

                entity.Property(e => e.CompositionK).HasMaxLength(50);

                entity.Property(e => e.CompositionN).HasMaxLength(50);

                entity.Property(e => e.CompositionP).HasMaxLength(50);

                entity.Property(e => e.CompositionTracers).HasMaxLength(50);

                entity.Property(e => e.ConfirmedByCompany).HasMaxLength(50);

                entity.Property(e => e.ConfirmedByName).HasMaxLength(50);

                entity.Property(e => e.ConfirmedByPosition).HasMaxLength(50);

                entity.Property(e => e.ConfirmedBySignature).HasMaxLength(200);

                entity.Property(e => e.ContractorName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CorrectiveAction)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EditEndDt).HasColumnType("datetime");

                entity.Property(e => e.EditStartDt).HasColumnType("datetime");

                entity.Property(e => e.FertilizerType).HasMaxLength(50);

                entity.Property(e => e.FormType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.InspectedByCompany).HasMaxLength(50);

                entity.Property(e => e.InspectedByName).HasMaxLength(50);

                entity.Property(e => e.InspectedByPosition).HasMaxLength(50);

                entity.Property(e => e.InspectedBySignature).HasMaxLength(200);

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.LastCalculatedBy).HasMaxLength(50);

                entity.Property(e => e.LastCalculatedDt).HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityName).HasMaxLength(255);

                entity.Property(e => e.McsActivityPk).HasColumnName("McsActivityPK");

                entity.Property(e => e.McsActivityTypeOfArea).HasMaxLength(255);

                entity.Property(e => e.McsActivityUom).HasMaxLength(50);

                entity.Property(e => e.McsCategoryPk).HasColumnName("McsCategoryPK");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.Shift)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SicPk).HasColumnName("SicPK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UploadedBy).HasMaxLength(50);

                entity.Property(e => e.UploadedDt).HasColumnType("datetime");

                entity.Property(e => e.VehicleRemark).HasMaxLength(500);

                entity.Property(e => e.VehicleWorking).HasMaxLength(200);
            });

            modelBuilder.Entity<SorCategory>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OracleId)
                    .HasColumnName("OracleID")
                    .HasComment("Oracle primary key.");
            });

            modelBuilder.Entity<SorItem>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OracleId)
                    .HasColumnName("OracleID")
                    .HasComment("Oracle primary key.");

                entity.Property(e => e.SorCategoryPk).HasColumnName("SorCategoryPK");

                entity.Property(e => e.Uom)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.SorCategoryPkNavigation)
                    .WithMany(p => p.SorItem)
                    .HasForeignKey(d => d.SorCategoryPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SorItem_SorCategory");
            });

            modelBuilder.Entity<SpecialInspection>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionBy).HasMaxLength(255);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.InvMasterPkNavigation)
                    .WithMany(p => p.SpecialInspection)
                    .HasForeignKey(d => d.InvMasterPk)
                    .HasConstraintName("FK_SpecialInspection_InvMaster");
            });

            modelBuilder.Entity<SpecialInspectionAttachment>(entity =>
            {
                entity.HasKey(e => new { e.SpecialInspectionPk, e.RecordIndex });

                entity.Property(e => e.SpecialInspectionPk).HasColumnName("SpecialInspectionPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);

                entity.HasOne(d => d.SpecialInspectionPkNavigation)
                    .WithMany(p => p.SpecialInspectionAttachment)
                    .HasForeignKey(d => d.SpecialInspectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpecialInspectionAttachment_SpecialInspection");
            });

            modelBuilder.Entity<SpecialInspectionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecialInspectionDetail");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionBy).HasMaxLength(255);

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<SubmissionRequestMonitoring>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.AssignedToUserPk).HasColumnName("AssignedToUserPK");

                entity.Property(e => e.CarbonCopyUserPk).HasColumnName("CarbonCopyUserPK");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedByUserPk).HasColumnName("CreatedByUserPK");

                entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubmissionFor)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SubmissionName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SubmittedDate).HasColumnType("datetime");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SubmissionRequestMonitoringAttachment>(entity =>
            {
                entity.HasKey(e => new { e.SubmissionRequestMonitoringPk, e.RecordIndex });

                entity.Property(e => e.SubmissionRequestMonitoringPk).HasColumnName("SubmissionRequestMonitoringPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<SubmissionRequestMonitoringDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SubmissionRequestMonitoringDetail");

                entity.Property(e => e.AssignedToEmail).HasMaxLength(255);

                entity.Property(e => e.AssignedToName).HasMaxLength(255);

                entity.Property(e => e.AssignedToUserPk).HasColumnName("AssignedToUserPK");

                entity.Property(e => e.AssignedToUsername).HasMaxLength(255);

                entity.Property(e => e.CarbonCopyEmail).HasMaxLength(255);

                entity.Property(e => e.CarbonCopyName).HasMaxLength(255);

                entity.Property(e => e.CarbonCopyUserPk).HasColumnName("CarbonCopyUserPK");

                entity.Property(e => e.CarbonCopyUsername).HasMaxLength(255);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedByEmail).HasMaxLength(255);

                entity.Property(e => e.CreatedByName).HasMaxLength(255);

                entity.Property(e => e.CreatedByUserPk).HasColumnName("CreatedByUserPK");

                entity.Property(e => e.CreatedByUsername).HasMaxLength(255);

                entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubmissionFor)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SubmissionName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SubmittedDate).HasColumnType("datetime");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<TempUpload>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.TempId).HasColumnName("TempID");
            });

            modelBuilder.Entity<TrafficInfo>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Efclass2).HasColumnName("EFClass2");

                entity.Property(e => e.Efclass3).HasColumnName("EFClass3");

                entity.Property(e => e.Efclass5).HasColumnName("EFClass5");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.MainlineTollPlaza).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TcstationId)
                    .HasColumnName("TCStationID")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalMesal).HasColumnName("TotalMESAL");
            });

            modelBuilder.Entity<TrafficInfoDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrafficInfoDetail");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Efclass2).HasColumnName("EFClass2");

                entity.Property(e => e.Efclass3).HasColumnName("EFClass3");

                entity.Property(e => e.Efclass5).HasColumnName("EFClass5");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.MainlineTollPlaza).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TcstationId)
                    .HasColumnName("TCStationID")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalMesal).HasColumnName("TotalMESAL");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<UserBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User_Bak");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<UserBak2>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_User");

                entity.ToTable("User_Bak2");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.ContractorPkNavigation)
                    .WithMany(p => p.UserBak2)
                    .HasForeignKey(d => d.ContractorPk)
                    .HasConstraintName("FK_User_Contractor");
            });

            modelBuilder.Entity<UserDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserDetail");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorCompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupName).HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupName).HasMaxLength(255);

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.UserRoleName)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<UserGroupBak>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_UserGroup");

                entity.ToTable("UserGroup_Bak");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<UserGroupDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserGroupDetail");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<UserGroupRights>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");
            });

            modelBuilder.Entity<UserGroupRightsBak>(entity =>
            {
                entity.HasKey(e => new { e.UserGroupPk, e.AccessRight })
                    .HasName("PK_UserGroupRights");

                entity.ToTable("UserGroupRights_Bak");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.AccessRight).HasComment("Flag");
            });

            modelBuilder.Entity<UserGroupScope>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");
            });

            modelBuilder.Entity<UserGroupScopeBak>(entity =>
            {
                entity.HasKey(e => new { e.UserGroupPk, e.SectionPk })
                    .HasName("PK_UserGroupScope");

                entity.ToTable("UserGroupScope_Bak");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");
            });

            modelBuilder.Entity<UserGroupUser>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");
            });

            modelBuilder.Entity<UserGroupUserBak>(entity =>
            {
                entity.HasKey(e => new { e.UserGroupPk, e.UserPk })
                    .HasName("PK_UserGroupUser");

                entity.ToTable("UserGroupUser_Bak");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");
            });

            modelBuilder.Entity<UserRights>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.UserPk).HasColumnName("UserPK");
            });

            modelBuilder.Entity<UserRightsBak>(entity =>
            {
                entity.HasKey(e => new { e.UserPk, e.AccessRight })
                    .HasName("PK_UserRights");

                entity.ToTable("UserRights_Bak");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.AccessRight).HasComment("Flag");

                entity.HasOne(d => d.UserPkNavigation)
                    .WithMany(p => p.UserRightsBak)
                    .HasForeignKey(d => d.UserPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRights_User");
            });

            modelBuilder.Entity<UserScope>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");
            });

            modelBuilder.Entity<UserScopeBak>(entity =>
            {
                entity.HasKey(e => new { e.UserPk, e.SectionPk })
                    .HasName("PK_UserScope");

                entity.ToTable("UserScope_Bak");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.UserScopeBak)
                    .HasForeignKey(d => d.SectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserScope_Section");

                entity.HasOne(d => d.UserPkNavigation)
                    .WithMany(p => p.UserScopeBak)
                    .HasForeignKey(d => d.UserPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserScope_User");
            });

            modelBuilder.Entity<UserStg>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<VwRptBreakdownAndIssueNod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptBreakdownAndIssueNod");

                entity.Property(e => e.ActionTaken).HasColumnName("Action Taken");

                entity.Property(e => e.AssetId)
                    .HasColumnName("Asset: ID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssetLocation)
                    .IsRequired()
                    .HasColumnName("Asset: Location")
                    .HasMaxLength(102)
                    .IsUnicode(false);

                entity.Property(e => e.AssetType)
                    .HasColumnName("Asset: Type")
                    .HasMaxLength(209);

                entity.Property(e => e.DateTimeRaise)
                    .HasColumnName("Date/Time: Raise")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTimeResponse)
                    .HasColumnName("Date/Time: Response")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTimeWorkEnd)
                    .HasColumnName("Date/Time: Work End")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTimeWorkStart)
                    .HasColumnName("Date/Time: Work Start")
                    .HasColumnType("datetime");

                entity.Property(e => e.DescriptionOfFailure).HasColumnName("Description of Failure");

                entity.Property(e => e.KmEnd).HasColumnName("KM End");

                entity.Property(e => e.KmStart).HasColumnName("KM Start");

                entity.Property(e => e.Lane).HasMaxLength(50);

                entity.Property(e => e.NodCategory)
                    .HasColumnName("NOD Category")
                    .HasMaxLength(50);

                entity.Property(e => e.NodId)
                    .HasColumnName("NOD ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Picture1)
                    .HasColumnName("Picture 1")
                    .HasMaxLength(228);

                entity.Property(e => e.Picture2)
                    .HasColumnName("Picture 2")
                    .HasMaxLength(228);

                entity.Property(e => e.Picture3)
                    .HasColumnName("Picture 3")
                    .HasMaxLength(228);

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptConditionByConcessionaires>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptConditionByConcessionaires");

                entity.Property(e => e.IribadCount).HasColumnName("IRIBadCount");

                entity.Property(e => e.IrifairCount).HasColumnName("IRIFairCount");

                entity.Property(e => e.IrigoodCount).HasColumnName("IRIGoodCount");

                entity.Property(e => e.IripoorCount).HasColumnName("IRIPoorCount");

                entity.Property(e => e.MtdbadCount).HasColumnName("MTDBadCount");

                entity.Property(e => e.MtdfairCount).HasColumnName("MTDFairCount");

                entity.Property(e => e.MtdgoodCount).HasColumnName("MTDGoodCount");

                entity.Property(e => e.MtdpoorCount).HasColumnName("MTDPoorCount");

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.PcibadCount).HasColumnName("PCIBadCount");

                entity.Property(e => e.PcifairCount).HasColumnName("PCIFairCount");

                entity.Property(e => e.PcigoodCount).HasColumnName("PCIGoodCount");

                entity.Property(e => e.PcipoorCount).HasColumnName("PCIPoorCount");

                entity.Property(e => e.RutbadCount).HasColumnName("RUTBadCount");

                entity.Property(e => e.RutfairCount).HasColumnName("RUTFairCount");

                entity.Property(e => e.RutgoodCount).HasColumnName("RUTGoodCount");

                entity.Property(e => e.RutpoorCount).HasColumnName("RUTPoorCount");
            });

            modelBuilder.Entity<VwRptConditionByRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptConditionByRegion");

                entity.Property(e => e.IribadCount).HasColumnName("IRIBadCount");

                entity.Property(e => e.IrifairCount).HasColumnName("IRIFairCount");

                entity.Property(e => e.IrigoodCount).HasColumnName("IRIGoodCount");

                entity.Property(e => e.IripoorCount).HasColumnName("IRIPoorCount");

                entity.Property(e => e.MtdbadCount).HasColumnName("MTDBadCount");

                entity.Property(e => e.MtdfairCount).HasColumnName("MTDFairCount");

                entity.Property(e => e.MtdgoodCount).HasColumnName("MTDGoodCount");

                entity.Property(e => e.MtdpoorCount).HasColumnName("MTDPoorCount");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PcibadCount).HasColumnName("PCIBadCount");

                entity.Property(e => e.PcifairCount).HasColumnName("PCIFairCount");

                entity.Property(e => e.PcigoodCount).HasColumnName("PCIGoodCount");

                entity.Property(e => e.PcipoorCount).HasColumnName("PCIPoorCount");

                entity.Property(e => e.RutbadCount).HasColumnName("RUTBadCount");

                entity.Property(e => e.RutfairCount).HasColumnName("RUTFairCount");

                entity.Property(e => e.RutgoodCount).HasColumnName("RUTGoodCount");

                entity.Property(e => e.RutpoorCount).HasColumnName("RUTPoorCount");
            });

            modelBuilder.Entity<VwRptConditionBySection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptConditionBySection");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IribadCount).HasColumnName("IRIBadCount");

                entity.Property(e => e.IrifairCount).HasColumnName("IRIFairCount");

                entity.Property(e => e.IrigoodCount).HasColumnName("IRIGoodCount");

                entity.Property(e => e.IripoorCount).HasColumnName("IRIPoorCount");

                entity.Property(e => e.MtdbadCount).HasColumnName("MTDBadCount");

                entity.Property(e => e.MtdfairCount).HasColumnName("MTDFairCount");

                entity.Property(e => e.MtdgoodCount).HasColumnName("MTDGoodCount");

                entity.Property(e => e.MtdpoorCount).HasColumnName("MTDPoorCount");

                entity.Property(e => e.PcibadCount).HasColumnName("PCIBadCount");

                entity.Property(e => e.PcifairCount).HasColumnName("PCIFairCount");

                entity.Property(e => e.PcigoodCount).HasColumnName("PCIGoodCount");

                entity.Property(e => e.PcipoorCount).HasColumnName("PCIPoorCount");

                entity.Property(e => e.RutbadCount).HasColumnName("RUTBadCount");

                entity.Property(e => e.RutfairCount).HasColumnName("RUTFairCount");

                entity.Property(e => e.RutgoodCount).HasColumnName("RUTGoodCount");

                entity.Property(e => e.RutpoorCount).HasColumnName("RUTPoorCount");
            });

            modelBuilder.Entity<VwRptDashboardViewComplaint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewComplaint");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasColumnName("Region Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode)
                    .HasColumnName("Section Code")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptDashboardViewEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewEmergency");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasColumnName("Region Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode)
                    .IsRequired()
                    .HasColumnName("Section Code")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptDashboardViewForNod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewForNOD");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasColumnName("Region Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionCode)
                    .HasColumnName("Section Code")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptDashboardViewPavementKpi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewPavementKPI");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.Pdpm1aCount).HasColumnName("PDPM1aCount");

                entity.Property(e => e.Pdpm1aPercent).HasColumnName("PDPM1a_Percent");

                entity.Property(e => e.Pdpm1aText)
                    .HasColumnName("PDPM1aText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm1bCount).HasColumnName("PDPM1bCount");

                entity.Property(e => e.Pdpm1bPercent).HasColumnName("PDPM1b_Percent");

                entity.Property(e => e.Pdpm1bText)
                    .HasColumnName("PDPM1bText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2aCount).HasColumnName("PDPM2aCount");

                entity.Property(e => e.Pdpm2aPercent).HasColumnName("PDPM2a_Percent");

                entity.Property(e => e.Pdpm2aText)
                    .HasColumnName("PDPM2aText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2bCount).HasColumnName("PDPM2bCount");

                entity.Property(e => e.Pdpm2bPercent).HasColumnName("PDPM2b_Percent");

                entity.Property(e => e.Pdpm2bText)
                    .HasColumnName("PDPM2bText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm3Percent).HasColumnName("PDPM3_Percent");

                entity.Property(e => e.Pdpm3count).HasColumnName("PDPM3Count");

                entity.Property(e => e.Pdpm3text)
                    .HasColumnName("PDPM3Text")
                    .HasMaxLength(68)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm4Percent).HasColumnName("PDPM4_Percent");

                entity.Property(e => e.Pdpm4count).HasColumnName("PDPM4Count");

                entity.Property(e => e.Pdpm4text)
                    .HasColumnName("PDPM4Text")
                    .HasMaxLength(56)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5aCount).HasColumnName("PDPM5aCount");

                entity.Property(e => e.Pdpm5aPercent).HasColumnName("PDPM5a_Percent");

                entity.Property(e => e.Pdpm5aText)
                    .HasColumnName("PDPM5aText")
                    .HasMaxLength(73)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5bCount).HasColumnName("PDPM5bCount");

                entity.Property(e => e.Pdpm5bPercent).HasColumnName("PDPM5b_Percent");

                entity.Property(e => e.Pdpm5bText)
                    .HasColumnName("PDPM5bText")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm6Percent).HasColumnName("PDPM6_Percent");

                entity.Property(e => e.Pdpm6count).HasColumnName("PDPM6Count");

                entity.Property(e => e.Pdpm6text)
                    .HasColumnName("PDPM6Text")
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm7Percent).HasColumnName("PDPM7_Percent");

                entity.Property(e => e.Pdpm7count).HasColumnName("PDPM7Count");

                entity.Property(e => e.Pdpm7text)
                    .HasColumnName("PDPM7Text")
                    .HasMaxLength(58)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptDashboardViewTrendingHistoricOverTheYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewTrendingHistoricOverTheYear");

                entity.Property(e => e.IribadCount).HasColumnName("IRIBadCount");

                entity.Property(e => e.IrifairCount).HasColumnName("IRIFairCount");

                entity.Property(e => e.IrigoodCount).HasColumnName("IRIGoodCount");

                entity.Property(e => e.IripoorCount).HasColumnName("IRIPoorCount");

                entity.Property(e => e.MtdbadCount).HasColumnName("MTDBadCount");

                entity.Property(e => e.MtdfairCount).HasColumnName("MTDFairCount");

                entity.Property(e => e.MtdgoodCount).HasColumnName("MTDGoodCount");

                entity.Property(e => e.MtdpoorCount).HasColumnName("MTDPoorCount");

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.PcibadCount).HasColumnName("PCIBadCount");

                entity.Property(e => e.PcifairCount).HasColumnName("PCIFairCount");

                entity.Property(e => e.PcigoodCount).HasColumnName("PCIGoodCount");

                entity.Property(e => e.PcipoorCount).HasColumnName("PCIPoorCount");

                entity.Property(e => e.RutbadCount).HasColumnName("RUTBadCount");

                entity.Property(e => e.RutfairCount).HasColumnName("RUTFairCount");

                entity.Property(e => e.RutgoodCount).HasColumnName("RUTGoodCount");

                entity.Property(e => e.RutpoorCount).HasColumnName("RUTPoorCount");
            });

            modelBuilder.Entity<VwRptDashboardViewTrendingHistoricOverTheYear2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewTrendingHistoricOverTheYear2");

                entity.Property(e => e.Network).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptDashboardViewTrendingHistoricOverTheYear3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashboardViewTrendingHistoricOverTheYear3");

                entity.Property(e => e.Network).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptDashbordViewTollPlazaSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDashbordViewTollPlazaSummary");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasColumnName("Locality of Feature")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .HasColumnName("Region Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .HasColumnName("Region Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Section).HasMaxLength(10);
            });

            modelBuilder.Entity<VwRptDrainageInspectionOverallReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptDrainageInspectionOverallReport");

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.CulvertId)
                    .IsRequired()
                    .HasColumnName("Culvert ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Defect).HasMaxLength(1000);

                entity.Property(e => e.FeatureName)
                    .HasColumnName("Feature Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Fi).HasColumnName("FI");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KmLoc).HasColumnName("KM Loc");

                entity.Property(e => e.OverallCondition)
                    .HasColumnName("Overall Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.OverallService)
                    .HasColumnName("Overall Service")
                    .HasMaxLength(50);

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.RampId)
                    .IsRequired()
                    .HasColumnName("Ramp ID")
                    .HasMaxLength(150);

                entity.Property(e => e.RecommendedAction)
                    .HasColumnName("Recommended Action")
                    .HasMaxLength(1000);

                entity.Property(e => e.Rm).HasColumnName("RM");

                entity.Property(e => e.Rw).HasColumnName("RW");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptFwddata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptFWDData");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.D0D300).HasColumnName("D0-D300");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Es).HasColumnName("ES");

                entity.Property(e => e.FwdTestPoint).HasColumnName("FWD Test Point");

                entity.Property(e => e.H1).HasColumnName("h1");

                entity.Property(e => e.H2).HasColumnName("h2");

                entity.Property(e => e.H3).HasColumnName("h3");

                entity.Property(e => e.KmFrom).HasColumnName("KM From");

                entity.Property(e => e.KmTo).HasColumnName("KM To");

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.LengthM).HasColumnName("Length (m)");

                entity.Property(e => e.NoOfLanes).HasColumnName("No. of Lanes");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.StructNo).HasColumnName("Struct No.");

                entity.Property(e => e.SurveyDate)
                    .HasColumnName("Survey Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptGeometricData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptGeometricData");

                entity.Property(e => e.AltitudeM).HasColumnName("Altitude (m)");

                entity.Property(e => e.AverageRiseFall).HasColumnName("Average Rise & Fall");

                entity.Property(e => e.AverageSpeed).HasColumnName("Average Speed");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crossfall).HasColumnName("Crossfall (%)");

                entity.Property(e => e.CurvatureDegKm).HasColumnName("Curvature (deg/km)");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.KmFrom).HasColumnName("KM From");

                entity.Property(e => e.KmTo).HasColumnName("KM To");

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.NoOfLanes).HasColumnName("No. of Lanes");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.RiseFallNo).HasColumnName("Rise & Fall (No.)");

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.SurveyDate)
                    .HasColumnName("Survey Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptListOfFeatureCommercialFacilities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfFeatureCommercialFacilities");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CommercialFacilitiesId)
                    .IsRequired()
                    .HasColumnName("Commercial Facilities ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasColumnName("Feature Name")
                    .HasMaxLength(255);

                entity.Property(e => e.KmLocation).HasColumnName("KM Location");

                entity.Property(e => e.Lof)
                    .IsRequired()
                    .HasColumnName("LOF")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<VwRptListOfFeatureInterchangesAndJunction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfFeatureInterchangesAndJunction");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeatureName)
                    .IsRequired()
                    .HasColumnName("Feature Name")
                    .HasMaxLength(255);

                entity.Property(e => e.KmLocation).HasColumnName("KM Location");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasColumnName("Locality of Feature")
                    .HasMaxLength(50);

                entity.Property(e => e.Lof)
                    .IsRequired()
                    .HasColumnName("LOF")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MhaOffice)
                    .HasColumnName("MHA Office")
                    .HasMaxLength(50);

                entity.Property(e => e.OpeningDate)
                    .HasColumnName("Opening Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SpeedLimit).HasColumnName("Speed Limit");
            });

            modelBuilder.Entity<VwRptListOfRampIds>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfRampIDs");

                entity.Property(e => e.RampIdAbbreviation)
                    .IsRequired()
                    .HasColumnName("Ramp ID: Abbreviation")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RampIdName)
                    .IsRequired()
                    .HasColumnName("Ramp ID: Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VwRptListOfRegionsAndSections>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfRegionsAndSections");

                entity.Property(e => e.AssetOwner)
                    .HasColumnName("Asset Owner")
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive).HasColumnName("Is Active");

                entity.Property(e => e.KmEnd).HasColumnName("KM End");

                entity.Property(e => e.KmStart).HasColumnName("KM Start");

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionRouteFrom)
                    .HasColumnName("Section Route From")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionRouteTo)
                    .HasColumnName("Section Route To")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptListOfRoutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfRoutes");

                entity.Property(e => e.AscendingDirection)
                    .HasColumnName("Ascending Direction")
                    .HasMaxLength(50);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.From).HasMaxLength(50);

                entity.Property(e => e.KmEnd).HasColumnName("KM End");

                entity.Property(e => e.KmStart).HasColumnName("KM Start");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .IsRequired()
                    .HasColumnName("Route Name")
                    .HasMaxLength(50);

                entity.Property(e => e.To).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptListOfTollLanesAndTollBooths>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfTollLanesAndTollBooths");

                entity.Property(e => e.BoothNo)
                    .IsRequired()
                    .HasColumnName("Booth No")
                    .HasMaxLength(50);

                entity.Property(e => e.BoothType)
                    .IsRequired()
                    .HasColumnName("Booth Type")
                    .HasMaxLength(150);

                entity.Property(e => e.LaneCode)
                    .IsRequired()
                    .HasColumnName("Lane Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LaneDirection)
                    .IsRequired()
                    .HasColumnName("Lane Direction")
                    .HasMaxLength(50);

                entity.Property(e => e.LaneSizeM).HasColumnName("Lane Size (m)");

                entity.Property(e => e.LaneType)
                    .IsRequired()
                    .HasColumnName("Lane Type")
                    .HasMaxLength(50);

                entity.Property(e => e.PlazaCode)
                    .IsRequired()
                    .HasColumnName("Plaza Code")
                    .HasMaxLength(150);

                entity.Property(e => e.PlazaName)
                    .IsRequired()
                    .HasColumnName("Plaza Name")
                    .HasMaxLength(150);

                entity.Property(e => e.Region).HasMaxLength(20);

                entity.Property(e => e.Reversible)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.TollSystemType)
                    .IsRequired()
                    .HasColumnName("Toll System Type")
                    .HasMaxLength(50);

                entity.Property(e => e.TransactionMode)
                    .IsRequired()
                    .HasColumnName("Transaction Mode")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptListOfTollPlaza>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptListOfTollPlaza");

                entity.Property(e => e.Abbr)
                    .IsRequired()
                    .HasColumnName("Abbr.")
                    .HasMaxLength(50);

                entity.Property(e => e.KmLocation).HasColumnName("KM Location");

                entity.Property(e => e.LocalityOfFeature)
                    .IsRequired()
                    .HasColumnName("Locality of Feature")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OpeningDate)
                    .HasColumnName("Opening Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PlazaCode)
                    .IsRequired()
                    .HasColumnName("Plaza Code")
                    .HasMaxLength(150);

                entity.Property(e => e.PlazaName)
                    .IsRequired()
                    .HasColumnName("Plaza Name")
                    .HasMaxLength(150);

                entity.Property(e => e.Region).HasMaxLength(20);

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.TollPlazaId)
                    .IsRequired()
                    .HasColumnName("Toll Plaza ID")
                    .HasMaxLength(100);

                entity.Property(e => e.TollSystemType)
                    .IsRequired()
                    .HasColumnName("Toll System Type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptMasterInspectionProgramBridge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMasterInspectionProgramBridge");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnName("Actual End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnName("Actual Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReportCycle)
                    .HasColumnName("Report Cycle")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduleEndDate)
                    .HasColumnName("Schedule End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate)
                    .HasColumnName("Schedule Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasColumnName("Section Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionNetwork)
                    .HasColumnName("Section Network")
                    .HasMaxLength(50);

                entity.Property(e => e.TargetWorkOrderSubmissionDate)
                    .HasColumnName("Target Work Order Submission Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkProgramYear).HasColumnName("Work Program Year");
            });

            modelBuilder.Entity<VwRptMasterInspectionProgramDrainage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMasterInspectionProgramDrainage");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnName("Actual End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnName("Actual Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReportCycle)
                    .HasColumnName("Report Cycle")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduleEndDate)
                    .HasColumnName("Schedule End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate)
                    .HasColumnName("Schedule Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasColumnName("Section Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionNetwork)
                    .HasColumnName("Section Network")
                    .HasMaxLength(50);

                entity.Property(e => e.TargetWorkOrderSubmissionDate)
                    .HasColumnName("Target Work Order Submission Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkProgramYear).HasColumnName("Work Program Year");
            });

            modelBuilder.Entity<VwRptMasterInspectionProgramSlope>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMasterInspectionProgramSlope");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnName("Actual End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnName("Actual Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReportCycle)
                    .HasColumnName("Report Cycle")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduleEndDate)
                    .HasColumnName("Schedule End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate)
                    .HasColumnName("Schedule Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasColumnName("Section Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SectionNetwork)
                    .HasColumnName("Section Network")
                    .HasMaxLength(50);

                entity.Property(e => e.TargetWorkOrderSubmissionDate)
                    .HasColumnName("Target Work Order Submission Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkProgramYear).HasColumnName("Work Program Year");
            });

            modelBuilder.Entity<VwRptMcsbacklogComprehensiveProgressTrackerReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMCSBacklogComprehensiveProgressTrackerReport");

                entity.Property(e => e.Activity).HasMaxLength(255);

                entity.Property(e => e.ActualDateEnd)
                    .HasColumnName("Actual Date: End")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualDateStart)
                    .HasColumnName("Actual Date: Start")
                    .HasColumnType("datetime");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.LocationBacklogFromKm).HasColumnName("Location Backlog: From (KM)");

                entity.Property(e => e.LocationBacklogToKm).HasColumnName("Location Backlog: To (KM)");

                entity.Property(e => e.McsActivityBacklogPk).HasColumnName("McsActivityBacklogPK");

                entity.Property(e => e.McsCategoryBacklogPk).HasColumnName("McsCategoryBacklogPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlanDateEnd)
                    .HasColumnName("Plan Date: End")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlanDateStart)
                    .HasColumnName("Plan Date: Start")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProgressTrackingOutstanding).HasColumnName("Progress Tracking: Outstanding");

                entity.Property(e => e.ProgressTrackingOutstanding1).HasColumnName("Progress Tracking: Outstanding %");

                entity.Property(e => e.ProgressTrackingTodate).HasColumnName("Progress Tracking: Todate");

                entity.Property(e => e.ProgressTrackingTodate1).HasColumnName("Progress Tracking: Todate %");

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.TotalQuantityBacklog).HasColumnName("Total Quantity Backlog");

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptMcsbacklogPerformanceMarkerReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMCSBacklogPerformanceMarkerReport");

                entity.Property(e => e.Activity).HasMaxLength(255);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.LocationOutstandingFromKm).HasColumnName("Location Outstanding: From (KM)");

                entity.Property(e => e.LocationOutstandingToKm).HasColumnName("Location Outstanding: To (KM)");

                entity.Property(e => e.McsActivityBacklogPk).HasColumnName("McsActivityBacklogPK");

                entity.Property(e => e.McsCategoryBacklogPk).HasColumnName("McsCategoryBacklogPK");

                entity.Property(e => e.PhotoAfter)
                    .HasColumnName("Photo After")
                    .HasMaxLength(234);

                entity.Property(e => e.PhotoBefore)
                    .HasColumnName("Photo Before")
                    .HasMaxLength(235);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegionPk).HasColumnName("RegionPK");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e._).HasColumnName("%");
            });

            modelBuilder.Entity<VwRptMlpdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMLPData");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IriMKm).HasColumnName("IRI (m/km)");

                entity.Property(e => e.IriStdDeviation).HasColumnName("IRI Std Deviation");

                entity.Property(e => e.KmFrom).HasColumnName("KM From");

                entity.Property(e => e.KmTo).HasColumnName("KM To");

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.MtdMm).HasColumnName("MTD (mm)");

                entity.Property(e => e.MtdStdDeviation).HasColumnName("MTD Std Deviation");

                entity.Property(e => e.NoOfLanes).HasColumnName("No. of Lanes");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.RutMm).HasColumnName("RUT (mm)");

                entity.Property(e => e.RutStdDeviation).HasColumnName("RUT Std Deviation");

                entity.Property(e => e.SurveyDate)
                    .HasColumnName("Survey Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptMttr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptMTTR");

                entity.Property(e => e.ActualCompletionDate)
                    .HasColumnName("Actual Completion: Date")
                    .HasColumnType("date");

                entity.Property(e => e.ActualCompletionTime).HasColumnName("Actual Completion: Time");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnName("Actual Start: Date")
                    .HasColumnType("date");

                entity.Property(e => e.ActualStartTime).HasColumnName("Actual Start: Time");

                entity.Property(e => e.AssetSubGroup)
                    .HasColumnName("Asset Sub Group")
                    .HasMaxLength(50);

                entity.Property(e => e.Customer).HasMaxLength(20);

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.Nod).HasColumnName("NOD");

                entity.Property(e => e.PlusITemsNo)
                    .HasColumnName("PLUS iTems No.")
                    .HasMaxLength(20);

                entity.Property(e => e.ReceiptOfComplaintNodIncidentDateTimeDate)
                    .HasColumnName("Receipt of Complaint (NOD Incident Date Time): Date")
                    .HasColumnType("date");

                entity.Property(e => e.ReceiptOfComplaintNodIncidentDateTimeTime).HasColumnName("Receipt of Complaint (NOD Incident Date Time): Time");

                entity.Property(e => e.RepairTimeHr)
                    .HasColumnName("Repair Time (HR)")
                    .HasColumnType("numeric(17, 6)");

                entity.Property(e => e.ResponseTimeHr)
                    .HasColumnName("Response Time (HR)")
                    .HasColumnType("numeric(17, 6)");

                entity.Property(e => e.SectionCode)
                    .HasColumnName("Section Code")
                    .HasMaxLength(10);

                entity.Property(e => e.Status).HasMaxLength(20);
            });

            modelBuilder.Entity<VwRptOverallPluspavementConditionDistribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptOverallPLUSPavementConditionDistribution");

                entity.Property(e => e.IribadCount).HasColumnName("IRIBadCount");

                entity.Property(e => e.IrifairCount).HasColumnName("IRIFairCount");

                entity.Property(e => e.IrigoodCount).HasColumnName("IRIGoodCount");

                entity.Property(e => e.IripoorCount).HasColumnName("IRIPoorCount");

                entity.Property(e => e.MtdbadCount).HasColumnName("MTDBadCount");

                entity.Property(e => e.MtdfairCount).HasColumnName("MTDFairCount");

                entity.Property(e => e.MtdgoodCount).HasColumnName("MTDGoodCount");

                entity.Property(e => e.MtdpoorCount).HasColumnName("MTDPoorCount");

                entity.Property(e => e.PcibadCount).HasColumnName("PCIBadCount");

                entity.Property(e => e.PcifairCount).HasColumnName("PCIFairCount");

                entity.Property(e => e.PcigoodCount).HasColumnName("PCIGoodCount");

                entity.Property(e => e.PcipoorCount).HasColumnName("PCIPoorCount");

                entity.Property(e => e.RutbadCount).HasColumnName("RUTBadCount");

                entity.Property(e => e.RutfairCount).HasColumnName("RUTFairCount");

                entity.Property(e => e.RutgoodCount).HasColumnName("RUTGoodCount");

                entity.Property(e => e.RutpoorCount).HasColumnName("RUTPoorCount");
            });

            modelBuilder.Entity<VwRptPavementAnnualWorkProgramAwp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementAnnualWorkProgramAwp");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubmissionDate)
                    .HasColumnName("Submission Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptPavementForwardWorkProgram3Years>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementForwardWorkProgram3Years");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionOfWork).HasColumnName("Description of Work");

                entity.Property(e => e.KmFromPca).HasColumnName("KM From (PCA)");

                entity.Property(e => e.KmToPca).HasColumnName("KM To (PCA)");

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.WidthSurf).HasColumnName("Width_Surf");
            });

            modelBuilder.Entity<VwRptPavementKpilistingView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementKPIListingView");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.Pdpm1aCount).HasColumnName("PDPM1aCount");

                entity.Property(e => e.Pdpm1aPercent).HasColumnName("PDPM1a_Percent");

                entity.Property(e => e.Pdpm1aText)
                    .HasColumnName("PDPM1aText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm1bCount).HasColumnName("PDPM1bCount");

                entity.Property(e => e.Pdpm1bPercent).HasColumnName("PDPM1b_Percent");

                entity.Property(e => e.Pdpm1bText)
                    .HasColumnName("PDPM1bText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2aCount).HasColumnName("PDPM2aCount");

                entity.Property(e => e.Pdpm2aPercent).HasColumnName("PDPM2a_Percent");

                entity.Property(e => e.Pdpm2aText)
                    .HasColumnName("PDPM2aText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2bCount).HasColumnName("PDPM2bCount");

                entity.Property(e => e.Pdpm2bPercent).HasColumnName("PDPM2b_Percent");

                entity.Property(e => e.Pdpm2bText)
                    .HasColumnName("PDPM2bText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm3Percent).HasColumnName("PDPM3_Percent");

                entity.Property(e => e.Pdpm3count).HasColumnName("PDPM3Count");

                entity.Property(e => e.Pdpm3text)
                    .HasColumnName("PDPM3Text")
                    .HasMaxLength(68)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm4Percent).HasColumnName("PDPM4_Percent");

                entity.Property(e => e.Pdpm4count).HasColumnName("PDPM4Count");

                entity.Property(e => e.Pdpm4text)
                    .HasColumnName("PDPM4Text")
                    .HasMaxLength(56)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5aCount).HasColumnName("PDPM5aCount");

                entity.Property(e => e.Pdpm5aPercent).HasColumnName("PDPM5a_Percent");

                entity.Property(e => e.Pdpm5aText)
                    .HasColumnName("PDPM5aText")
                    .HasMaxLength(73)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5bCount).HasColumnName("PDPM5bCount");

                entity.Property(e => e.Pdpm5bPercent).HasColumnName("PDPM5b_Percent");

                entity.Property(e => e.Pdpm5bText)
                    .HasColumnName("PDPM5bText")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm6Percent).HasColumnName("PDPM6_Percent");

                entity.Property(e => e.Pdpm6count).HasColumnName("PDPM6Count");

                entity.Property(e => e.Pdpm6text)
                    .HasColumnName("PDPM6Text")
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm7Percent).HasColumnName("PDPM7_Percent");

                entity.Property(e => e.Pdpm7count).HasColumnName("PDPM7Count");

                entity.Property(e => e.Pdpm7text)
                    .HasColumnName("PDPM7Text")
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptPavementPrepConditionReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepConditionReport");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.Pci).HasColumnName("PCI");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptPavementPrepInventoryReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepInventoryReport");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.RiseFallAverage).HasColumnName("RiseFall_average");

                entity.Property(e => e.RiseFallNumber).HasColumnName("RiseFall_number");

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.ShouldType1).HasMaxLength(50);

                entity.Property(e => e.ShouldType2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ShoulderWidth2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptPavementPrepStructureReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepStructureReport");

                entity.Property(e => e.BaseThick)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FwdcentralDef).HasColumnName("FWDCentralDef");

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.SubbThick)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubgStren)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptPavementPrepTrafficCountReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepTrafficCountReport");

                entity.Property(e => e.Growth)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Motorcycle)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SurveyDate).HasColumnType("datetime");

                entity.Property(e => e.TcstationId)
                    .HasColumnName("TCStationID")
                    .HasMaxLength(50);

                entity.Property(e => e.Utility)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptPavementPrepWorkHistoriesReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepWorkHistoriesReport");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.MaintCode)
                    .IsRequired()
                    .HasColumnName("MAINT_CODE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.ReviewDate)
                    .IsRequired()
                    .HasColumnName("Review_date")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.Roughness)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Rutting)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WorksDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptPavementPrepWorkPlanReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementPrepWorkPlanReport");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.MaintCode)
                    .IsRequired()
                    .HasColumnName("Maint_Code")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PlannedDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.ReviewDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptPavementProjectedKpicomplianceReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementProjectedKPIComplianceReport");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Network).HasMaxLength(50);

                entity.Property(e => e.Pdpm1aCount).HasColumnName("PDPM1aCount");

                entity.Property(e => e.Pdpm1aPercent).HasColumnName("PDPM1a_Percent");

                entity.Property(e => e.Pdpm1aText)
                    .HasColumnName("PDPM1aText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm1bCount).HasColumnName("PDPM1bCount");

                entity.Property(e => e.Pdpm1bPercent).HasColumnName("PDPM1b_Percent");

                entity.Property(e => e.Pdpm1bText)
                    .HasColumnName("PDPM1bText")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2aCount).HasColumnName("PDPM2aCount");

                entity.Property(e => e.Pdpm2aPercent).HasColumnName("PDPM2a_Percent");

                entity.Property(e => e.Pdpm2aText)
                    .HasColumnName("PDPM2aText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm2bCount).HasColumnName("PDPM2bCount");

                entity.Property(e => e.Pdpm2bPercent).HasColumnName("PDPM2b_Percent");

                entity.Property(e => e.Pdpm2bText)
                    .HasColumnName("PDPM2bText")
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm3Percent).HasColumnName("PDPM3_Percent");

                entity.Property(e => e.Pdpm3count).HasColumnName("PDPM3Count");

                entity.Property(e => e.Pdpm3text)
                    .HasColumnName("PDPM3Text")
                    .HasMaxLength(68)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm4Percent).HasColumnName("PDPM4_Percent");

                entity.Property(e => e.Pdpm4count).HasColumnName("PDPM4Count");

                entity.Property(e => e.Pdpm4text)
                    .HasColumnName("PDPM4Text")
                    .HasMaxLength(56)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5aCount).HasColumnName("PDPM5aCount");

                entity.Property(e => e.Pdpm5aPercent).HasColumnName("PDPM5a_Percent");

                entity.Property(e => e.Pdpm5aText)
                    .HasColumnName("PDPM5aText")
                    .HasMaxLength(73)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm5bCount).HasColumnName("PDPM5bCount");

                entity.Property(e => e.Pdpm5bPercent).HasColumnName("PDPM5b_Percent");

                entity.Property(e => e.Pdpm5bText)
                    .HasColumnName("PDPM5bText")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm6Percent).HasColumnName("PDPM6_Percent");

                entity.Property(e => e.Pdpm6count).HasColumnName("PDPM6Count");

                entity.Property(e => e.Pdpm6text)
                    .HasColumnName("PDPM6Text")
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.Pdpm7Percent).HasColumnName("PDPM7_Percent");

                entity.Property(e => e.Pdpm7count).HasColumnName("PDPM7Count");

                entity.Property(e => e.Pdpm7text)
                    .HasColumnName("PDPM7Text")
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptPavementStripMapCondition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptPavementStripMapCondition");

                entity.Property(e => e.IriBad).HasColumnName("IRI_Bad");

                entity.Property(e => e.IriFair).HasColumnName("IRI_Fair");

                entity.Property(e => e.IriGood).HasColumnName("IRI_Good");

                entity.Property(e => e.IriPoor).HasColumnName("IRI_Poor");

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.MtdFair).HasColumnName("MTD_Fair");

                entity.Property(e => e.MtdGood).HasColumnName("MTD_Good");

                entity.Property(e => e.MtdPoor).HasColumnName("MTD_Poor");

                entity.Property(e => e.NbFlIriRating).HasColumnName("NB_FL_IRI_Rating");

                entity.Property(e => e.NbFlMtdRating).HasColumnName("NB_FL_MTD_Rating");

                entity.Property(e => e.NbFlPciRating).HasColumnName("NB_FL_PCI_Rating");

                entity.Property(e => e.NbFlRutRating).HasColumnName("NB_FL_RUT_Rating");

                entity.Property(e => e.NbMl1IriRating).HasColumnName("NB_ML1_IRI_Rating");

                entity.Property(e => e.NbMl1MtdRating).HasColumnName("NB_ML1_MTD_Rating");

                entity.Property(e => e.NbMl1PciRating).HasColumnName("NB_ML1_PCI_Rating");

                entity.Property(e => e.NbMl1RutRating).HasColumnName("NB_ML1_RUT_Rating");

                entity.Property(e => e.NbMl2IriRating).HasColumnName("NB_ML2_IRI_Rating");

                entity.Property(e => e.NbMl2MtdRating).HasColumnName("NB_ML2_MTD_Rating");

                entity.Property(e => e.NbMl2PciRating).HasColumnName("NB_ML2_PCI_Rating");

                entity.Property(e => e.NbMl2RutRating).HasColumnName("NB_ML2_RUT_Rating");

                entity.Property(e => e.NbSlIriRating).HasColumnName("NB_SL_IRI_Rating");

                entity.Property(e => e.NbSlMtdRating).HasColumnName("NB_SL_MTD_Rating");

                entity.Property(e => e.NbSlPciRating).HasColumnName("NB_SL_PCI_Rating");

                entity.Property(e => e.NbSlRutRating).HasColumnName("NB_SL_RUT_Rating");

                entity.Property(e => e.PciFair).HasColumnName("PCI_Fair");

                entity.Property(e => e.PciGood).HasColumnName("PCI_Good");

                entity.Property(e => e.PciPoor).HasColumnName("PCI_Poor");

                entity.Property(e => e.RutBad).HasColumnName("RUT_Bad");

                entity.Property(e => e.RutFair).HasColumnName("RUT_Fair");

                entity.Property(e => e.RutGood).HasColumnName("RUT_Good");

                entity.Property(e => e.RutPoor).HasColumnName("RUT_Poor");

                entity.Property(e => e.SbFlIriRating).HasColumnName("SB_FL_IRI_Rating");

                entity.Property(e => e.SbFlMtdRating).HasColumnName("SB_FL_MTD_Rating");

                entity.Property(e => e.SbFlPciRating).HasColumnName("SB_FL_PCI_Rating");

                entity.Property(e => e.SbFlRutRating).HasColumnName("SB_FL_RUT_Rating");

                entity.Property(e => e.SbMl1IriRating).HasColumnName("SB_ML1_IRI_Rating");

                entity.Property(e => e.SbMl1MtdRating).HasColumnName("SB_ML1_MTD_Rating");

                entity.Property(e => e.SbMl1PciRating).HasColumnName("SB_ML1_PCI_Rating");

                entity.Property(e => e.SbMl1RutRating).HasColumnName("SB_ML1_RUT_Rating");

                entity.Property(e => e.SbMl2IriRating).HasColumnName("SB_ML2_IRI_Rating");

                entity.Property(e => e.SbMl2MtdRating).HasColumnName("SB_ML2_MTD_Rating");

                entity.Property(e => e.SbMl2PciRating).HasColumnName("SB_ML2_PCI_Rating");

                entity.Property(e => e.SbMl2RutRating).HasColumnName("SB_ML2_RUT_Rating");

                entity.Property(e => e.SbSlIriRating).HasColumnName("SB_SL_IRI_Rating");

                entity.Property(e => e.SbSlMtdRating).HasColumnName("SB_SL_MTD_Rating");

                entity.Property(e => e.SbSlPciRating).HasColumnName("SB_SL_PCI_Rating");

                entity.Property(e => e.SbSlRutRating).HasColumnName("SB_SL_RUT_Rating");

                entity.Property(e => e.Sectioncode)
                    .HasColumnName("sectioncode")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<VwRptSicDailyProgramFixedLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSicDailyProgramFixedLocation");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");

                entity.Property(e => e.McsCategoryPk).HasColumnName("McsCategoryPK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Shift)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwRptSicDailyProgramGeneralRoadCleaning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSicDailyProgramGeneralRoadCleaning");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityName).HasMaxLength(200);

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlanLocation).HasMaxLength(200);
            });

            modelBuilder.Entity<VwRptSicDailyProgramLandscape>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSicDailyProgramLandscape");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityName).HasMaxLength(200);

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.McsActivityScorecardPk).HasColumnName("McsActivityScorecardPK");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlanLocation).HasMaxLength(200);
            });

            modelBuilder.Entity<VwRptSicDailyProgramMobile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSicDailyProgramMobile");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Bound)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Interchange)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.TypeOfArea)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<VwRptSkidResistanceData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSkidResistanceData");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Gn).HasColumnName("GN");

                entity.Property(e => e.KmFrom).HasColumnName("KM From");

                entity.Property(e => e.KmTo).HasColumnName("KM To");

                entity.Property(e => e.LaneNo)
                    .HasColumnName("Lane No.")
                    .HasMaxLength(50);

                entity.Property(e => e.NoOfLanes).HasColumnName("No. of Lanes");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Road).HasMaxLength(10);

                entity.Property(e => e.RoadNo).HasMaxLength(50);

                entity.Property(e => e.Scrim).HasColumnName("SCRIM");

                entity.Property(e => e.SurveyDate)
                    .HasColumnName("Survey Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VwRptSlopeWorkingFileReportProposed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSlopeWorkingFileReportProposed");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.DefectRating)
                    .IsRequired()
                    .HasColumnName("Defect Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DistressCondition)
                    .HasColumnName("Distress Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.DrainageCondition)
                    .HasColumnName("Drainage Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.EndKm).HasColumnName("End KM");

                entity.Property(e => e.ExistingStabWorks)
                    .HasColumnName("Existing Stab Works")
                    .HasMaxLength(50);

                entity.Property(e => e.Feature).HasMaxLength(50);

                entity.Property(e => e.Fi)
                    .HasColumnName("FI")
                    .HasMaxLength(2038);

                entity.Property(e => e.HazardRiskRating)
                    .IsRequired()
                    .HasColumnName("Hazard & Risk Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.HeightM).HasColumnName("Height (m)");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfBerm).HasColumnName("No of Berm");

                entity.Property(e => e.ObservationOnfRmWorks)
                    .HasColumnName("Observation onf RM Works")
                    .HasMaxLength(2038);

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.PrevCond).HasColumnName("Prev. Cond.");

                entity.Property(e => e.PrevInspDate)
                    .HasColumnName("Prev Insp. Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RemedialWorks)
                    .HasColumnName("Remedial Works")
                    .HasMaxLength(2038);

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);

                entity.Property(e => e.StartKm).HasColumnName("Start KM");

                entity.Property(e => e.SurfaceCondition)
                    .HasColumnName("Surface Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptSummaryOfBridgePeriodicInspectionToMha>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfBridgePeriodicInspectionToMHA");

                entity.Property(e => e.BridgeId)
                    .IsRequired()
                    .HasColumnName("Bridge ID")
                    .HasMaxLength(100);

                entity.Property(e => e.BridgeName)
                    .IsRequired()
                    .HasColumnName("Bridge Name")
                    .HasMaxLength(250);

                entity.Property(e => e.DateOfInspection)
                    .HasColumnName("Date of Inspection")
                    .HasColumnType("datetime");

                entity.Property(e => e.DefectObserved)
                    .HasColumnName("Defect Observed")
                    .HasMaxLength(1000);

                entity.Property(e => e.KmLocation).HasColumnName("KM Location");

                entity.Property(e => e.NoOfSpans).HasColumnName("No of Spans");

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Rating).HasMaxLength(5);

                entity.Property(e => e.RecommendedAction)
                    .HasColumnName("Recommended Action")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusCurrent");

                entity.Property(e => e.ActionBy)
                    .IsRequired()
                    .HasColumnName("Action By")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.Defect).HasMaxLength(1000);

                entity.Property(e => e.EndKm).HasColumnName("End KM");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rank)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecommendedAction)
                    .HasColumnName("Recommended Action")
                    .HasMaxLength(1000);

                entity.Property(e => e.RefNo)
                    .IsRequired()
                    .HasColumnName("Ref No")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);

                entity.Property(e => e.StartKm).HasColumnName("Start KM");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusProposed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfSlopeDefectsRecommendedWorksAndStatusProposed");

                entity.Property(e => e.FurtherInvestigation)
                    .HasColumnName("Further Investigation")
                    .HasMaxLength(2038);

                entity.Property(e => e.HazardRiskRating)
                    .IsRequired()
                    .HasColumnName("Hazard & Risk Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rating)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RemarksRecommendation).HasColumnName("Remarks / Recommendation");

                entity.Property(e => e.RemedialWorks)
                    .HasColumnName("Remedial Works")
                    .HasMaxLength(2038);

                entity.Property(e => e.RoutineMaintenance)
                    .HasColumnName("Routine Maintenance")
                    .HasMaxLength(2038);

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfSlopePeriodicInspectionReportToMHACurrent");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.DefectRating)
                    .IsRequired()
                    .HasColumnName("Defect Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DistressCondition)
                    .HasColumnName("Distress Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.DrainageCondition)
                    .HasColumnName("Drainage Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.EndKm).HasColumnName("End KM");

                entity.Property(e => e.ExistingStabWorks)
                    .HasColumnName("Existing Stab Works")
                    .HasMaxLength(50);

                entity.Property(e => e.Feature).HasMaxLength(50);

                entity.Property(e => e.HazardRiskRating)
                    .IsRequired()
                    .HasColumnName("Hazard & Risk Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.HeightM).HasColumnName("Height (m)");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfBerm).HasColumnName("No of Berm");

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);

                entity.Property(e => e.StartKm).HasColumnName("Start KM");

                entity.Property(e => e.SurfaceCondition)
                    .HasColumnName("Surface Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptSummaryOfSlopePeriodicInspectionReportToMhacurrentRams>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfSlopePeriodicInspectionReportToMHACurrentRAMS");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.DefectRating)
                    .IsRequired()
                    .HasColumnName("Defect Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DistressCondition)
                    .HasColumnName("Distress Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.DrainageCondition)
                    .HasColumnName("Drainage Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.EndKm).HasColumnName("End KM");

                entity.Property(e => e.ExistingStabWorks)
                    .HasColumnName("Existing Stab Works")
                    .HasMaxLength(50);

                entity.Property(e => e.Feature).HasMaxLength(50);

                entity.Property(e => e.HazardRiskRating)
                    .IsRequired()
                    .HasColumnName("Hazard & Risk Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.HeightM).HasColumnName("Height (m)");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfBerm).HasColumnName("No of Berm");

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.PriorityRating)
                    .HasColumnName("Priority Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode).HasMaxLength(20);

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);

                entity.Property(e => e.StartKm).HasColumnName("Start KM");

                entity.Property(e => e.SurfaceCondition)
                    .HasColumnName("Surface Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptSummaryOfSlopePeriodicInspectionReportToMhaproposed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfSlopePeriodicInspectionReportToMHAProposed");

                entity.Property(e => e.Angle)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Bound).HasMaxLength(50);

                entity.Property(e => e.DefectRating)
                    .HasColumnName("Defect Rating")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DistressCondition)
                    .HasColumnName("Distress Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.DrainageCondition)
                    .HasColumnName("Drainage Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.EndKm).HasColumnName("End KM");

                entity.Property(e => e.ExistingStabWorks)
                    .HasColumnName("Existing Stab Works")
                    .HasMaxLength(50);

                entity.Property(e => e.Feature).HasMaxLength(50);

                entity.Property(e => e.HazardRiskRating)
                    .IsRequired()
                    .HasColumnName("Hazard & Risk Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.HeightM).HasColumnName("Height (m)");

                entity.Property(e => e.InspectionDate)
                    .HasColumnName("Inspection Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfBerm).HasColumnName("No of Berm");

                entity.Property(e => e.OverallCond).HasColumnName("Overall Cond");

                entity.Property(e => e.Section).HasMaxLength(10);

                entity.Property(e => e.SlopeId)
                    .IsRequired()
                    .HasColumnName("Slope ID")
                    .HasMaxLength(100);

                entity.Property(e => e.StartKm).HasColumnName("Start KM");

                entity.Property(e => e.SurfaceCondition)
                    .HasColumnName("Surface Condition")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwRptSummaryOfTollPlazaByNetwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptSummaryOfTollPlazaByNetwork");

                entity.Property(e => e.Network).HasMaxLength(50);
            });

            modelBuilder.Entity<VwRptWorkInstructionSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptWorkInstructionSummary");

                entity.Property(e => e.GrandTotal).HasColumnName("Grand Total");

                entity.Property(e => e.MonthDate)
                    .HasColumnName("Month Date")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TotalClosed).HasColumnName("Total Closed");

                entity.Property(e => e.TotalInProgress).HasColumnName("Total In Progress");

                entity.Property(e => e.TotalNew).HasColumnName("Total New");

                entity.Property(e => e.TotalNod).HasColumnName("Total NOD");
            });

            modelBuilder.Entity<VwRptWorkOrderDetailReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptWorkOrderDetailReport");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnName("Actual End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate)
                    .HasColumnName("Actual Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AssetId)
                    .HasColumnName("Asset ID")
                    .HasMaxLength(100);

                entity.Property(e => e.AssignedToContractor)
                    .HasColumnName("Assigned To Contractor")
                    .HasMaxLength(255);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedBy)
                    .HasColumnName("Issued By")
                    .HasMaxLength(255);

                entity.Property(e => e.IssuerPlusPropel)
                    .HasColumnName("Issuer (PLUS / PROPEL)")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NodNo).HasColumnName("NOD No.");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ScheduleEndDate)
                    .HasColumnName("Schedule End Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate)
                    .HasColumnName("Schedule Start Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SectionKmFrom).HasColumnName("Section KM From");

                entity.Property(e => e.SectionKmTo).HasColumnName("Section KM To");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.WoCreatedDate)
                    .HasColumnName("WO Created Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WoTitle)
                    .HasColumnName("WO Title")
                    .HasMaxLength(500);

                entity.Property(e => e.WorkOrderNo)
                    .IsRequired()
                    .HasColumnName("Work Order No")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkType)
                    .HasColumnName("Work Type")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRptWorkRequestSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwRptWorkRequestSummary");

                entity.Property(e => e.GrandTotal).HasColumnName("Grand Total");

                entity.Property(e => e.MonthDate)
                    .HasColumnName("Month Date")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TotalClosed).HasColumnName("Total Closed");

                entity.Property(e => e.TotalInProgress).HasColumnName("Total In Progress");

                entity.Property(e => e.TotalNew).HasColumnName("Total New");

                entity.Property(e => e.TotalNod).HasColumnName("Total NOD");
            });

            modelBuilder.Entity<VwUserOldOpusDomain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserOldOpusDomain");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(4000);

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LockedUntil).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NewUserName).HasMaxLength(4000);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordExpiry).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SectionGroupPk).HasColumnName("SectionGroupPK");

                entity.Property(e => e.UserGroupPk).HasColumnName("UserGroupPK");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<VwUserOldUemedgentaDomain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserOldUEMEdgentaDomain");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NewEmail).HasMaxLength(4000);

                entity.Property(e => e.NewUsername).HasMaxLength(4000);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Work>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AttdendedBy).HasMaxLength(255);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.ContractorRemark).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Drdate)
                    .HasColumnName("DRDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Drnumber)
                    .HasColumnName("DRNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.FinalBq).HasColumnName("FinalBQ");

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InitialBq).HasColumnName("InitialBQ");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.LastSentToRossdate)
                    .HasColumnName("LastSentToROSSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NotificationDate).HasColumnType("datetime");

                entity.Property(e => e.PlusworkOrderDate)
                    .HasColumnName("PLUSWorkOrderDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlusworkOrderNo)
                    .HasColumnName("PLUSWorkOrderNo")
                    .HasMaxLength(50);

                entity.Property(e => e.PostContructionReportDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.RossworkCategory)
                    .HasColumnName("ROSSWorkCategory")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SentToDr).HasColumnName("SentToDR");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TrafficManagementPlanSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.WorkClass)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkCloseDate).HasColumnType("datetime");

                entity.Property(e => e.WorkDescription).HasMaxLength(500);

                entity.Property(e => e.WorkMaintenanceType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderNo).HasMaxLength(50);

                entity.Property(e => e.WorkPermitGainedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkSubType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.ContractorPkNavigation)
                    .WithMany(p => p.Work)
                    .HasForeignKey(d => d.ContractorPk)
                    .HasConstraintName("FK_Work_Contractor");

                entity.HasOne(d => d.SectionPkNavigation)
                    .WithMany(p => p.Work)
                    .HasForeignKey(d => d.SectionPk)
                    .HasConstraintName("FK_Work_Section");
            });

            modelBuilder.Entity<WorkAttachment>(entity =>
            {
                entity.HasKey(e => new { e.WorkPk, e.RecordIndex });

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<WorkDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WorkDetail");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AttdendedBy).HasMaxLength(255);

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCompanyName).HasMaxLength(255);

                entity.Property(e => e.ContractorPk).HasColumnName("ContractorPK");

                entity.Property(e => e.ContractorRemark).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Drdate)
                    .HasColumnName("DRDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Drnumber)
                    .HasColumnName("DRNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.FinalBq).HasColumnName("FinalBQ");

                entity.Property(e => e.GroupStructureDetailMainComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailMainGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubComponent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructureDetailSubGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroupStructurePk).HasColumnName("GroupStructurePK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InitialBq).HasColumnName("InitialBQ");

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Kmfrom).HasColumnName("KMFrom");

                entity.Property(e => e.Kmto).HasColumnName("KMTo");

                entity.Property(e => e.LastSentToRossdate)
                    .HasColumnName("LastSentToROSSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Nod).HasColumnName("NOD");

                entity.Property(e => e.NotificationDate).HasColumnType("datetime");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlusworkOrderDate)
                    .HasColumnName("PLUSWorkOrderDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlusworkOrderNo)
                    .HasColumnName("PLUSWorkOrderNo")
                    .HasMaxLength(50);

                entity.Property(e => e.PostContructionReportDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.RossworkCategory)
                    .HasColumnName("ROSSWorkCategory")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.SentToDr).HasColumnName("SentToDR");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TrafficManagementPlanSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.WorkClass)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkCloseDate).HasColumnType("datetime");

                entity.Property(e => e.WorkDescription).HasMaxLength(500);

                entity.Property(e => e.WorkIssuerName).HasMaxLength(50);

                entity.Property(e => e.WorkMaintenanceType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderNo).HasMaxLength(50);

                entity.Property(e => e.WorkPermitGainedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkSubType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkSubTypeName).HasMaxLength(50);

                entity.Property(e => e.WorkType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<WorkEot>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("WorkEOT");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ApprovedBy).HasMaxLength(100);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NewScheduledEndDate).HasColumnType("datetime");

                entity.Property(e => e.TempId).HasColumnName("TempID");

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");
            });

            modelBuilder.Entity<WorkFlow>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.L10responseTime).HasColumnName("L10ResponseTime");

                entity.Property(e => e.L10userRole).HasColumnName("L10UserRole");

                entity.Property(e => e.L1responseTime).HasColumnName("L1ResponseTime");

                entity.Property(e => e.L1userRole).HasColumnName("L1UserRole");

                entity.Property(e => e.L2responseTime).HasColumnName("L2ResponseTime");

                entity.Property(e => e.L2userRole).HasColumnName("L2UserRole");

                entity.Property(e => e.L3responseTime).HasColumnName("L3ResponseTime");

                entity.Property(e => e.L3userRole).HasColumnName("L3UserRole");

                entity.Property(e => e.L4responseTime).HasColumnName("L4ResponseTime");

                entity.Property(e => e.L4userRole).HasColumnName("L4UserRole");

                entity.Property(e => e.L5responseTime).HasColumnName("L5ResponseTime");

                entity.Property(e => e.L5userRole).HasColumnName("L5UserRole");

                entity.Property(e => e.L6responseTime).HasColumnName("L6ResponseTime");

                entity.Property(e => e.L6userRole).HasColumnName("L6UserRole");

                entity.Property(e => e.L7responseTime).HasColumnName("L7ResponseTime");

                entity.Property(e => e.L7userRole).HasColumnName("L7UserRole");

                entity.Property(e => e.L8responseTime).HasColumnName("L8ResponseTime");

                entity.Property(e => e.L8userRole).HasColumnName("L8UserRole");

                entity.Property(e => e.L9responseTime).HasColumnName("L9ResponseTime");

                entity.Property(e => e.L9userRole).HasColumnName("L9UserRole");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkFlowMaster>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentActivityNotificationTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");
            });

            modelBuilder.Entity<WorkFlowNotification>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.WorkFlowMasterPk).HasColumnName("WorkFlowMasterPK");
            });

            modelBuilder.Entity<WorkFlowNotificationDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WorkFlowNotificationDetail");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NodId)
                    .HasColumnName("NodID")
                    .HasMaxLength(50);

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.WorkFlowMasterPk).HasColumnName("WorkFlowMasterPK");
            });

            modelBuilder.Entity<WorkFlowTransaction>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.WorkFlowMasterPk).HasColumnName("WorkFlowMasterPK");
            });

            modelBuilder.Entity<WorkFlowTransactionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WorkFlowTransactionDetail");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NodId)
                    .HasColumnName("NodID")
                    .HasMaxLength(50);

                entity.Property(e => e.NodPk).HasColumnName("NodPK");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserPk).HasColumnName("UserPK");

                entity.Property(e => e.WorkFlowMasterPk).HasColumnName("WorkFlowMasterPK");
            });

            modelBuilder.Entity<WorkMilestone>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.PlannedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.TempId).HasColumnName("TempID");

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");

                entity.HasOne(d => d.WorkPkNavigation)
                    .WithMany(p => p.WorkMilestone)
                    .HasForeignKey(d => d.WorkPk)
                    .HasConstraintName("FK_WorkMilestone_Work");
            });

            modelBuilder.Entity<WorkNod>(entity =>
            {
                entity.HasKey(e => new { e.WorkPk, e.NodPk });

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");

                entity.Property(e => e.NodPk).HasColumnName("NodPK");
            });

            modelBuilder.Entity<WorkPhoto>(entity =>
            {
                entity.HasKey(e => new { e.WorkPk, e.RecordIndex });

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");

                entity.Property(e => e.PhotoFileName).HasMaxLength(200);

                entity.Property(e => e.PhotoRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<WorkProgram>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.ActualTreatmentCode).HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Contractor).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LocalityOfFeature)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OtherProgramType).HasMaxLength(50);

                entity.Property(e => e.ProposedBy).HasMaxLength(100);

                entity.Property(e => e.ReportCycle).HasMaxLength(50);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleTreatmentCode).HasMaxLength(50);

                entity.Property(e => e.ScheduleType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TargetWorkOrderSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.UploadedBy).HasMaxLength(255);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderNumber).HasMaxLength(50);

                entity.Property(e => e.WorkProgramCategory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkProgramType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.InvMasterPkNavigation)
                    .WithMany(p => p.WorkProgram)
                    .HasForeignKey(d => d.InvMasterPk)
                    .HasConstraintName("FK_WorkProgram_InvMaster");
            });

            modelBuilder.Entity<WorkProgramAttachment>(entity =>
            {
                entity.HasKey(e => new { e.WorkProgramPk, e.RecordIndex });

                entity.Property(e => e.WorkProgramPk).HasColumnName("WorkProgramPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<WorkProgramDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WorkProgramDetail");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.ActualTreatmentCode).HasMaxLength(50);

                entity.Property(e => e.AssetFromKm).HasColumnName("AssetFromKM");

                entity.Property(e => e.AssetToKm).HasColumnName("AssetToKM");

                entity.Property(e => e.Bound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Contractor).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.InvMasterPk).HasColumnName("InvMasterPK");

                entity.Property(e => e.LaneNumber).HasMaxLength(50);

                entity.Property(e => e.LocalityOfFeature)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OtherProgramType).HasMaxLength(50);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.ProposedBy).HasMaxLength(100);

                entity.Property(e => e.ReportCycle).HasMaxLength(50);

                entity.Property(e => e.ScheduleEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleTreatmentCode).HasMaxLength(50);

                entity.Property(e => e.ScheduleType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SectionCode).HasMaxLength(10);

                entity.Property(e => e.SectionName).HasMaxLength(50);

                entity.Property(e => e.SectionPk).HasColumnName("SectionPK");

                entity.Property(e => e.TargetWorkOrderSubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.UploadedBy).HasMaxLength(255);

                entity.Property(e => e.UploadedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderNumber).HasMaxLength(50);

                entity.Property(e => e.WorkProgramCategory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkProgramType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<WorkProgress>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FormDate).HasColumnType("datetime");

                entity.Property(e => e.FormType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FormUploadedBy).HasMaxLength(255);

                entity.Property(e => e.FormUploadedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkPk).HasColumnName("WorkPK");

                entity.HasOne(d => d.WorkPkNavigation)
                    .WithMany(p => p.WorkProgress)
                    .HasForeignKey(d => d.WorkPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkProgress_Work");
            });

            modelBuilder.Entity<WorkProgressAttachment>(entity =>
            {
                entity.HasKey(e => new { e.WorkProgressPk, e.RecordIndex });

                entity.Property(e => e.WorkProgressPk).HasColumnName("WorkProgressPK");

                entity.Property(e => e.AttachmentFileName).HasMaxLength(200);

                entity.Property(e => e.AttachmentRemarks).HasMaxLength(1000);
            });

            modelBuilder.Entity<WorkSorItem>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_WorkSOR");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.SorItemPk).HasColumnName("SorItemPK");

                entity.Property(e => e.WorkId).HasColumnName("WorkID");

                entity.HasOne(d => d.SorItemPkNavigation)
                    .WithMany(p => p.WorkSorItem)
                    .HasForeignKey(d => d.SorItemPk)
                    .HasConstraintName("FK_WorkSorItem_SorItem");

                entity.HasOne(d => d.Work)
                    .WithMany(p => p.WorkSorItem)
                    .HasForeignKey(d => d.WorkId)
                    .HasConstraintName("FK_WorkSOR_Work");
            });

            modelBuilder.Entity<WpContractorReview>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Analytical).HasMaxLength(50);

                entity.Property(e => e.Compliance).HasMaxLength(50);

                entity.Property(e => e.Efficiency).HasMaxLength(50);

                entity.Property(e => e.FutureProj).HasMaxLength(50);

                entity.Property(e => e.Knowledge).HasMaxLength(50);

                entity.Property(e => e.Overall).HasMaxLength(50);

                entity.Property(e => e.Planning).HasMaxLength(50);

                entity.Property(e => e.Professionalism).HasMaxLength(50);

                entity.Property(e => e.Quality).HasMaxLength(50);

                entity.Property(e => e.Resources).HasMaxLength(50);

                entity.Property(e => e.RmanagerRem)
                    .HasColumnName("RManagerRem")
                    .HasMaxLength(200);

                entity.Property(e => e.SupervisorRem).HasMaxLength(200);

                entity.Property(e => e.Teamwork).HasMaxLength(50);

                entity.Property(e => e.Timeliness).HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpContractorReview)
                    .HasForeignKey<WpContractorReview>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpContractorReview_WorkProgress");
            });

            modelBuilder.Entity<WpDailyProgress>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .HasComment("=WorkProgressPK")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityOnSite).HasMaxLength(200);

                entity.Property(e => e.ClientInstruction).HasMaxLength(200);

                entity.Property(e => e.ContractorInstruction).HasMaxLength(200);

                entity.Property(e => e.WorkHourFrom).HasMaxLength(50);

                entity.Property(e => e.WorkHourTo).HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpDailyProgress)
                    .HasForeignKey<WpDailyProgress>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDailyProgress_WorkProgress");
            });

            modelBuilder.Entity<WpDailyProgressMachine>(entity =>
            {
                entity.HasKey(e => new { e.RecordIndex, e.WpDailyProgressPk })
                    .HasName("PK_WpDailyProgressMachine_1");

                entity.Property(e => e.WpDailyProgressPk).HasColumnName("WpDailyProgressPK");

                entity.Property(e => e.MachineQuantity).HasMaxLength(50);

                entity.Property(e => e.MachineSubject).HasMaxLength(50);

                entity.HasOne(d => d.WpDailyProgressPkNavigation)
                    .WithMany(p => p.WpDailyProgressMachine)
                    .HasForeignKey(d => d.WpDailyProgressPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDailyProgressMachine_WpDailyProgress");
            });

            modelBuilder.Entity<WpDailyProgressManPower>(entity =>
            {
                entity.HasKey(e => new { e.WpDailyProgressPk, e.RecordIndex })
                    .HasName("PK_WpDailyProgressManPower_1");

                entity.Property(e => e.WpDailyProgressPk).HasColumnName("WpDailyProgressPK");

                entity.Property(e => e.ManPowerQuantity).HasMaxLength(50);

                entity.Property(e => e.ManPowerSubject).HasMaxLength(50);

                entity.HasOne(d => d.WpDailyProgressPkNavigation)
                    .WithMany(p => p.WpDailyProgressManPower)
                    .HasForeignKey(d => d.WpDailyProgressPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDailyProgressManPower_WpDailyProgress");
            });

            modelBuilder.Entity<WpDailyProgressMaterial>(entity =>
            {
                entity.HasKey(e => new { e.WpDailyProgressPk, e.RecordIndex })
                    .HasName("PK_WpDailyProgressMaterial_1");

                entity.Property(e => e.WpDailyProgressPk).HasColumnName("WpDailyProgressPK");

                entity.Property(e => e.MaterialQuantity).HasMaxLength(50);

                entity.Property(e => e.MaterialSubject).HasMaxLength(50);

                entity.HasOne(d => d.WpDailyProgressPkNavigation)
                    .WithMany(p => p.WpDailyProgressMaterial)
                    .HasForeignKey(d => d.WpDailyProgressPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDailyProgressMaterial_WpDailyProgress");
            });

            modelBuilder.Entity<WpDailyProgressWeather>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_Table1");

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Weather).HasMaxLength(50);

                entity.Property(e => e.WpDailyProgressPk).HasColumnName("WpDailyProgressPK");

                entity.HasOne(d => d.WpDailyProgressPkNavigation)
                    .WithMany(p => p.WpDailyProgressWeather)
                    .HasForeignKey(d => d.WpDailyProgressPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDailyProgressWeather_WpDailyProgress");
            });

            modelBuilder.Entity<WpDipping>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_WpDippingForm");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(200);

                entity.Property(e => e.TypeOfDepth).HasMaxLength(200);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpDipping)
                    .HasForeignKey<WpDipping>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDipping_WorkProgress");
            });

            modelBuilder.Entity<WpDippingChainage>(entity =>
            {
                entity.HasKey(e => new { e.WpDippingPk, e.RecordIndex });

                entity.Property(e => e.WpDippingPk).HasColumnName("WpDippingPK");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.WpDippingPkNavigation)
                    .WithMany(p => p.WpDippingChainage)
                    .HasForeignKey(d => d.WpDippingPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpDippingChainage_WpDipping");
            });

            modelBuilder.Entity<WpInspection>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Dummy)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpInspection)
                    .HasForeignKey<WpInspection>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpInspection_WorkProgress");
            });

            modelBuilder.Entity<WpInspectionDefect>(entity =>
            {
                entity.HasKey(e => new { e.WpInspectionPk, e.RecordIndex });

                entity.Property(e => e.WpInspectionPk).HasColumnName("WpInspectionPK");

                entity.Property(e => e.DefectRectifiedDate).HasColumnType("datetime");

                entity.Property(e => e.DefectSubject).HasMaxLength(200);

                entity.HasOne(d => d.WpInspectionPkNavigation)
                    .WithMany(p => p.WpInspectionDefect)
                    .HasForeignKey(d => d.WpInspectionPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpInspectionDefect_WpInspection");
            });

            modelBuilder.Entity<WpLaneClosure>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.PermitNo).HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpLaneClosure)
                    .HasForeignKey<WpLaneClosure>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpLaneClosure_WorkProgress");
            });

            modelBuilder.Entity<WpLaneClosureItem>(entity =>
            {
                entity.HasKey(e => new { e.WpLaneClosurePk, e.RecordIndex });

                entity.Property(e => e.WpLaneClosurePk).HasColumnName("WpLaneClosurePK");

                entity.Property(e => e.Direction).HasMaxLength(50);

                entity.Property(e => e.Kmend).HasColumnName("KMEnd");

                entity.Property(e => e.Kmstart).HasColumnName("KMStart");

                entity.Property(e => e.Purpose).HasMaxLength(200);

                entity.Property(e => e.TimeEnd).HasColumnType("datetime");

                entity.Property(e => e.TimeStart).HasColumnType("datetime");

                entity.HasOne(d => d.WpLaneClosurePkNavigation)
                    .WithMany(p => p.WpLaneClosureItem)
                    .HasForeignKey(d => d.WpLaneClosurePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpLaneClosureItem_WpLaneClosure");
            });

            modelBuilder.Entity<WpMaterialDelivery>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(200);

                entity.Property(e => e.MixType).HasMaxLength(200);

                entity.Property(e => e.Source).HasMaxLength(200);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpMaterialDelivery)
                    .HasForeignKey<WpMaterialDelivery>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpMaterialDelivery_WorkProgress");
            });

            modelBuilder.Entity<WpMaterialDeliveryItem>(entity =>
            {
                entity.HasKey(e => new { e.WpMaterialDeliveryPk, e.RecordIndex });

                entity.Property(e => e.WpMaterialDeliveryPk).HasColumnName("WpMaterialDeliveryPK");

                entity.Property(e => e.ArriveTime).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TruckNo).HasMaxLength(20);

                entity.HasOne(d => d.WpMaterialDeliveryPkNavigation)
                    .WithMany(p => p.WpMaterialDeliveryItem)
                    .HasForeignKey(d => d.WpMaterialDeliveryPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpMaterialDeliveryItem_WpMaterialDelivery");
            });

            modelBuilder.Entity<WpPermitToWork>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.DocCert).HasMaxLength(500);

                entity.Property(e => e.DocCertOther).HasMaxLength(200);

                entity.Property(e => e.DocSupport).HasMaxLength(500);

                entity.Property(e => e.DocSupportOther).HasMaxLength(200);

                entity.Property(e => e.Equipment).HasMaxLength(500);

                entity.Property(e => e.EquipmentOther).HasMaxLength(200);

                entity.Property(e => e.HazActivities).HasMaxLength(500);

                entity.Property(e => e.HazActivitiesOther).HasMaxLength(200);

                entity.Property(e => e.HazPrecautions).HasMaxLength(500);

                entity.Property(e => e.PermitNo).HasMaxLength(50);

                entity.Property(e => e.PmtGenApplicant).HasMaxLength(50);

                entity.Property(e => e.PmtGenApprove).HasMaxLength(50);

                entity.Property(e => e.PmtGenAuthority).HasMaxLength(50);

                entity.Property(e => e.PmtGenComments).HasMaxLength(200);

                entity.Property(e => e.PmtGenDate).HasColumnType("datetime");

                entity.Property(e => e.PmtGenReason).HasMaxLength(50);

                entity.Property(e => e.PmtGenTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.PmtGenTimeTo).HasColumnType("datetime");

                entity.Property(e => e.PmtRsmName).HasMaxLength(50);

                entity.Property(e => e.PmtRsmPosition).HasMaxLength(50);

                entity.Property(e => e.PmtRsmRemarks).HasMaxLength(200);

                entity.Property(e => e.PmtStopName).HasMaxLength(50);

                entity.Property(e => e.PmtStopPosition).HasMaxLength(50);

                entity.Property(e => e.PmtStopReason).HasMaxLength(50);

                entity.Property(e => e.ReqCompany).HasMaxLength(50);

                entity.Property(e => e.ReqFacility).HasMaxLength(50);

                entity.Property(e => e.ReqIdno)
                    .HasColumnName("ReqIDNo")
                    .HasMaxLength(50);

                entity.Property(e => e.ReqLocation).HasMaxLength(50);

                entity.Property(e => e.ReqName).HasMaxLength(50);

                entity.Property(e => e.ReqScope).HasMaxLength(500);

                entity.Property(e => e.ReqScopeOther).HasMaxLength(200);

                entity.Property(e => e.ReqWork).HasMaxLength(200);

                entity.Property(e => e.ReqWorksite).HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpPermitToWork)
                    .HasForeignKey<WpPermitToWork>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpPermitToWork_WorkProgress");
            });

            modelBuilder.Entity<WpPermitToWorkPtw>(entity =>
            {
                entity.HasKey(e => new { e.WpPermitToWorkPk, e.RecordIndex });

                entity.Property(e => e.WpPermitToWorkPk).HasColumnName("WpPermitToWorkPK");

                entity.Property(e => e.PtwName).HasMaxLength(50);

                entity.Property(e => e.PtwPosition).HasMaxLength(50);

                entity.Property(e => e.PtwTimeIn).HasColumnType("datetime");

                entity.HasOne(d => d.WpPermitToWorkPkNavigation)
                    .WithMany(p => p.WpPermitToWorkPtw)
                    .HasForeignKey(d => d.WpPermitToWorkPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpPermitToWorkPtw_WpPermitToWork");
            });

            modelBuilder.Entity<WpServiceReport>(entity =>
            {
                entity.HasKey(e => e.Pk)
                    .HasName("PK_WpMttr");

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.AttendedDt).HasColumnType("datetime");

                entity.Property(e => e.CertifiedBySupervisorCompany).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorName).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorPosition).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorSignature).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalCompany).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalName).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalPosition).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalSignature).HasMaxLength(50);

                entity.Property(e => e.CompletedDt).HasColumnType("datetime");

                entity.Property(e => e.Customer).HasMaxLength(20);

                entity.Property(e => e.EquipmentNo).HasMaxLength(50);

                entity.Property(e => e.Issue).HasMaxLength(5);

                entity.Property(e => e.NotifiedBy).HasMaxLength(50);

                entity.Property(e => e.PlusItemsNo)
                    .HasColumnName("PlusITemsNo")
                    .HasMaxLength(20);

                entity.Property(e => e.RefNo).HasMaxLength(20);

                entity.Property(e => e.ReportedByCompany).HasMaxLength(50);

                entity.Property(e => e.ReportedByName).HasMaxLength(50);

                entity.Property(e => e.ReportedByPosition).HasMaxLength(50);

                entity.Property(e => e.ReportedBySignature).HasMaxLength(50);

                entity.Property(e => e.RequestPriority).HasMaxLength(20);

                entity.Property(e => e.ServiceLevel)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.VerifiedByCompany).HasMaxLength(50);

                entity.Property(e => e.VerifiedByName).HasMaxLength(50);

                entity.Property(e => e.VerifiedByPosition).HasMaxLength(50);

                entity.Property(e => e.VerifiedBySignature).HasMaxLength(50);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpServiceReport)
                    .HasForeignKey<WpServiceReport>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpServiceReport_WorkProgress");
            });

            modelBuilder.Entity<WpServiceReportAction>(entity =>
            {
                entity.HasKey(e => new { e.WpServiceReportPk, e.RecordIndex })
                    .HasName("PK_WpMttrL1Action");

                entity.Property(e => e.WpServiceReportPk).HasColumnName("WpServiceReportPK");

                entity.Property(e => e.ActionPhoto).HasMaxLength(50);

                entity.Property(e => e.ActionTaken).HasMaxLength(200);

                entity.HasOne(d => d.WpServiceReportPkNavigation)
                    .WithMany(p => p.WpServiceReportAction)
                    .HasForeignKey(d => d.WpServiceReportPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpServiceReportAction_WpServiceReport");
            });

            modelBuilder.Entity<WpServiceReportPart>(entity =>
            {
                entity.HasKey(e => new { e.WpServiceReportPk, e.RecordIndex });

                entity.Property(e => e.WpServiceReportPk).HasColumnName("WpServiceReportPK");

                entity.Property(e => e.PartName).HasMaxLength(500);

                entity.HasOne(d => d.WpServiceReportPkNavigation)
                    .WithMany(p => p.WpServiceReportPart)
                    .HasForeignKey(d => d.WpServiceReportPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpServiceReportPart_WpServiceReport");
            });

            modelBuilder.Entity<WpServiceReportPersonel>(entity =>
            {
                entity.HasKey(e => new { e.RecordIndex, e.WpServiceReportPk });

                entity.Property(e => e.WpServiceReportPk).HasColumnName("WpServiceReportPK");

                entity.Property(e => e.PersonelName).HasMaxLength(200);

                entity.Property(e => e.PersonelStaffNo).HasMaxLength(200);

                entity.Property(e => e.PersonelTimeIn).HasColumnType("datetime");

                entity.Property(e => e.PersonelTimeOut).HasColumnType("datetime");

                entity.HasOne(d => d.WpServiceReportPkNavigation)
                    .WithMany(p => p.WpServiceReportPersonel)
                    .HasForeignKey(d => d.WpServiceReportPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpServiceReportPersonel_WpServiceReport");
            });

            modelBuilder.Entity<WpServiceReportView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WpServiceReportView");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.AttendedDt).HasColumnType("datetime");

                entity.Property(e => e.CertifiedBySupervisorCompany).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorName).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorPosition).HasMaxLength(50);

                entity.Property(e => e.CertifiedBySupervisorSignature).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalCompany).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalName).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalPosition).HasMaxLength(50);

                entity.Property(e => e.CertifiedByTechnicalSignature).HasMaxLength(50);

                entity.Property(e => e.CompletedDt).HasColumnType("datetime");

                entity.Property(e => e.Customer).HasMaxLength(20);

                entity.Property(e => e.EquipmentNo).HasMaxLength(50);

                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");

                entity.Property(e => e.InvMasterId)
                    .HasColumnName("InvMasterID")
                    .HasMaxLength(100);

                entity.Property(e => e.Issue).HasMaxLength(5);

                entity.Property(e => e.NodIds).HasColumnName("NodIDs");

                entity.Property(e => e.NotifiedBy).HasMaxLength(50);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.PlusItemsNo)
                    .HasColumnName("PlusITemsNo")
                    .HasMaxLength(20);

                entity.Property(e => e.RefNo).HasMaxLength(20);

                entity.Property(e => e.ReportedByCompany).HasMaxLength(50);

                entity.Property(e => e.ReportedByName).HasMaxLength(50);

                entity.Property(e => e.ReportedByPosition).HasMaxLength(50);

                entity.Property(e => e.ReportedBySignature).HasMaxLength(50);

                entity.Property(e => e.RequestPriority).HasMaxLength(20);

                entity.Property(e => e.ServiceLevel)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.VerifiedByCompany).HasMaxLength(50);

                entity.Property(e => e.VerifiedByName).HasMaxLength(50);

                entity.Property(e => e.VerifiedByPosition).HasMaxLength(50);

                entity.Property(e => e.VerifiedBySignature).HasMaxLength(50);

                entity.Property(e => e.WorkCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkSectionCode).HasMaxLength(10);

                entity.Property(e => e.WorkStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.WorkSubType).HasMaxLength(50);

                entity.Property(e => e.WorkType).HasMaxLength(50);
            });

            modelBuilder.Entity<WpToolboxTalk>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Location).HasMaxLength(200);

                entity.Property(e => e.Time).HasColumnType("datetime");

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpToolboxTalk)
                    .HasForeignKey<WpToolboxTalk>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpToolboxTalk_WorkProgress");
            });

            modelBuilder.Entity<WpToolboxTalkAttendance>(entity =>
            {
                entity.HasKey(e => new { e.WpToolboxTalkPk, e.RecordIndex });

                entity.Property(e => e.WpToolboxTalkPk).HasColumnName("WpToolboxTalkPK");

                entity.Property(e => e.FileName).HasMaxLength(50);

                entity.HasOne(d => d.WpToolboxTalkPkNavigation)
                    .WithMany(p => p.WpToolboxTalkAttendance)
                    .HasForeignKey(d => d.WpToolboxTalkPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpToolboxTalkAttendance_WpToolboxTalk");
            });

            modelBuilder.Entity<WpVehicle>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.ContactNo).HasMaxLength(200);

                entity.Property(e => e.Designation).HasMaxLength(200);

                entity.Property(e => e.InCharge).HasMaxLength(200);

                entity.Property(e => e.PlusPermitNo).HasMaxLength(200);

                entity.Property(e => e.RefNo).HasMaxLength(200);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpVehicle)
                    .HasForeignKey<WpVehicle>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpVehicle_WorkProgress");
            });

            modelBuilder.Entity<WpVehicleItem>(entity =>
            {
                entity.HasKey(e => new { e.WpVehiclePk, e.RecordIndex });

                entity.Property(e => e.WpVehiclePk).HasColumnName("WpVehiclePK");

                entity.Property(e => e.ActivatedBy).HasMaxLength(50);

                entity.Property(e => e.Activity).HasMaxLength(200);

                entity.Property(e => e.DeactivatedBy).HasMaxLength(50);

                entity.Property(e => e.LaneClosureKmfrom).HasColumnName("LaneClosureKMFrom");

                entity.Property(e => e.LaneClosureKmto).HasColumnName("LaneClosureKMTo");

                entity.Property(e => e.PermitNo).HasMaxLength(50);

                entity.Property(e => e.VehicleFrom).HasColumnType("datetime");

                entity.Property(e => e.VehicleTo).HasColumnType("datetime");

                entity.HasOne(d => d.WpVehiclePkNavigation)
                    .WithMany(p => p.WpVehicleItem)
                    .HasForeignKey(d => d.WpVehiclePk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpVehicleItem_WpVehicle");
            });

            modelBuilder.Entity<WpWorkPermit>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .ValueGeneratedNever();

                entity.Property(e => e.PermitNo).HasMaxLength(200);

                entity.HasOne(d => d.PkNavigation)
                    .WithOne(p => p.WpWorkPermit)
                    .HasForeignKey<WpWorkPermit>(d => d.Pk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpWorkPermit_WorkProgress");
            });

            modelBuilder.Entity<WpWorkPermitForm>(entity =>
            {
                entity.HasKey(e => new { e.WpWorkPermitPk, e.RecordIndex });

                entity.Property(e => e.WpWorkPermitPk).HasColumnName("WpWorkPermitPK");

                entity.Property(e => e.FileName).HasMaxLength(50);

                entity.HasOne(d => d.WpWorkPermitPkNavigation)
                    .WithMany(p => p.WpWorkPermitForm)
                    .HasForeignKey(d => d.WpWorkPermitPk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WpWorkPermitForm_WpWorkPermit");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
